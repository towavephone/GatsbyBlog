webpackJsonp([53950094676651],{1231:function(n,s){n.exports={data:{site:{siteMetadata:{description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"js 基础 js 进阶",html:'<h1 id="js-基础"><a href="#js-%E5%9F%BA%E7%A1%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>js 基础</h1>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="43254605066368156000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`Function.prototype.call2 = function (context) {\n  var context = Object(context) || window;\n  context.fn = this;\n\n  var params = [];\n  for (var i = 1; i < arguments.length; i++) {\n    params.push(&quot;arguments[&quot; + i + &quot;]&quot;);\n  }\n  var result = eval(&quot;context.fn(&quot; + params + &quot;)&quot;);\n  delete context.fn;\n  return result;\n};\n\n// var obj = {\n//   value: 1\n// }\n\n// function bar(name, age) {\n//   return {\n//     value: this.value,\n//     name: name,\n//     age: age\n//   }\n// }\n\n// console.log(bar.call2(obj, \'kevin\', 18));\n// // Object {\n// //    value: 1,\n// //    name: \'kevin\',\n// //    age: 18\n// // }\n\nFunction.prototype.apply2 = function (context, arr) {\n  var context = Object(context) || window;\n  context.fn = this;\n\n  var result;\n  if (!arr) {\n    result = context.fn();\n  } else {\n    var params = [];\n    for (var i = 0; i < arr.length; i++) {\n      params.push(&quot;arr[&quot; + i + &quot;]&quot;);\n    }\n    result = eval(&quot;context.fn(&quot; + params + &quot;)&quot;);\n  }\n  delete context.fn;\n  return result;\n};\n\nFunction.prototype.bind2 = function (context) {\n  var self = this;\n  var args = Array.prototype.slice.call2(arguments, 1);\n  var fn = function () {\n    var bindArgs = args.concat(Array.prototype.slice.call2(arguments));\n    // this instanceof fn ? this : context 为了 this.habit\n    return self.apply2(this instanceof fn ? this : context, bindArgs);\n  };\n  // fn.prototype = Object.create(this.prototype);\n  var fNOP = function () {};\n  fNOP.prototype = this.prototype;\n  fn.prototype = new fNOP();\n  return fn;\n};\n\n// var value = 2;\n\n// var foo = {\n//   value: 1\n// };\n\n// function bar(name, age) {\n//     this.habit = \'shopping\';\n//     console.log(this.value);\n//     console.log(name);\n//     console.log(age);\n// }\n\n// bar.prototype.friend = \'kevin\';\n\n// var bindFoo = bar.bind2(foo, \'daisy\');\n\n// bindFoo(\'18\');\n// // 1\n// // daisy\n// // 18\n\n// var obj = new bindFoo(\'18\');\n// // undefined\n// // daisy\n// // 18\n// console.log(obj.habit);\n// console.log(obj.friend);\n// // shopping\n// // kevin\n\nfunction objectFactory() {\n  var obj = {};\n  // 返回第一个元素的值\n  var Constructor = Array.prototype.shift.call2(arguments);\n  // 形成构造函数的 prototype 链\n  obj.__proto__ = Constructor.prototype;\n  // 使 obj 里面有值，通过 apply 强制改变 this 指向\n  var result = Constructor.apply2(obj, arguments);\n  // 查看返回值是否是对象\n  return typeof result === &quot;object&quot; ? result : obj;\n}\n\n// // Otaku 御宅族，简称宅\n// function Otaku(name, age) {\n//   this.name = name;\n//   this.age = age;\n\n//   this.habit = \'Games\';\n// }\n\n// // 因为缺乏锻炼的缘故，身体强度让人担忧\n// Otaku.prototype.strength = 60;\n\n// Otaku.prototype.sayYourName = function () {\n//   console.log(\'I am \' + this.name);\n// }\n\n// var person = new objectFactory(Otaku, \'Kevin\', \'18\');\n\n// console.log(person.name) // Kevin\n// console.log(person.habit) // Games\n// console.log(person.strength) // 60\n\n// person.sayYourName(); // I am Kevin\n\n// // Otaku 御宅族，简称宅\n// function Otaku(name, age) {\n//   this.strength = 60;\n//   this.age = age;\n\n//   return {\n//       name: name,\n//       habit: \'Games\'\n//   }\n// }\n\n// // 使用 objectFactory\n// var person = objectFactory(Otaku, \'Kevin\', \'18\')\n\n// console.log(person.name) // Kevin\n// console.log(person.habit) // Games\n// console.log(person.strength) // undefined\n// console.log(person.age) // undefined\n\n// 工厂模式\nfunction createPerson(name) {\n  var o = new Object();\n  o.name = name;\n  o.getName = function () {\n    console.log(this.name);\n  };\n\n  return o;\n}\n\nvar person1 = createPerson(&quot;kevin&quot;);\n\n// 构造函数模式\nfunction Person(name) {\n  this.name = name;\n  this.getName = getName;\n}\n\nfunction getName() {\n  console.log(this.name);\n}\n\nvar person1 = new Person(&quot;kevin&quot;);\n\n// 原型模式\nfunction Person(name) {}\n\nPerson.prototype = {\n  constructor: Person,\n  name: &quot;kevin&quot;,\n  getName: function () {\n    console.log(this.name);\n  },\n};\n\nvar person1 = new Person();\n\n// 组合模式（推荐）\nfunction Person(name) {\n  this.name = name;\n}\n\nPerson.prototype = {\n  constructor: Person,\n  getName: function () {\n    console.log(this.name);\n  },\n};\n\nvar person1 = new Person();\n\n// 动态原型模式\nfunction Person(name) {\n  this.name = name;\n  if (typeof this.getName != &quot;function&quot;) {\n    Person.prototype.getName = function () {\n      console.log(this.name);\n    };\n  }\n}\n\nvar person1 = new Person();\n\n// 寄生构造函数模式\nfunction Person(name) {\n  var o = new Object();\n  o.name = name;\n  o.getName = function () {\n    console.log(this.name);\n  };\n  return o;\n}\n\nvar person1 = new Person(&quot;kevin&quot;);\nconsole.log(person1 instanceof Person); // false\nconsole.log(person1 instanceof Object); // true\n\n// 稳妥构造函数模式\n// 所谓稳妥对象，指的是没有公共属性，而且其方法也不引用 this 的对象。\nfunction person(name) {\n  var o = new Object();\n  o.sayName = function () {\n    console.log(name);\n  };\n  return o;\n}\n\nvar person1 = person(&quot;kevin&quot;);\n\nperson1.sayName(); // kevin\n\nperson1.name = &quot;daisy&quot;;\n\nperson1.sayName(); // kevin\n\nconsole.log(person1.name); // daisy\n\n// 原型链继承\nfunction Parent() {\n  this.name = &quot;kevin&quot;;\n}\n\nParent.prototype.getName = function () {\n  console.log(this.name);\n};\n\nfunction Child() {}\n\nChild.prototype = new Parent();\n\nvar child1 = new Child();\n\nconsole.log(child1.getName()); // kevin\n\n// 借用构造函数（经典继承）\nfunction Parent() {\n  this.names = [&quot;kevin&quot;, &quot;daisy&quot;];\n}\n\nfunction Child() {\n  Parent.call(this);\n}\n\nvar child1 = new Child();\n\nchild1.names.push(&quot;yayu&quot;);\n\nconsole.log(child1.names); // [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]\n\nvar child2 = new Child();\n\nconsole.log(child2.names); // [&quot;kevin&quot;, &quot;daisy&quot;]\n\n// 组合继承\nfunction Parent(name) {\n  this.name = name;\n  this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];\n}\n\nParent.prototype.getName = function () {\n  console.log(this.name);\n};\n\nfunction Child(name, age) {\n  Parent.call(this, name);\n  this.age = age;\n}\n\nChild.prototype = new Parent();\nChild.prototype.constructor = Child;\n\nvar child1 = new Child(&quot;kevin&quot;, &quot;18&quot;);\nchild1.colors.push(&quot;black&quot;);\n\nconsole.log(child1.name); // kevin\nconsole.log(child1.age); // 18\nconsole.log(child1.colors); // [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]\n\nvar child2 = new Child(&quot;daisy&quot;, &quot;20&quot;);\nconsole.log(child2.name); // daisy\nconsole.log(child2.age); // 20\nconsole.log(child2.colors); // [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]\n\n// 原型式继承，始终共享引用类型的值，和原型链继承相同\nfunction createObj(o) {\n  function F() {}\n  F.prototype = o;\n  return new F();\n}\n\nvar person = {\n  name: &quot;kevin&quot;,\n  friends: [&quot;daisy&quot;, &quot;kelly&quot;],\n};\n\nvar person1 = createObj(person);\nvar person2 = createObj(person);\n\nperson1.name = &quot;person1&quot;;\nconsole.log(person2.name); // kevin\n\nperson1.__proto__.name = &quot;person1&quot;;\nconsole.log(person2.name); // person1\n\nperson1.friends.push(&quot;taylor&quot;);\nconsole.log(person2.friends); // [&quot;daisy&quot;, &quot;kelly&quot;, &quot;taylor&quot;]\n\n// 寄生式继承\nfunction createObj(o) {\n  var clone = Object.create(o);\n  clone.sayName = function () {\n    console.log(&quot;hi&quot;);\n  };\n  return clone;\n}\n\n// 寄生组合式继承（推荐）\nfunction Parent(name) {\n  this.name = name;\n  this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];\n}\n\nParent.prototype.getName = function () {\n  console.log(this.name);\n};\n\nfunction Child(name, age) {\n  Parent.call(this, name);\n  this.age = age;\n}\n\n// 关键的三步\nvar F = function () {};\n\nF.prototype = Parent.prototype;\n\nChild.prototype = new F();\n\nvar child1 = new Child(&quot;kevin&quot;, &quot;18&quot;);\n\nconsole.log(child1);\n\n// 封装一下\nfunction object(o) {\n  function F() {}\n  F.prototype = o;\n  return new F();\n}\n\nfunction prototype(child, parent) {\n  var prototype = object(parent.prototype);\n  prototype.constructor = child;\n  child.prototype = prototype;\n}\n\n// 当我们使用的时候：\nprototype(Child, Parent);`, `43254605066368156000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">call2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">||</span> window<span class="token punctuation">;</span>\n  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    params<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"arguments["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"context.fn("</span> <span class="token operator">+</span> params <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// var obj = {</span>\n<span class="token comment">//   value: 1</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// function bar(name, age) {</span>\n<span class="token comment">//   return {</span>\n<span class="token comment">//     value: this.value,</span>\n<span class="token comment">//     name: name,</span>\n<span class="token comment">//     age: age</span>\n<span class="token comment">//   }</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// console.log(bar.call2(obj, \'kevin\', 18));</span>\n<span class="token comment">// // Object {</span>\n<span class="token comment">// //    value: 1,</span>\n<span class="token comment">// //    name: \'kevin\',</span>\n<span class="token comment">// //    age: 18</span>\n<span class="token comment">// // }</span>\n\n<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">apply2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">||</span> window<span class="token punctuation">;</span>\n  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      params<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"arr["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"context.fn("</span> <span class="token operator">+</span> params <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bind2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call2</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> bindArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call2</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// this instanceof fn ? this : context 为了 this.habit</span>\n    <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">apply2</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">fn</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token punctuation">:</span> context<span class="token punctuation">,</span> bindArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// fn.prototype = Object.create(this.prototype);</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">fNOP</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  fNOP<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n  fn<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fNOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> fn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// var value = 2;</span>\n\n<span class="token comment">// var foo = {</span>\n<span class="token comment">//   value: 1</span>\n<span class="token comment">// };</span>\n\n<span class="token comment">// function bar(name, age) {</span>\n<span class="token comment">//     this.habit = \'shopping\';</span>\n<span class="token comment">//     console.log(this.value);</span>\n<span class="token comment">//     console.log(name);</span>\n<span class="token comment">//     console.log(age);</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// bar.prototype.friend = \'kevin\';</span>\n\n<span class="token comment">// var bindFoo = bar.bind2(foo, \'daisy\');</span>\n\n<span class="token comment">// bindFoo(\'18\');</span>\n<span class="token comment">// // 1</span>\n<span class="token comment">// // daisy</span>\n<span class="token comment">// // 18</span>\n\n<span class="token comment">// var obj = new bindFoo(\'18\');</span>\n<span class="token comment">// // undefined</span>\n<span class="token comment">// // daisy</span>\n<span class="token comment">// // 18</span>\n<span class="token comment">// console.log(obj.habit);</span>\n<span class="token comment">// console.log(obj.friend);</span>\n<span class="token comment">// // shopping</span>\n<span class="token comment">// // kevin</span>\n\n<span class="token keyword">function</span> <span class="token function">objectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 返回第一个元素的值</span>\n  <span class="token keyword">var</span> Constructor <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call2</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 形成构造函数的 prototype 链</span>\n  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n  <span class="token comment">// 使 obj 里面有值，通过 apply 强制改变 this 指向</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> Constructor<span class="token punctuation">.</span><span class="token function">apply2</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 查看返回值是否是对象</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">?</span> result <span class="token punctuation">:</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// // Otaku 御宅族，简称宅</span>\n<span class="token comment">// function Otaku(name, age) {</span>\n<span class="token comment">//   this.name = name;</span>\n<span class="token comment">//   this.age = age;</span>\n\n<span class="token comment">//   this.habit = \'Games\';</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// // 因为缺乏锻炼的缘故，身体强度让人担忧</span>\n<span class="token comment">// Otaku.prototype.strength = 60;</span>\n\n<span class="token comment">// Otaku.prototype.sayYourName = function () {</span>\n<span class="token comment">//   console.log(\'I am \' + this.name);</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// var person = new objectFactory(Otaku, \'Kevin\', \'18\');</span>\n\n<span class="token comment">// console.log(person.name) // Kevin</span>\n<span class="token comment">// console.log(person.habit) // Games</span>\n<span class="token comment">// console.log(person.strength) // 60</span>\n\n<span class="token comment">// person.sayYourName(); // I am Kevin</span>\n\n<span class="token comment">// // Otaku 御宅族，简称宅</span>\n<span class="token comment">// function Otaku(name, age) {</span>\n<span class="token comment">//   this.strength = 60;</span>\n<span class="token comment">//   this.age = age;</span>\n\n<span class="token comment">//   return {</span>\n<span class="token comment">//       name: name,</span>\n<span class="token comment">//       habit: \'Games\'</span>\n<span class="token comment">//   }</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// // 使用 objectFactory</span>\n<span class="token comment">// var person = objectFactory(Otaku, \'Kevin\', \'18\')</span>\n\n<span class="token comment">// console.log(person.name) // Kevin</span>\n<span class="token comment">// console.log(person.habit) // Games</span>\n<span class="token comment">// console.log(person.strength) // undefined</span>\n<span class="token comment">// console.log(person.age) // undefined</span>\n\n<span class="token comment">// 工厂模式</span>\n<span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  o<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> o<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"kevin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 构造函数模式</span>\n<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">=</span> getName<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"kevin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 原型模式</span>\n<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>\n  constructor<span class="token punctuation">:</span> Person<span class="token punctuation">,</span>\n  name<span class="token punctuation">:</span> <span class="token string">"kevin"</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">getName</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 组合模式（推荐）</span>\n<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>\n  constructor<span class="token punctuation">:</span> Person<span class="token punctuation">,</span>\n  <span class="token function-variable function">getName</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 动态原型模式</span>\n<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">!=</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 寄生构造函数模式</span>\n<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  o<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> o<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"kevin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// 稳妥构造函数模式</span>\n<span class="token comment">// 所谓稳妥对象，指的是没有公共属性，而且其方法也不引用 this 的对象。</span>\n<span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> o<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token string">"kevin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nperson1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// kevin</span>\n\nperson1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"daisy"</span><span class="token punctuation">;</span>\n\nperson1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// kevin</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// daisy</span>\n\n<span class="token comment">// 原型链继承</span>\n<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"kevin"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// kevin</span>\n\n<span class="token comment">// 借用构造函数（经典继承）</span>\n<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"kevin"</span><span class="token punctuation">,</span> <span class="token string">"daisy"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nchild1<span class="token punctuation">.</span>names<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"yayu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["kevin", "daisy", "yayu"]</span>\n\n<span class="token keyword">var</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["kevin", "daisy"]</span>\n\n<span class="token comment">// 组合继承</span>\n<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"kevin"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nchild1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// kevin</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red", "blue", "green", "black"]</span>\n\n<span class="token keyword">var</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"daisy"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// daisy</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red", "blue", "green"]</span>\n\n<span class="token comment">// 原型式继承，始终共享引用类型的值，和原型链继承相同</span>\n<span class="token keyword">function</span> <span class="token function">createObj</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"kevin"</span><span class="token punctuation">,</span>\n  friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"daisy"</span><span class="token punctuation">,</span> <span class="token string">"kelly"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">createObj</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token function">createObj</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nperson1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"person1"</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// kevin</span>\n\nperson1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"person1"</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// person1</span>\n\nperson1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"taylor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["daisy", "kelly", "taylor"]</span>\n\n<span class="token comment">// 寄生式继承</span>\n<span class="token keyword">function</span> <span class="token function">createObj</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  clone<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> clone<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 寄生组合式继承（推荐）</span>\n<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 关键的三步</span>\n<span class="token keyword">var</span> <span class="token function-variable function">F</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n\n<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"kevin"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 封装一下</span>\n<span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">prototype</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> prototype <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> child<span class="token punctuation">;</span>\n  child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 当我们使用的时候：</span>\n<span class="token function">prototype</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="js-进阶"><a href="#js-%E8%BF%9B%E9%98%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>js 进阶</h1>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="23976013941743000000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// immediate 前置执行\nfunction debounce(func, wait, immediate) {\n  var timeout, result;\n\n  var debounced = function () {\n    var context = this;\n    var args = arguments;\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    if (immediate) {\n      var callNow = !timeout;\n      timeout = setTimeout(function () {\n        timeout = null;\n      }, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n      }\n    } else {\n      timeout = setTimeout(function () {\n        func.apply(context, args);\n      }, wait);\n    }\n    return result;\n  };\n\n  debounced.cancel = function () {\n    clearTimeout(timeout);\n    timeout = null;\n  };\n\n  return debounced;\n}\n\nfunction throttle(func, wait) {\n  var prev = 0;\n  return function () {\n    var now = Date.now();\n    var context = this;\n    var args = arguments;\n    if (now - prev > wait) {\n      func.apply(context, args);\n      prev = now;\n    }\n  };\n}\n\nfunction throttle(func, wait) {\n  var timeout;\n  return function () {\n    var context = this;\n    var args = arguments;\n\n    if (!timeout) {\n      timeout = setTimeout(function () {\n        func.apply(context, args);\n        timeout = null;\n      }, wait);\n    }\n  };\n}\n\n// 有头有尾都触发\nfunction throttle(func, wait) {\n  var timeout, context, args;\n  var prev = 0;\n\n  var throttled = function () {\n    context = this;\n    args = arguments;\n    var now = Date.now();\n    var remain = wait - (now - prev);\n    if (remain <= 0 || remain > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      func.apply(context, args);\n      prev = now;\n    } else if (!timeout) {\n      timeout = setTimeout(function () {\n        prev = Date.now();\n        timeout = null;\n        func.apply(context, args);\n      }, remain);\n    }\n  };\n\n  return throttled;\n}\n\n// 排序后去重\nvar array = [1, 1, &quot;1&quot;];\n\nfunction unique(array) {\n  var res = [];\n  var sortedArray = array.concat().sort();\n  var seen;\n  for (var i = 0, len = sortedArray.length; i < len; i++) {\n    // 如果是第一个元素或者相邻的元素不相同\n    if (!i || seen !== sortedArray[i]) {\n      res.push(sortedArray[i]);\n    }\n    seen = sortedArray[i];\n  }\n  return res;\n}\n\nvar array = [1, 2, 1, 1, &quot;1&quot;];\n\nfunction unique(array) {\n  var res = array.filter(function (item, index, array) {\n    return array.indexOf(item) === index;\n  });\n  return res;\n}\n\nconsole.log(unique(array));\n\nvar array = [1, 2, 1, 1, &quot;1&quot;];\n\nfunction unique(array) {\n  return array\n    .concat()\n    .sort()\n    .filter(function (item, index, array) {\n      return !index || item !== array[index - 1];\n    });\n}\n\nconsole.log(unique(array));\n\nvar unique = (a) => [...new Set(a)];\n\n// 可以用来判断是函数还是数组\nfunction type(obj) {\n  // type 函数\n  var class2type = {};\n\n  // 生成 class2type 映射\n  &quot;Boolean Number String Function Array Date RegExp Object Error&quot;\n    .split(&quot; &quot;)\n    .map(function (item, index) {\n      class2type[&quot;[object &quot; + item + &quot;]&quot;] = item.toLowerCase();\n    });\n  // 一箭双雕，针对 ie6\n  // 在 IE6 中，null 和 undefined 会被 Object.prototype.toString 识别成 [object Object]\n  if (obj == null) {\n    return obj + &quot;&quot;;\n  }\n  return typeof obj === &quot;object&quot; || typeof obj === &quot;function&quot;\n    ? class2type[Object.prototype.toString.call(obj)] || &quot;object&quot;\n    : typeof obj;\n}\n\n// 通过 ”{}” 或 “new Object” 创建的，区别于 null，数组，宿主对象（documents）\nfunction isPlainObject(obj) {\n  // 上节中写 type 函数时，用来存放 toString 映射结果的对象\n  var class2type = {};\n\n  // 相当于 Object.prototype.toString\n  var toString = class2type.toString;\n\n  // 相当于 Object.prototype.hasOwnProperty\n  var hasOwn = class2type.hasOwnProperty;\n\n  var proto, Ctor;\n\n  // 排除掉明显不是 obj 的以及一些宿主对象如 Window\n  if (!obj || toString.call(obj) !== &quot;[object Object]&quot;) {\n    return false;\n  }\n\n  /**\n   * getPrototypeOf es5 方法，获取 obj 的原型\n   * 以 new Object 创建的对象为例的话\n   * obj.__proto__ === Object.prototype\n   */\n  proto = Object.getPrototypeOf(obj);\n\n  // 没有原型的对象是纯粹的，Object.create(null) 就在这里返回 true\n  if (!proto) {\n    return true;\n  }\n\n  /**\n   * 以下判断通过 new Object 方式创建的对象\n   * 判断 proto 是否有 constructor 属性，如果有就让 Ctor 的值为 proto.constructor\n   * 如果是 Object 函数创建的对象，Ctor 在这里就等于 Object 构造函数\n   */\n  Ctor = hasOwn.call(proto, &quot;constructor&quot;) && proto.constructor;\n\n  // 在这里判断 Ctor 构造函数是不是 Object 构造函数\n  // 用于区分自定义构造函数和 Object 构造函数，比较函数源代码字符串\n  return (\n    typeof Ctor === &quot;function&quot; &&\n    hasOwn.toString.call(Ctor) === hasOwn.toString.call(Object)\n  );\n}\n\nfunction isEmptyObject(obj) {\n  var name;\n\n  for (name in obj) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isWindow(obj) {\n  return obj != null && obj === obj.window;\n}\n\nfunction isArrayLike(obj) {\n  // obj 必须有 length 属性\n  var length = !!obj && &quot;length&quot; in obj && obj.length;\n  var typeRes = type(obj);\n\n  // 排除掉函数和 Window 对象\n  if (typeRes === &quot;function&quot; || isWindow(obj)) {\n    return false;\n  }\n\n  return (\n    typeRes === &quot;array&quot; ||\n    length === 0 ||\n    (typeof length === &quot;number&quot; && length > 0 && length - 1 in obj)\n  );\n}\n\n// 判断是不是 DOM 元素\nfunction isElement(obj) {\n  return !!(obj && obj.nodeType === 1);\n}\n\n// 数组浅拷贝使用 concat, slice，深拷贝使用 JSON.parse(JSON.stringify([]))\n// 浅拷贝\nfunction shallowCopy(obj) {\n  if (typeof obj !== &quot;object&quot;) {\n    return;\n  }\n  var newObj = obj instanceof Array ? [] : {};\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      newObj[key] = obj[key];\n    }\n  }\n  return newObj;\n}\n\n// 深拷贝\nfunction deepCopy(obj) {\n  if (typeof obj !== &quot;object&quot;) {\n    return;\n  }\n  var newObj = obj instanceof Array ? [] : {};\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      newObj[key] =\n        typeof obj[key] === &quot;object&quot; ? deepCopy(obj[key]) : obj[key];\n    }\n  }\n  return newObj;\n}\n\nvar arr = [6, 4, 1, 8, 2, 11, 23];\nvar max = eval(&quot;Math.max(&quot; + arr + &quot;)&quot;);\nconsole.log(max);\n\nvar arr = [6, 4, 1, 8, 2, 11, 23];\nconsole.log(Math.max.apply(null, arr));\n\nvar arr = [6, 4, 1, 8, 2, 11, 23];\nconsole.log(Math.max(...arr));\n\n// 数组扁平化\nvar arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n  var result = [];\n  for (var i = 0, len = arr.length; i < len; i++) {\n    if (Array.isArray(arr[i])) {\n      result = result.concat(flatten(arr[i]));\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nconsole.log(flatten(arr));\n\nvar arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n  return arr.reduce(function (prev, next) {\n    return prev.concat(Array.isArray(next) ? flatten(next) : next);\n  }, []);\n}\nconsole.log(flatten(arr));\n\nvar arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n  while (arr.some((item) => Array.isArray(item))) {\n    // 只能扁平一层，需要多次扁平\n    arr = [].concat(...arr);\n  }\n  return arr;\n}\nconsole.log(flatten(arr));\n\n/**\n * 数组扁平化\n * @param  {Array} input   要处理的数组\n * @param  {boolean} shallow 是否只扁平一层\n * @param  {boolean} strict  是否严格处理元素，下面有解释，为 true 的话就是过滤掉数组元素\n * @param  {Array} output  这是为了方便递归而传递的参数\n * 源码地址：https://github.com/jashkenas/underscore/blob/master/underscore.js#L528\n */\nfunction flatten(input, shallow, strict, output) {\n  // 递归使用的时候会用到output\n  output = output || [];\n  var idx = output.length;\n\n  for (var i = 0, len = input.length; i < len; i++) {\n    var value = input[i];\n    // 如果是数组，就进行处理\n    if (Array.isArray(value)) {\n      // 如果是只扁平一层，遍历该数组，依此填入 output\n      if (shallow) {\n        var j = 0,\n          length = value.length;\n        while (j < length) output[idx++] = value[j++];\n      }\n      // 如果是全部扁平就递归，传入已经处理的 output，递归中接着处理 output\n      else {\n        flatten(value, shallow, strict, output);\n        idx = output.length;\n      }\n    }\n    // 不是数组，根据 strict 的值判断是跳过不处理还是放入 output\n    else if (!strict) {\n      output[idx++] = value;\n    }\n  }\n\n  return output;\n}\n\n// 偏函数\nvar partial = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function () {\n    var newArgs = args.concat(Array.prototype.slice.call(arguments));\n    return fn.apply(this, newArgs);\n  }\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n\nvar addCurry = partial(add, 1, 2);\naddCurry() // 3\n//或者\nvar addCurry = partial(add, 1);\naddCurry(2) // 3\n//或者\nvar addCurry = partial(add);\naddCurry(1, 2) // 3\n\n// 柯里化\nfunction curry(fn, args) {\n  var length = fn.length;\n  args = args || [];\n  return function () {\n    var newArgs = args.slice().concat(Array.prototype.slice.call(arguments));\n    if (newArgs.length < length) {\n      return curry.call(this, fn, newArgs);\n    } else {\n      return fn.apply(this, newArgs);\n    }\n  }\n}\n\nvar fn = curry(function(a, b, c) {\n  return [a, b, c];\n});\n\n// fn(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n// fn(&quot;a&quot;, &quot;b&quot;)(&quot;c&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n// fn(&quot;a&quot;)(&quot;b&quot;)(&quot;c&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\nfn(&quot;a&quot;)(&quot;b&quot;, &quot;c&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n\n// 惰性函数\nfunction addEvent(type, el, fn) {\n  if (window.addEventListener) {\n      addEvent = function(type, el, fn) {\n          el.addEventListener(type, fn, false);\n      }\n  }\n  else if (window.attachEvent) {\n      addEvent = function(type, el, fn) {\n          el.attachEvent(\'on\' + type, fn);\n      }\n  }\n}\n\n// 惰性函数闭包形式\nvar addEvent = (function(){\n  if (window.addEventListener) {\n      return function (type, el, fn) {\n          el.addEventListener(type, fn, false);\n      }\n  }\n  else if(window.attachEvent){\n      return function (type, el, fn) {\n          el.attachEvent(\'on\' + type, fn);\n      }\n  }\n})();\n\nvar toUpperCase = function(x) { return x.toUpperCase(); };\nvar hello = function(x) { return \'HELLO, \' + x; };\n\n// 组合\nfunction compose() {\n  var args = arguments;\n  var start = args.length - 1;\n  return function() {\n    var i = start;\n    var result = args[i].apply(this, arguments);\n    while(i--) {\n      result = args[i].call(this, result);\n    }\n    return result;\n  }\n}\n\nvar greet = compose(hello, toUpperCase);\ngreet(\'kevin\');\n\n// 管道\nfunction pipe() {\n  var args = arguments;\n  return function() {\n    var i = 0;\n    var result = args[i].apply(this, arguments);\n    i++;\n    while(i < args.length) {\n      result = args[i].call(this, result);\n      i++;\n    }\n    return result;\n  }\n}\n\nvar greet = pipe(toUpperCase, hello);\ngreet(\'kevin\');\n\n\nvar add = function(a, b, c) {\n  return a + b + c\n}\n\n// 函数记忆，第二版 (来自 underscore 的实现)\nvar memoize = function(func, hasher) {\n  var memoize = function(key) {\n    var cache = memoize.cache;\n    var address = \'\' + (hasher ? hasher.apply(this, arguments) : key);\n    if (!cache[address]) {\n      cache[address] = func.apply(this, arguments);\n    }\n    return cache[address];\n  }\n  memoize.cache = {};\n  return memoize;\n};\n\nvar memoizedAdd = memoize(add, function(){\n  var args = Array.prototype.slice.call(arguments)\n  return JSON.stringify(args)\n})\n\nconsole.log(memoizedAdd(1, 2, 3)) // 6\nconsole.log(memoizedAdd(1, 2, 4)) // 7\n\n// Promise 实现原理\nfunction Promise2(fn) {\n  // Promise resolve 时的回调函数集\n  this.cbs = [];\n\n  // 传递给 Promise 处理函数的 resolve\n  // 这里直接往实例上挂个 data\n  // 然后把 onResolvedCallback 数组里的函数依次执行一遍就可以\n  const resolve = (value) => {\n    // 注意 promise 的 then 函数需要异步执行\n    setTimeout(() => {\n      this.data = value;\n      this.cbs.forEach((cb) => cb(value));\n    })\n  };\n\n  // 执行用户传入的函数\n  // 并且把 resolve 方法交给用户执行\n  fn(resolve);\n}\n\nPromise2.prototype.then = function(onResolved) {\n  // 这里叫做 promise2\n  return new Promise2((resolve) => {\n    // 这里的 this 其实是 promise1\n    this.cbs.push(() => {\n      const result = onResolved(this.data);\n      if (result instanceof Promise2) {\n        // resolve 的权力被交给了 promise\n        result.then(resolve);\n      } else {\n        // 如果是普通值就直接 resolve\n        // 依次执行 cbs 里的函数，并且把值传递给 cbs\n        resolve(result);\n      }\n    })\n  });\n}\n\nnew Promise2((resolve) => {\n  setTimeout(() => {\n    resolve(1);\n  }, 500);\n})\n// then1\n.then((res) => {\n  console.log(res);\n  // promise1\n  return new Promise2((resolve) => {\n    setTimeout(() => {\n      // resolve2\n      resolve(2);\n    }, 500);\n  });\n})\n// then2\n.then(console.log);\n\n// Promise 标准\n// 1. 只有一个 then 方法，没有 catch，race，all 等方法，甚至没有构造函数\n// 2. then 方法返回一个新的 Promise\n// 3. 不同 Promise 的实现需要可以相互调用(interoperable)\n// 4. Promise 的初始状态为 pending\n//    它可以由此状态转换为 fulfilled（本文为了一致把此状态叫做 resolved）或者 rejected\n//    一旦状态确定，就不可以再次转换为其它状态，状态确定的过程称为 settle\n\n// redux 高阶函数\nfunction compose(...funcs) {\n  return funcs.reduce((a, b) => (...args) => a(b(...args)));\n}\n\nfunction createStore(reducer, middlewares) {\n  let currentState;\n\n  function dispatch(action) {\n    currentState = reducer(currentState, action);\n  }\n\n  function getState() {\n    return currentState;\n  }\n\n  // 初始化一个随意的 dispatch，要求外部在 type 匹配不到的时候返回初始状态\n  // 在这个 dispatch 后 currentState 就有值了。\n  dispatch({\n    type: &quot;INIT&quot;\n  });\n\n  let enhancedDispatch = dispatch;\n  // 如果第二个参数传入了 middlewares\n  if (middlewares) {\n    // 用 compose 把 middlewares 包装成一个函数\n    enhancedDispatch = compose(...middlewares)(dispatch);\n  }\n\n  return {\n    dispatch: enhancedDispatch,\n    getState\n  };\n}\n\n// 使用\nconst otherDummyMiddleware = dispatch => {\n  // 返回一个新的 dispatch\n  return action => {\n    console.log(\\`type in dummy is \\${type}\\`);\n    return dispatch(action);\n  };\n};\n\n// 这个 dispatch 其实是 otherDummyMiddleware 执行后返回 otherDummyDispatch\nconst typeLogMiddleware = dispatch => {\n  // 返回一个新的 dispatch\n  return ({ type, ...args }) => {\n    console.log(\\`type is \\${type}\\`);\n    return dispatch({ type, ...args });\n  };\n};\n\n// 中间件从右往左执行，相当于 typeLogMiddleware(otherDummyMiddleware(dispatch))\nconst counterStore = createStore(counterReducer, [\n  typeLogMiddleware,\n  otherDummyMiddleware\n]);\n\nconsole.log(counterStore.getState().count);\ncounterStore.dispatch({ type: &quot;add&quot;, payload: 2 });\nconsole.log(counterStore.getState().count);\n// 输出：\n// 0\n// type is add\n// type in dummy is add\n// 2\n\n// koa\nclass Koa {\n  constructor() {\n    this.middlewares = [];\n  }\n  use(middleware) {\n    this.middlewares.push(middleware);\n  }\n  start({ req }) {\n    function composeMiddlewares(middlewares) {\n      return function wrapMiddlewares(ctx) {\n        // 记录当前运行的 middleware 的下标\n        let index = -1;\n        function dispatch(i) {\n          // index 向后移动\n          index = i;\n\n          // 找出数组中存放的相应的中间件\n          const fn = middlewares[i];\n\n          // 最后一个中间件调用 next 也不会报错\n          if (!fn) {\n            return Promise.resolve();\n          }\n\n          return Promise.resolve(\n            fn(\n              // 继续传递 ctx\n              ctx,\n              // next 方法，允许进入下一个中间件。\n              () => dispatch(i + 1)\n            )\n          );\n        }\n        // 开始运行第一个中间件\n        return dispatch(0);\n      };\n    }\n    const composed = composeMiddlewares(this.middlewares);\n    const ctx = { req, res: undefined };\n    return composed(ctx);\n  }\n}\n\n// 最外层：管控全局错误\napp.use(async (ctx, next) => {\n  try {\n    // 这里的 next 包含了第二层以及第三层的运行\n    await next();\n  } catch (error) {\n    console.log(\\`[koa error]: \\${error.message}\\`);\n  }\n});\n\n// 第二层：日志中间件\napp.use(async (ctx, next) => {\n  const { req } = ctx;\n  console.log(\\`req is \\${JSON.stringify(req)}\\`);\n  await next();\n  // next 过后已经能拿到第三层写进 ctx 的数据了\n  console.log(\\`res is \\${JSON.stringify(ctx.res)}\\`);\n});\n\n// 第三层：核心服务中间件\n// 在真实场景中，这一层一般用来构造真正需要返回的数据，写入ctx中\napp.use(async (ctx, next) => {\n  const { req } = ctx;\n  console.log(\\`calculating the res of \\${req}...\\`);\n  const res = {\n    code: 200,\n    result: \\`req \\${req} success\\`\n  };\n  // 写入ctx\n  ctx.res = res;\n  await next();\n});\n\napp.start({ req: &quot;ssh&quot; });\n\n// req is &quot;ssh&quot;\n// calculating the res of ssh...\n// res is {&quot;code&quot;:200,&quot;result&quot;:&quot;req ssh success&quot;}`, `23976013941743000000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// immediate 前置执行</span>\n<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> result<span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">debounced</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> callNow <span class="token operator">=</span> <span class="token operator">!</span>timeout<span class="token punctuation">;</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  debounced<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> debounced<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> prev <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      prev <span class="token operator">=</span> now<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> timeout<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 有头有尾都触发</span>\n<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">throttled</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> remain <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> prev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>remain <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remain <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      prev <span class="token operator">=</span> now<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> remain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> throttled<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 排序后去重</span>\n<span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> sortedArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> seen<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> sortedArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果是第一个元素或者相邻的元素不相同</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i <span class="token operator">||</span> seen <span class="token operator">!==</span> sortedArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sortedArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    seen <span class="token operator">=</span> sortedArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> array\n    <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token operator">!</span>index <span class="token operator">||</span> item <span class="token operator">!==</span> array<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">unique</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>new <span class="token class-name">Set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 可以用来判断是函数还是数组</span>\n<span class="token keyword">function</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// type 函数</span>\n  <span class="token keyword">var</span> class2type <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 生成 class2type 映射</span>\n  <span class="token string">"Boolean Number String Function Array Date RegExp Object Error"</span>\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      class2type<span class="token punctuation">[</span><span class="token string">"[object "</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 一箭双雕，针对 ie6</span>\n  <span class="token comment">// 在 IE6 中，null 和 undefined 会被 Object.prototype.toString 识别成 [object Object]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> obj <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">"function"</span>\n    <span class="token operator">?</span> class2type<span class="token punctuation">[</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">"object"</span>\n    <span class="token punctuation">:</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 通过 ”{}” 或 “new Object” 创建的，区别于 null，数组，宿主对象（documents）</span>\n<span class="token keyword">function</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 上节中写 type 函数时，用来存放 toString 映射结果的对象</span>\n  <span class="token keyword">var</span> class2type <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 相当于 Object.prototype.toString</span>\n  <span class="token keyword">var</span> toString <span class="token operator">=</span> class2type<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>\n\n  <span class="token comment">// 相当于 Object.prototype.hasOwnProperty</span>\n  <span class="token keyword">var</span> hasOwn <span class="token operator">=</span> class2type<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> proto<span class="token punctuation">,</span> Ctor<span class="token punctuation">;</span>\n\n  <span class="token comment">// 排除掉明显不是 obj 的以及一些宿主对象如 Window</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"[object Object]"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/**\n   * getPrototypeOf es5 方法，获取 obj 的原型\n   * 以 new Object 创建的对象为例的话\n   * obj.__proto__ === Object.prototype\n   */</span>\n  proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 没有原型的对象是纯粹的，Object.create(null) 就在这里返回 true</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>proto<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/**\n   * 以下判断通过 new Object 方式创建的对象\n   * 判断 proto 是否有 constructor 属性，如果有就让 Ctor 的值为 proto.constructor\n   * 如果是 Object 函数创建的对象，Ctor 在这里就等于 Object 构造函数\n   */</span>\n  Ctor <span class="token operator">=</span> <span class="token function">hasOwn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> <span class="token string">"constructor"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> proto<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>\n\n  <span class="token comment">// 在这里判断 Ctor 构造函数是不是 Object 构造函数</span>\n  <span class="token comment">// 用于区分自定义构造函数和 Object 构造函数，比较函数源代码字符串</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> Ctor <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span>\n    hasOwn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span> <span class="token operator">===</span> hasOwn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isEmptyObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> name<span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isWindow</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> obj <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">===</span> obj<span class="token punctuation">.</span>window<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isArrayLike</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// obj 必须有 length 属性</span>\n  <span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>obj <span class="token operator">&amp;&amp;</span> <span class="token string">"length"</span> <span class="token keyword">in</span> obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> typeRes <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 排除掉函数和 Window 对象</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>typeRes <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">||</span> <span class="token function">isWindow</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    typeRes <span class="token operator">===</span> <span class="token string">"array"</span> <span class="token operator">||</span>\n    length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span>\n    <span class="token punctuation">(</span><span class="token keyword">typeof</span> length <span class="token operator">===</span> <span class="token string">"number"</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 判断是不是 DOM 元素</span>\n<span class="token keyword">function</span> <span class="token function">isElement</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 数组浅拷贝使用 concat, slice，深拷贝使用 JSON.parse(JSON.stringify([]))</span>\n<span class="token comment">// 浅拷贝</span>\n<span class="token keyword">function</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> newObj <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 深拷贝</span>\n<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> newObj <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span>\n        <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">?</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"Math.max("</span> <span class="token operator">+</span> arr <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 数组扁平化</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">:</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 只能扁平一层，需要多次扁平</span>\n    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * 数组扁平化\n * @param  {Array} input   要处理的数组\n * @param  {boolean} shallow 是否只扁平一层\n * @param  {boolean} strict  是否严格处理元素，下面有解释，为 true 的话就是过滤掉数组元素\n * @param  {Array} output  这是为了方便递归而传递的参数\n * 源码地址：https://github.com/jashkenas/underscore/blob/master/underscore.js#L528\n */</span>\n<span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">,</span> shallow<span class="token punctuation">,</span> strict<span class="token punctuation">,</span> output</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 递归使用的时候会用到output</span>\n  output <span class="token operator">=</span> output <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> idx <span class="token operator">=</span> output<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> value <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 如果是数组，就进行处理</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果是只扁平一层，遍历该数组，依此填入 output</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>shallow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n          length <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> output<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 如果是全部扁平就递归，传入已经处理的 output，递归中接着处理 output</span>\n      <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">flatten</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> shallow<span class="token punctuation">,</span> strict<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        idx <span class="token operator">=</span> output<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 不是数组，根据 strict 的值判断是跳过不处理还是放入 output</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strict<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      output<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> output<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 偏函数</span>\n<span class="token keyword">var</span> <span class="token function-variable function">partial</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> newArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> addCurry <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">addCurry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n<span class="token comment">//或者</span>\n<span class="token keyword">var</span> addCurry <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">addCurry</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n<span class="token comment">//或者</span>\n<span class="token keyword">var</span> addCurry <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">addCurry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n\n<span class="token comment">// 柯里化</span>\n<span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> length <span class="token operator">=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  args <span class="token operator">=</span> args <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> newArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>newArgs<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> newArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// fn("a", "b", "c") // ["a", "b", "c"]</span>\n<span class="token comment">// fn("a", "b")("c") // ["a", "b", "c"]</span>\n<span class="token comment">// fn("a")("b")("c") // ["a", "b", "c"]</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span> <span class="token comment">// ["a", "b", "c"]</span>\n\n<span class="token comment">// 惰性函数</span>\n<span class="token keyword">function</span> <span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> el<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">addEvent</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> el<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">addEvent</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> el<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          el<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">\'on\'</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 惰性函数闭包形式</span>\n<span class="token keyword">var</span> addEvent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> el<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> el<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          el<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">\'on\'</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">toUpperCase</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">\'HELLO, \'</span> <span class="token operator">+</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 组合</span>\n<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> start <span class="token operator">=</span> args<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> result <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> greet <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>hello<span class="token punctuation">,</span> toUpperCase<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">\'kevin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 管道</span>\n<span class="token keyword">function</span> <span class="token function">pipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> result <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    i<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      i<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> greet <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>toUpperCase<span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">\'kevin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 函数记忆，第二版 (来自 underscore 的实现)</span>\n<span class="token keyword">var</span> <span class="token function-variable function">memoize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> hasher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">memoize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> cache <span class="token operator">=</span> memoize<span class="token punctuation">.</span>cache<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> address <span class="token operator">=</span> <span class="token string">\'\'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>hasher <span class="token operator">?</span> <span class="token function">hasher</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">[</span>address<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      cache<span class="token punctuation">[</span>address<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>address<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  memoize<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> memoize<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> memoizedAdd <span class="token operator">=</span> <span class="token function">memoize</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 7</span>\n\n<span class="token comment">// Promise 实现原理</span>\n<span class="token keyword">function</span> <span class="token function">Promise2</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Promise resolve 时的回调函数集</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>cbs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 传递给 Promise 处理函数的 resolve</span>\n  <span class="token comment">// 这里直接往实例上挂个 data</span>\n  <span class="token comment">// 然后把 onResolvedCallback 数组里的函数依次执行一遍就可以</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 注意 promise 的 then 函数需要异步执行</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>cbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 执行用户传入的函数</span>\n  <span class="token comment">// 并且把 resolve 方法交给用户执行</span>\n  <span class="token function">fn</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Promise2</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onResolved</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这里叫做 promise2</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这里的 this 其实是 promise1</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>cbs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Promise2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// resolve 的权力被交给了 promise</span>\n        result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 如果是普通值就直接 resolve</span>\n        <span class="token comment">// 依次执行 cbs 里的函数，并且把值传递给 cbs</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Promise2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// then1</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// promise1</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// resolve2</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// then2</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Promise 标准</span>\n<span class="token comment">// 1. 只有一个 then 方法，没有 catch，race，all 等方法，甚至没有构造函数</span>\n<span class="token comment">// 2. then 方法返回一个新的 Promise</span>\n<span class="token comment">// 3. 不同 Promise 的实现需要可以相互调用(interoperable)</span>\n<span class="token comment">// 4. Promise 的初始状态为 pending</span>\n<span class="token comment">//    它可以由此状态转换为 fulfilled（本文为了一致把此状态叫做 resolved）或者 rejected</span>\n<span class="token comment">//    一旦状态确定，就不可以再次转换为其它状态，状态确定的过程称为 settle</span>\n\n<span class="token comment">// redux 高阶函数</span>\n<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>funcs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> funcs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> middlewares</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> currentState<span class="token punctuation">;</span>\n\n  <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    currentState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> currentState<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 初始化一个随意的 dispatch，要求外部在 type 匹配不到的时候返回初始状态</span>\n  <span class="token comment">// 在这个 dispatch 后 currentState 就有值了。</span>\n  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">"INIT"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> enhancedDispatch <span class="token operator">=</span> dispatch<span class="token punctuation">;</span>\n  <span class="token comment">// 如果第二个参数传入了 middlewares</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>middlewares<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 用 compose 把 middlewares 包装成一个函数</span>\n    enhancedDispatch <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token operator">...</span>middlewares<span class="token punctuation">)</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    dispatch<span class="token punctuation">:</span> enhancedDispatch<span class="token punctuation">,</span>\n    getState\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用</span>\n<span class="token keyword">const</span> <span class="token function-variable function">otherDummyMiddleware</span> <span class="token operator">=</span> <span class="token parameter">dispatch</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 返回一个新的 dispatch</span>\n  <span class="token keyword">return</span> <span class="token parameter">action</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">type in dummy is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 这个 dispatch 其实是 otherDummyMiddleware 执行后返回 otherDummyDispatch</span>\n<span class="token keyword">const</span> <span class="token function-variable function">typeLogMiddleware</span> <span class="token operator">=</span> <span class="token parameter">dispatch</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 返回一个新的 dispatch</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> type<span class="token punctuation">,</span> <span class="token operator">...</span>args <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">type is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">,</span> <span class="token operator">...</span>args <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 中间件从右往左执行，相当于 typeLogMiddleware(otherDummyMiddleware(dispatch))</span>\n<span class="token keyword">const</span> counterStore <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>counterReducer<span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  typeLogMiddleware<span class="token punctuation">,</span>\n  otherDummyMiddleware\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counterStore<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\ncounterStore<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"add"</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counterStore<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 输出：</span>\n<span class="token comment">// 0</span>\n<span class="token comment">// type is add</span>\n<span class="token comment">// type in dummy is add</span>\n<span class="token comment">// 2</span>\n\n<span class="token comment">// koa</span>\n<span class="token keyword">class</span> <span class="token class-name">Koa</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>middlewares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">middleware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>middlewares<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>middleware<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">start</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> req <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token function">composeMiddlewares</span><span class="token punctuation">(</span><span class="token parameter">middlewares</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">wrapMiddlewares</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 记录当前运行的 middleware 的下标</span>\n        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// index 向后移动</span>\n          index <span class="token operator">=</span> i<span class="token punctuation">;</span>\n\n          <span class="token comment">// 找出数组中存放的相应的中间件</span>\n          <span class="token keyword">const</span> fn <span class="token operator">=</span> middlewares<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n          <span class="token comment">// 最后一个中间件调用 next 也不会报错</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n\n          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>\n            <span class="token function">fn</span><span class="token punctuation">(</span>\n              <span class="token comment">// 继续传递 ctx</span>\n              ctx<span class="token punctuation">,</span>\n              <span class="token comment">// next 方法，允许进入下一个中间件。</span>\n              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n            <span class="token punctuation">)</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 开始运行第一个中间件</span>\n        <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> composed <span class="token operator">=</span> <span class="token function">composeMiddlewares</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>middlewares<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token punctuation">{</span> req<span class="token punctuation">,</span> res<span class="token punctuation">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">composed</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 最外层：管控全局错误</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这里的 next 包含了第二层以及第三层的运行</span>\n    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[koa error]: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 第二层：日志中间件</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> req <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">req is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// next 过后已经能拿到第三层写进 ctx 的数据了</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">res is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>res<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 第三层：核心服务中间件</span>\n<span class="token comment">// 在真实场景中，这一层一般用来构造真正需要返回的数据，写入ctx中</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> req <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">calculating the res of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span>\n    code<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    result<span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">req </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> success</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 写入ctx</span>\n  ctx<span class="token punctuation">.</span>res <span class="token operator">=</span> res<span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">{</span> req<span class="token punctuation">:</span> <span class="token string">"ssh"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// req is "ssh"</span>\n<span class="token comment">// calculating the res of ssh...</span>\n<span class="token comment">// res is {"code":200,"result":"req ssh success"}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>',
id:"/home/runner/work/GatsbyBlog/GatsbyBlog/blog/JS面试手写源码/index.md absPath of file >>> MarkdownRemark",timeToRead:11,frontmatter:{date:"2021-08-02 13:38:39",path:"/js-interview-source-code/",tags:"前端, JS, 面试",title:"JS面试手写源码",draft:!0}},{excerpt:"联通产业交互 this 写出执行结果 作用域 异步 闭包 文远知行 一面 51Nod 加农炮 一个长度为 M 的正整数数组 A，表示从左向右的地形高度。测试一种加农炮，炮弹平行于地面从左向右飞行，高度为 H，如果某处地形的高度大于等于炮弹飞行的高度 H（ ），炮弹会被挡住并落在 i - 1 处，则  。如果 H <=  ，则这个炮弹无效，如果 H > 所有的  ，这个炮弹也无效。现在给定 N 个整数的数组 B 代表炮弹高度，计算出最后地形的样子。例如：地形高度 A = {1, 2, 0,…",html:'<h1 id="联通产业交互"><a href="#%E8%81%94%E9%80%9A%E4%BA%A7%E4%B8%9A%E4%BA%A4%E4%BA%92" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>联通产业交互</h1>\n<h2 id="this"><a href="#this" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>this</h2>\n<p>写出执行结果</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="58202204388043130000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`(function() {\n  var obj = {\n    fun1: () => {\n      console.log(this);\n    },\n    fun2: function() {\n      console.log(this);\n    },\n    fun3() {\n      console.log(this);\n    }\n  };\n\n  obj.fun1();\n  obj.fun2();\n  obj.fun3();\n})();`, `58202204388043130000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">fun1</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fun2</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  obj<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  obj<span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  obj<span class="token punctuation">.</span><span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="45133902603743410000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`window; // 箭头函数的 this 根据外层作用域绑定\nobj; // 隐式绑定，this 指向对象\nobj; // 同上，不同写法而已`, `45133902603743410000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">window<span class="token punctuation">;</span> <span class="token comment">// 箭头函数的 this 根据外层作用域绑定</span>\nobj<span class="token punctuation">;</span> <span class="token comment">// 隐式绑定，this 指向对象</span>\nobj<span class="token punctuation">;</span> <span class="token comment">// 同上，不同写法而已</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h2 id="作用域"><a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>作用域</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="55493345717826760000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`(function() {\n  var a = \'\';\n  console.log(a);\n  console.log(b);\n  {\n    var b = (a = \'123\');\n    let c = b;\n  }\n  console.log(c);\n})();`, `55493345717826760000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token string">\'123\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="31924029770358886000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`\'\';\nundefined;\nReferenceError;`, `31924029770358886000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token string">\'\'</span><span class="token punctuation">;</span>\n<span class="token keyword">undefined</span><span class="token punctuation">;</span>\nReferenceError<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h2 id="异步"><a href="#%E5%BC%82%E6%AD%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>异步</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="10323624457831481000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`async function async1() {\n  console.log(\'1\');\n  await async2();\n  console.log(\'2\');\n}\nasync function async2() {\n  console.log(\'3\');\n}\nconsole.log(\'4\');\nsetTimeout(function() {\n  console.log(\'5\');\n}, 0);\nasync1();\nnew Promise(function(resolve) {\n  console.log(\'6\');\n  resolve();\n}).then(function() {\n  console.log(\'7\');\n});\nconsole.log(\'8\');`, `10323624457831481000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'2\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'3\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'4\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'5\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'6\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'7\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'8\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="54294386589241770000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`4;\n1;\n3;\n6;\n8;\n2;\n7;\n5;`, `54294386589241770000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token number">6</span><span class="token punctuation">;</span>\n<span class="token number">8</span><span class="token punctuation">;</span>\n<span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token number">7</span><span class="token punctuation">;</span>\n<span class="token number">5</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="闭包"><a href="#%E9%97%AD%E5%8C%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>闭包</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="45929574912303380000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`var count = 10;\nfunction add() {\n  var count = 0;\n  return function() {\n    count += 1;\n    console.log(count);\n  };\n}\nvar s = add();\ns();\ns();`, `45929574912303380000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15116200000470714000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`1;\n2;`, `15116200000470714000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token number">2</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<h1 id="文远知行"><a href="#%E6%96%87%E8%BF%9C%E7%9F%A5%E8%A1%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>文远知行</h1>\n<h2 id="一面"><a href="#%E4%B8%80%E9%9D%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一面</h2>\n<h3 id="51nod-加农炮"><a href="#51nod-%E5%8A%A0%E5%86%9C%E7%82%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>51Nod 加农炮</h3>\n<p>一个长度为 M 的正整数数组 A，表示从左向右的地形高度。测试一种加农炮，炮弹平行于地面从左向右飞行，高度为 H，如果某处地形的高度大于等于炮弹飞行的高度 H（<code class="language-text">A[i] &gt;= H</code>），炮弹会被挡住并落在 i - 1 处，则 <code class="language-text">A[i - 1] + 1</code>。如果 H &#x3C;= <code class="language-text">A[0]</code>，则这个炮弹无效，如果 H > 所有的 <code class="language-text">A[i]</code>，这个炮弹也无效。现在给定 N 个整数的数组 B 代表炮弹高度，计算出最后地形的样子。例如：地形高度 A = {1, 2, 0, 4, 3, 2, 1, 5, 7}, 炮弹高度 B = {2, 8, 0, 7, 6, 5, 3, 4, 5, 6, 5}，最终得到的地形高度为：{2, 2, 2, 4, 3, 3, 5, 6, 7}。</p>\n<p>Input</p>\n<p>第 1 行：2 个数 M, N 中间用空格分隔，分别为数组 A 和 B 的长度(1 &#x3C;= m, n &#x3C;= 50000) 第 2 至 M + 1 行：每行 1 个数，表示对应的地形高度(0 &#x3C;= <code class="language-text">A[i]</code> &#x3C;= 1000000)。第 M + 2 至 N + M + 1 行，每行 1 个数，表示炮弹的高度(0 &#x3C;= <code class="language-text">B[i]</code> &#x3C;= 1000000)。</p>\n<p>Output</p>\n<p>输出共 M 行，每行一个数，对应最终的地形高度。</p>\n<p>Input 示例</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="31852336061594923000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`9 11\n1\n2\n0\n4\n3\n2\n1\n5\n7\n2\n8\n0\n7\n6\n5\n3\n4\n5\n6\n5`, `31852336061594923000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title=""\n              >\n                \n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">9 11\n1\n2\n0\n4\n3\n2\n1\n5\n7\n2\n8\n0\n7\n6\n5\n3\n4\n5\n6\n5</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Output 示例</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="75879639777954780000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`2\n2\n2\n4\n3\n3\n5\n6\n7`, `75879639777954780000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title=""\n              >\n                \n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">2\n2\n2\n4\n3\n3\n5\n6\n7</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="63035217820023910000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`scanf(&quot;%d%d&quot;,&n, &m);\nfor (int i=1; i<=n; i++) {\n  scanf(&quot;%d&quot;,&a[i]);\n}\nfor (int i=1; i<=m; i++) {\n  scanf(&quot;%d&quot;,&b[i])\n}\n\nfor (int i=1; i<=n; i++)\n{\n  for (int j=1; j<=m; j++)\n  {\n    if (b[j] >= a[i]) {\n      a[i-1] += 1;\n    }\n  }\n}\n\nfor (int i=1; i<=n; i++)\n  printf(&quot;%d &quot;, a[i]);`, `63035217820023910000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="cpp"\n              >\n                <span class="gatsby-code-button-language">cpp</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="a--b-mod-n"><a href="#a--b-mod-n" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>a ^ b mod n</h3>\n<p>Input: Positive integer a, b, n (0&#x3C;a,b,n&#x3C;10^9)</p>\n<p>Output: a^b mod n</p>\n<p>example: Input: 2 3 3</p>\n<p>Output 2</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="12007877290897517000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// a^b mod n = (a mod n)^b mod n\n// b 为偶数 a^b mod n = (a*a)^(b/2) mod n\n// b 为奇数 ((a*a)^(b/2)*a) mod n\nfunction mod(a, b, n) {\n  var result = 1;\n  a = a % n;\n  while (b) {\n    if (b % 2 === 1) {\n      result = (result * a) % n;\n    }\n    a = (a * a) % n;\n    b = b / 2;\n  }\n  return result;\n}`, `12007877290897517000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// a^b mod n = (a mod n)^b mod n</span>\n<span class="token comment">// b 为偶数 a^b mod n = (a*a)^(b/2) mod n</span>\n<span class="token comment">// b 为奇数 ((a*a)^(b/2)*a) mod n</span>\n<span class="token keyword">function</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  a <span class="token operator">=</span> a <span class="token operator">%</span> n<span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>\n    b <span class="token operator">=</span> b <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="第-i-个最小的数"><a href="#%E7%AC%AC-i-%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>第 i 个最小的数</h3>\n<p>Input:</p>\n<ol>\n<li>Positive integer n, means the length of the list. (0&#x3C;n&#x3C;10^7)</li>\n<li>n Positive integers of the list.</li>\n<li>Positive integer i.</li>\n</ol>\n<p>Output:</p>\n<p>the i-th smallest number of the list.</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="10006981158497696000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`var array = [4, 3, 2, 5];\nfindSmallest(array, 0, array.length - 1, 1);\n\nfunction findSmallest(array, low, high, i) {\n  var localLow = low;\n  var localHigh = high;\n\n  if (low >= high) {\n    return array[low];\n  }\n\n  var tmp = array[low];\n  while (low < high) {\n    while (high > low && array[high] >= tmp) {\n      high--;\n    }\n    array[low] = array[high];\n    while (low < high && array[low] <= tmp) {\n      low++;\n    }\n    array[high] = array[low];\n  }\n\n  array[low] = tmp;\n  // 要找的第几小的比\n  if (i <= low) {\n    return findSmallest(array, localLow, low, i);\n  } else {\n    return findSmallest(array, low + 1, localHigh, i);\n  }\n}`, `10006981158497696000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">findSmallest</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">findSmallest</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> localLow <span class="token operator">=</span> low<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> localHigh <span class="token operator">=</span> high<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">>=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">></span> low <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      high<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      low<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    array<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>\n  <span class="token comment">// 要找的第几小的比</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> low<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">findSmallest</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> localLow<span class="token punctuation">,</span> low<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">findSmallest</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> localHigh<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="二面"><a href="#%E4%BA%8C%E9%9D%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>二面</h2>\n<h3 id="全排列"><a href="#%E5%85%A8%E6%8E%92%E5%88%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>全排列</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="47952169281240530000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const a = [1, 2]\nconst b = [1, 2, 3]\nconst c = [1, 2, 3, 4]\n\ndescartes(a, b)\n\n// 输出\n[\n[1, 1],\n[1, 2],\n[1, 3],\n[2, 1],\n[2, 2],\n[2, 3],\n]\n\ndescartes(a, b, c)\n\n// 输出\n[\n[1, 1, 1],\n[1, 1, 2],\n[1, 1, 2],\n[1, 1, 3],\n[1, 2, 1],\n[1, 2, 2],\n[1, 2, 2],\n[1, 2, 3],\n]\n\n// 可能的调用方式\ndescartes(a, b)\ndescartes(a, b, c)\ndescartes(a, b, c, d)\ndescartes(a, b, c, d, e)`, `47952169281240530000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>\n\n<span class="token function">descartes</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n\n<span class="token comment">// 输出</span>\n<span class="token punctuation">[</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n\n<span class="token function">descartes</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n\n<span class="token comment">// 输出</span>\n<span class="token punctuation">[</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n\n<span class="token comment">// 可能的调用方式</span>\n<span class="token function">descartes</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token function">descartes</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n<span class="token function">descartes</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span>\n<span class="token function">descartes</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="33575945680110110000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`void backTrack(int n, int k) {\n  if (符合条件) {\n    输出；\n    return;\n  }\n  else {\n    执行代码;\n    backTrack(n, k + 1);\n    代码回溯;\n  }\n}`, `33575945680110110000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="cpp"\n              >\n                <span class="gatsby-code-button-language">cpp</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">backTrack</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>符合条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    输出；\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    执行代码<span class="token punctuation">;</span>\n    <span class="token function">backTrack</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    代码回溯<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>利用这个模式可以写出例如组合，全排列，子集，八皇后等问题。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="54220699262622580000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`public class Solution {\n  public List<List<String>> descartes(List<List<String>> dimValue) {\n    List<List<String>> res = new ArrayList<>();\n    if (dimValue == null || dimValue.size() == 0) {\n      return res;\n    }\n    backtrace(dimValue, 0, res, new ArrayList<>());\n    return res;\n  }\n\n  /**\n    * 递归回溯法求解\n    *\n    * @param dimValue 原始数据集合\n    * @param index 当前执行的集合索引\n    * @param result 结果集合\n    * @param curList 当前的单个结果集\n    */\n  private void backtrace(List<List<String>> dimValue, int index, List<List<String>> result, List<String> curList) {\n    if (curList.size() == dimValue.size()) {\n      result.add(new ArrayList<>(curList));\n    } else {\n      for (int j = 0; j < dimValue.get(index).size(); j++) {\n        curList.add(dimValue.get(index).get(j));\n        backtrace(dimValue, index + 1, result, curList);\n        curList.remove(curList.size() - 1);\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    List<String> list1 = new ArrayList<String>();\n    list1.add(&quot;a&quot;);\n    list1.add(&quot;b&quot;);\n    List<String> list2 = new ArrayList<String>();\n    list2.add(&quot;0&quot;);\n    list2.add(&quot;1&quot;);\n    list2.add(&quot;2&quot;);\n    List<List<String>> dimValue = new ArrayList<List<String>>();\n    dimValue.add(list1);\n    dimValue.add(list2);\n\n    // 递归实现笛卡尔积\n    Solution s = new Solution();\n    List<List<String>> res = s.descartes(dimValue);\n    System.out.println(&quot;递归实现笛卡尔乘积: 共 &quot; + res.size() + &quot; 个结果&quot;);\n    for (List<String> list : res) {\n      for (String string : list) {\n        System.out.print(string + &quot; &quot;);\n      }\n      System.out.println();\n    }\n  }\n}`, `54220699262622580000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="java"\n              >\n                <span class="gatsby-code-button-language">java</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="java"><pre style="counter-reset: linenumber NaN" class="language-java line-numbers"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">descartes</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> dimValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>dimValue <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> dimValue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">backtrace</span><span class="token punctuation">(</span>dimValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/**\n    * 递归回溯法求解\n    *\n    * @param dimValue 原始数据集合\n    * @param index 当前执行的集合索引\n    * @param result 结果集合\n    * @param curList 当前的单个结果集\n    */</span>\n  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> dimValue<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> curList<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>curList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> dimValue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>curList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> dimValue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        curList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dimValue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">backtrace</span><span class="token punctuation">(</span>dimValue<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> curList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        curList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>curList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> dimValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dimValue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dimValue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 递归实现笛卡尔积</span>\n    <span class="token class-name">Solution</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">descartes</span><span class="token punctuation">(</span>dimValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"递归实现笛卡尔乘积: 共 "</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 个结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">:</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>string <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="43737573678033100000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function f(arr, re, tp, k) {\n  if (tp.length === arr.length) {\n    re.push([...tp]);\n  } else {\n    for (let i = k; i < arr.length; i++) {\n      for (let j = 0; j < arr[i].length; j++) {\n        tp.push(arr[i][j]);\n        f(arr, re, tp, k + 1);\n        tp.pop();\n      }\n      tp.pop();\n    }\n  }\n}\n\nlet arr = [[1, 2], [3, 4, 5], [6]],\n  re = [],\n  tp = [];\n\nf(arr, re, tp, 0);\nconsole.log(re);\n//[ [1,3,6], [1,4,6], [1,5,6], [2,3,6], [2,4,6], [2,5,6]]`, `43737573678033100000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> re<span class="token punctuation">,</span> tp<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>tp<span class="token punctuation">.</span>length <span class="token operator">===</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    re<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>tp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        tp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> re<span class="token punctuation">,</span> tp<span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        tp<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      tp<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  tp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> re<span class="token punctuation">,</span> tp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//[ [1,3,6], [1,4,6], [1,5,6], [2,3,6], [2,4,6], [2,5,6]]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="67256753138912840000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`递归实现笛卡尔乘积: 共 6 个结果\na 0\na 1\na 2\nb 0\nb 1\nb 2`, `67256753138912840000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title=""\n              >\n                \n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">递归实现笛卡尔乘积: 共 6 个结果\na 0\na 1\na 2\nb 0\nb 1\nb 2</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="三面"><a href="#%E4%B8%89%E9%9D%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>三面</h2>\n<h3 id="比特币买卖"><a href="#%E6%AF%94%E7%89%B9%E5%B8%81%E4%B9%B0%E5%8D%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>比特币买卖</h3>\n<p>现在有一个比特币的涨跌序列，只能买卖一次，求最大的收益是多少？</p>\n<p>Input:</p>\n<ol>\n<li>\n<p>Positive integer n, means the days you can predict.</p>\n</li>\n<li>\n<p>n integers, means the bitcoin’s changed in i-th day</p>\n</li>\n<li>\n<p>you can buy one bitcoin</p>\n</li>\n<li>\n<p>you can buy and sell one time</p>\n</li>\n</ol>\n<p>Output:</p>\n<ul>\n<li>the max profit you can earn.</li>\n</ul>\n<p>exmaple:</p>\n<p>Input:</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="38741217481017640000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`5\n10 -20 30 -20 50`, `38741217481017640000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title=""\n              >\n                \n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">5\n10 -20 30 -20 50</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="96325233331654200000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`60`, `96325233331654200000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title=""\n              >\n                \n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">60</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h4 id="暴力法"><a href="#%E6%9A%B4%E5%8A%9B%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>暴力法</h4>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="62989402471928816000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const prices = [10, -20, 30, -20, 50];\nfunction maxProfit(prices) {\n  let maxProfit = 0;\n  for (let i = 0; i < prices.length; i++) {\n    for (let j = i + 1; j < prices.length; j++) {\n      let profit = 0;\n      for (let m = i; m <= j; m++) {\n        profit += prices[m];\n      }\n      if (profit > maxProfit) {\n        maxProfit = profit;\n      }\n    }\n  }\n  return maxProfit;\n}\nconsole.log(maxProfit(prices));`, `62989402471928816000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token parameter">prices</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> maxProfit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> profit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> m <span class="token operator">=</span> i<span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        profit <span class="token operator">+=</span> prices<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>profit <span class="token operator">></span> maxProfit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        maxProfit <span class="token operator">=</span> profit<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> maxProfit<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">maxProfit</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id="动态规划"><a href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>动态规划</h4>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79696060860921950000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`dp[i] = max(prices[i], dp[i - 1] + prices[i]);`, `79696060860921950000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="73363275208735200000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const prices = [10, -20, 30, -20, 50];\nfunction maxProfit(prices) {\n  let maxProfit = 0;\n  const dp = [prices[0]];\n  for (let i = 1; i < prices.length; i++) {\n    dp[i] = prices[i] > dp[i - 1] + prices[i] ? prices[i] : dp[i - 1] + prices[i];\n    maxProfit = dp[i] > maxProfit ? dp[i] : maxProfit;\n  }\n  return maxProfit;\n}\nconsole.log(maxProfit(prices));\n\n// 或\nvar maxSubArray = function(nums) {\n  let pre = 0,\n    maxAns = nums[0];\n  nums.forEach((x) => {\n    pre = Math.max(pre + x, x);\n    maxAns = Math.max(maxAns, pre);\n  });\n  return maxAns;\n};`, `73363275208735200000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token parameter">prices</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> maxProfit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">:</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    maxProfit <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxProfit <span class="token operator">?</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">:</span> maxProfit<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> maxProfit<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">maxProfit</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 或</span>\n<span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    maxAns <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    pre <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pre <span class="token operator">+</span> x<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    maxAns <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxAns<span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> maxAns<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>',
id:"/home/runner/work/GatsbyBlog/GatsbyBlog/blog/笔试实录/index.md absPath of file >>> MarkdownRemark",timeToRead:7,frontmatter:{date:"2021-04-14 23:22:33",path:"/written-examination-record/",tags:"面试, 笔试",title:"笔试实录",draft:!0}},{excerpt:"src\\client\\components\\derive-analytic 动态 saga model 绑定工具，使用 key 来实现切换 model SliceChartFacade 多组件映射",html:'<p>src\\client\\components\\derive-analytic</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="44372254670726500000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`.\n├── components\n│   ├── indice-item-list.jsx\n│   ├── indice-item-list.styl\n│   ├── indice-selector-modal.jsx\n│   ├── indice-selector-modal.styl\n│   ├── indice-selector-setting-modal.jsx\n│   ├── indice-selector-setting-modal.styl\n│   ├── indice-selector.jsx\n│   ├── indices-inspector.jsx\n│   ├── save-analytic-modal.jsx\n│   ├── save-analytic-modal.styl\n│   ├── time-select.jsx\n│   ├── time-select.styl\n│   └── time-setting.jsx\n├── drag-drop-hoc.jsx\n├── filter-editor.js\n├── filter-editor.styl\n├── group\n│   ├── add-modal.jsx\n│   ├── dnd-sort.jsx\n│   ├── group-setting-modal.jsx\n│   ├── group-setting-modal.styl\n│   └── index.jsx\n├── index.jsx\n├── index.styl\n├── model.js # model 数据层，存放跨组件数据\n├── pinyin-utils.js\n├── report-analytic.jsx\n├── report-analytic.styl\n├── report-tabs\n│   ├── analytic-func.js\n│   ├── draggable-tabs.jsx\n│   ├── index.jsx\n│   ├── table.styl\n│   └── 多维分析后处理逻辑、自定义本地指标说明.md\n└── viz-type-selector.jsx`, `44372254670726500000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="bash"\n              >\n                <span class="gatsby-code-button-language">bash</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash"><span class="token builtin class-name">.</span>\n├── components\n│   ├── indice-item-list.jsx\n│   ├── indice-item-list.styl\n│   ├── indice-selector-modal.jsx\n│   ├── indice-selector-modal.styl\n│   ├── indice-selector-setting-modal.jsx\n│   ├── indice-selector-setting-modal.styl\n│   ├── indice-selector.jsx\n│   ├── indices-inspector.jsx\n│   ├── save-analytic-modal.jsx\n│   ├── save-analytic-modal.styl\n│   ├── time-select.jsx\n│   ├── time-select.styl\n│   └── time-setting.jsx\n├── drag-drop-hoc.jsx\n├── filter-editor.js\n├── filter-editor.styl\n├── group\n│   ├── add-modal.jsx\n│   ├── dnd-sort.jsx\n│   ├── group-setting-modal.jsx\n│   ├── group-setting-modal.styl\n│   └── index.jsx\n├── index.jsx\n├── index.styl\n├── model.js <span class="token comment"># model 数据层，存放跨组件数据</span>\n├── pinyin-utils.js\n├── report-analytic.jsx\n├── report-analytic.styl\n├── report-tabs\n│   ├── analytic-func.js\n│   ├── draggable-tabs.jsx\n│   ├── index.jsx\n│   ├── table.styl\n│   └── 多维分析后处理逻辑、自定义本地指标说明.md\n└── viz-type-selector.jsx</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>动态 saga model 绑定工具，使用 key 来实现切换 model</p>\n<p>SliceChartFacade 多组件映射</p>',id:"/home/runner/work/GatsbyBlog/GatsbyBlog/blog/多维分析架构解析/index.md absPath of file >>> MarkdownRemark",timeToRead:1,frontmatter:{date:"2021-03-29 10:02:10",path:"/multi-dimension-analysis-structure-analyzing/",tags:"业务",title:"多维分析架构解析",draft:!0}},{excerpt:"联系方式 手机：13072748105/19928327201 Email：634407147@qq.com QQ：634407147 微信：13072748105 个人信息 涂波涛/男/1993 本科/武汉科技大学/软件工程 工作年限：5 年 技术博客： https://blog.towavephone.com/ Github:  https://github.com/towavephone…",html:'<h1 id="联系方式"><a href="#%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>联系方式</h1>\n<ul>\n<li>手机：13072748105/19928327201</li>\n<li>Email：634407147@qq.com</li>\n<li>QQ：634407147</li>\n<li>微信：13072748105</li>\n</ul>\n<h1 id="个人信息"><a href="#%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>个人信息</h1>\n<ul>\n<li>涂波涛/男/1993</li>\n<li>本科/武汉科技大学/软件工程</li>\n<li>工作年限：5 年</li>\n<li>技术博客：<a href="https://blog.towavephone.com/" target="_blank" rel="nofollow noreferrer noopener">https://blog.towavephone.com/</a></li>\n<li>Github: <a href="https://github.com/towavephone" target="_blank" rel="nofollow noreferrer noopener">https://github.com/towavephone</a></li>\n<li>期望职位：高级前端工程师、前端架构师</li>\n<li>目前状况：在职，可短期内到岗</li>\n</ul>\n<h1 id="工作经历"><a href="#%E5%B7%A5%E4%BD%9C%E7%BB%8F%E5%8E%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>工作经历</h1>\n<h2 id="广东数果科技有限公司中级前端工程师（2020-年-8-月--至今）"><a href="#%E5%B9%BF%E4%B8%9C%E6%95%B0%E6%9E%9C%E7%A7%91%E6%8A%80%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E4%B8%AD%E7%BA%A7%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%882020-%E5%B9%B4-8-%E6%9C%88--%E8%87%B3%E4%BB%8A%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>广东数果科技有限公司——中级前端工程师（2020 年 8 月 ~ 至今）</h2>\n<ul>\n<li>智能营销前端开发</li>\n<li>统计综合管理——客车开行效益全栈开发</li>\n<li>统计综合管理——指标管理前端开发</li>\n</ul>\n<h3 id="客车开行效益"><a href="#%E5%AE%A2%E8%BD%A6%E5%BC%80%E8%A1%8C%E6%95%88%E7%9B%8A" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>客车开行效益</h3>\n<ul>\n<li>\n<p>背景</p>\n<ul>\n<li>由于需要开发政府定制项目，需要启动在主项目的基础上开发一个拓展项目</li>\n</ul>\n</li>\n<li>\n<p>任务</p>\n<ul>\n<li>负责地图组件的选型、搭建、验证、部署，详见 <a href="https://blog.towavephone.com/arcgis-map-component-build-deploy/" target="_blank" rel="nofollow noreferrer noopener">基于 arcgis 地图组件的搭建部署</a></li>\n<li>优化主项目监听子项目文件变化，以实现增量编译的功能，详见 <a href="https://blog.towavephone.com/nodemon-monitor-link-changes/" target="_blank" rel="nofollow noreferrer noopener">基于 nodemon 实现监听文件链接变化</a></li>\n</ul>\n</li>\n<li>\n<p>成果</p>\n<ul>\n<li>独立负责客车开行效益模块开发，对接数据组提供的数据，熟悉了后端的开发模式</li>\n</ul>\n</li>\n</ul>\n<h2 id="广州探迹科技有限公司中级前端工程师（2018-年-6-月--2020-年-7-月）"><a href="#%E5%B9%BF%E5%B7%9E%E6%8E%A2%E8%BF%B9%E7%A7%91%E6%8A%80%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E4%B8%AD%E7%BA%A7%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%882018-%E5%B9%B4-6-%E6%9C%88--2020-%E5%B9%B4-7-%E6%9C%88%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>广州探迹科技有限公司——中级前端工程师（2018 年 6 月 ~ 2020 年 7 月）</h2>\n<ul>\n<li>集客、智能呼叫前端开发</li>\n<li>负责项目架构搭建、公用组件封装、架构优化、新人培训、技术分享、基础工具开发、日常迭代开发</li>\n</ul>\n<h3 id="集客项目"><a href="#%E9%9B%86%E5%AE%A2%E9%A1%B9%E7%9B%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>集客项目</h3>\n<ul>\n<li>\n<p>背景</p>\n<ul>\n<li>由于公司需要从各种渠道比如网站、表单等等渠道获取信息，集客产品承担了从各个渠道收集、分析信息的任务</li>\n</ul>\n</li>\n<li>\n<p>任务</p>\n<ul>\n<li>负责客服聊天组件新窗口打开的功能，支持各种网站包括公司的产品端，为此封装底层通信库，解决 webpack 运行环境等等问题，具体探索过程见 <a href="https://blog.towavephone.com/new-window-technology-research/" target="_blank" rel="nofollow noreferrer noopener">客服新窗口技术探索</a></li>\n<li>负责集客产品脚手架搭建，技术栈采用 webpack v4 + React + MobX + antd，解决了 IE 兼容性、命令行显示异常问题，实现了加速构建、react-loadable 优化，最终效果为编译时间 <code class="language-text">10s</code> 左右，首屏时间 <code class="language-text">439ms</code>，首屏加载大小 <code class="language-text">1.1MB</code>，具体搭建过程见 <a href="https://blog.towavephone.com/webpack-template-new-project/" target="_blank" rel="nofollow noreferrer noopener">Webpack 脚手架搭建笔记</a></li>\n<li>负责集客顾客端脚手架搭建，兼容桌面端、移动端、微信公众号以及小程序，技术栈采用 webpack v2 + React + antd，搭建过程见 <a href="https://blog.towavephone.com/components-pack-as-library/" target="_blank" rel="nofollow noreferrer noopener">记一次组件打包为链接的实践</a></li>\n<li>之后由于加载速度较慢，负责集客顾客端脚手架优化，技术栈 webpack v4 + react-lite + react-component，精简组件库如去除较大三方库、采用轻量级三方库 react-lite、组件自编写使用 antd 底层框架。使用组件懒加载、大组件预加载技术，将首屏时间减小到 <code class="language-text">236ms</code>，首屏加载大小减小到 <code class="language-text">101KB</code>。桌面端、移动端分离打包并优化编译脚本，编译时间 <code class="language-text">10s</code> 左右，具体搭建过程见 <a href="https://blog.towavephone.com/building-platform-lightweight-components/" target="_blank" rel="nofollow noreferrer noopener">构建多平台轻量化组件的实践</a>。其中也踩了一些移动端的坑，踩坑过程见 <a href="https://blog.towavephone.com/mobile-adaptation-summary/" target="_blank" rel="nofollow noreferrer noopener">移动端适配汇总</a></li>\n<li>负责集客表单脚手架的搭建，技术栈 gulp + generator-webapp，增加了资源文件 hash、接口代理、html 模板等功能，原生 javascript 实现集客表单，最终实现了首屏时间 <code class="language-text">264ms</code>，首屏加载大小 <code class="language-text">85.9KB</code>，具体搭建过程见 <a href="https://blog.towavephone.com/lightweight-website-construction/" target="_blank" rel="nofollow noreferrer noopener">轻量级网站构建实践</a></li>\n</ul>\n</li>\n<li>\n<p>成果</p>\n<ul>\n<li>集客、集客顾客端、集客表单脚手架编译时间较快提升了开发体验，集客产品线在各端加载很快，大大提升用户体验</li>\n<li>实现了从各个渠道获取信息的目标，使公司整体的获客效率提升了 <code class="language-text">300%</code></li>\n</ul>\n</li>\n</ul>\n<h3 id="智能呼叫项目"><a href="#%E6%99%BA%E8%83%BD%E5%91%BC%E5%8F%AB%E9%A1%B9%E7%9B%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>智能呼叫项目</h3>\n<ul>\n<li>\n<p>背景</p>\n<ul>\n<li>公司需要能配置各种话术且能调度三方线路的平台，以及统计拨打的效果</li>\n</ul>\n</li>\n<li>\n<p>任务</p>\n<ul>\n<li>负责智能呼叫脚手架的升级，技术栈 webpack v4 + React + antd + Redux-Saga，实现了按路由、组件懒加载功能，编译时间由 <code class="language-text">40s</code> 左右降低到 <code class="language-text">10s</code> 左右，首屏时间由 <code class="language-text">855ms</code> 缩短到 <code class="language-text">567ms</code>，首屏加载大小由 <code class="language-text">1.3MB</code> 减小到 <code class="language-text">880KB</code>，具体过程见 <a href="https://blog.towavephone.com/webpack-upgrade-about-product/" target="_blank" rel="nofollow noreferrer noopener">Webpack 升级优化</a></li>\n<li>封装带话术变量的话术富文本框，底层使用 draft.js，解决了 IE 下的 parseFromString 兼容、transfrom 属性问题，具体过程见 <a href="https://blog.towavephone.com/rich-input-question/" target="_blank" rel="nofollow noreferrer noopener">富文本框疑难点处理过程</a></li>\n<li>封装声音波形图切分组件，底层使用 wavesurfer.js，使用 ref 封装调用原生组件，具体过程见 <a href="https://blog.towavephone.com/wavesurfer-voice-wave-research/" target="_blank" rel="nofollow noreferrer noopener">基于 wavesurfer.js 声音波形图的研究</a></li>\n<li>使声音播放组件兼容到 IE9，底层使用 embed 标签，单独对 IE 封装能播放声音的组件，具体过程见 <a href="https://blog.towavephone.com/reactplayer-ie-compatibility/" target="_blank" rel="nofollow noreferrer noopener">ReactPlayer 之 IE 兼容性研究</a></li>\n<li>封装网页打电话三方库，底层采用支持 freeswitch 的 SIP.js，具体过程见 <a href="https://blog.towavephone.com/sip-protocol-practice/" target="_blank" rel="nofollow noreferrer noopener">基于 SIP 协议云端电话的实践</a></li>\n</ul>\n</li>\n<li>\n<p>成果</p>\n<ul>\n<li>实现了智能呼叫从 webpack v2 到 webpack v4 的升级，编译时间缩短了 <code class="language-text">75%</code>，首屏时间缩短了 <code class="language-text">33%</code></li>\n<li>处理各种组件兼容性问题，使用户数量提升了 <code class="language-text">10%</code></li>\n</ul>\n</li>\n</ul>\n<h3 id="侧边栏项目"><a href="#%E4%BE%A7%E8%BE%B9%E6%A0%8F%E9%A1%B9%E7%9B%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>侧边栏项目</h3>\n<ul>\n<li>\n<p>背景</p>\n<ul>\n<li>目前侧边栏的项目更新过多，导致以侧边栏为子模块的项目编译越来越频繁，需要编译的项目越来越多</li>\n</ul>\n</li>\n<li>\n<p>任务</p>\n<ul>\n<li>初步探索了微前端在侧边栏项目的落地，底层使用 ice-stark 三方库，探索过程见 <a href="https://blog.towavephone.com/micro-front-end-demo-practice/" target="_blank" rel="nofollow noreferrer noopener">微前端适配 demo 的实践</a></li>\n<li>负责侧边栏项目的开发，原生 javascript 实现侧边栏，使用 doT 模板引擎实现 html 模板的渲染</li>\n</ul>\n</li>\n<li>\n<p>成果</p>\n<ul>\n<li>实现了侧边栏项目的独立编译，侧边栏的配置放后端可大大提升侧边入口的灵活性，极大地优化了开发体验</li>\n</ul>\n</li>\n</ul>\n<h2 id="上海拼多多有限公司初级前端工程师（2016-年-7-月--2017-年-3-月）"><a href="#%E4%B8%8A%E6%B5%B7%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%88%9D%E7%BA%A7%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%882016-%E5%B9%B4-7-%E6%9C%88--2017-%E5%B9%B4-3-%E6%9C%88%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>上海拼多多有限公司——初级前端工程师（2016 年 7 月 ~ 2017 年 3 月）</h2>\n<ul>\n<li>MMS、OMS 前端开发</li>\n<li>负责日常迭代开发、技术分享</li>\n</ul>\n<h3 id="满减券后台运营项目"><a href="#%E6%BB%A1%E5%87%8F%E5%88%B8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%90%A5%E9%A1%B9%E7%9B%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>满减券后台运营项目</h3>\n<ul>\n<li>\n<p>背景</p>\n<ul>\n<li>由于业务迭代速度加快，原来批量发放优惠券的最大数量不足以满足运营日常处理的速度</li>\n</ul>\n</li>\n<li>\n<p>任务</p>\n<ul>\n<li>此项目团队一共 <code class="language-text">3</code> 人，由我推动前端性能优化重构，其中后端研发、大数据组也一起参与</li>\n<li>负责重构前端页面，应用锁机制确保不会多次发同一批优惠券</li>\n<li>利用 React Bootstarp Table 实现了批量添加删除查询优惠券的功能</li>\n</ul>\n</li>\n<li>\n<p>成果</p>\n<ul>\n<li>前端发放优惠券的时间由 <code class="language-text">3</code> 分钟减少到至多 <code class="language-text">1</code> 分钟，性能直观感受提升 <code class="language-text">50%</code>，运营处理优惠券的时间缩短 <code class="language-text">1</code> 倍</li>\n<li>可以发送多种不同价值、不同数量的优惠券相比原来只能发一种相同价值、不同数量的优惠券，效率有很大的提升</li>\n<li>整体项目的结果明显，得到了主管与同事们的一致好评</li>\n</ul>\n</li>\n</ul>\n<h3 id="客服售后留言项目"><a href="#%E5%AE%A2%E6%9C%8D%E5%94%AE%E5%90%8E%E7%95%99%E8%A8%80%E9%A1%B9%E7%9B%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>客服售后留言项目</h3>\n<ul>\n<li>\n<p>背景</p>\n<ul>\n<li>由于新的平台用户售后开放，需要实现与之对应用户平台售后留言功能，提升售后体验</li>\n</ul>\n</li>\n<li>\n<p>职责</p>\n<ul>\n<li>此项目团队一共 <code class="language-text">2</code> 人，我和另外一人负责前端客服平台实现，其中后端研发，移动端也一起参与</li>\n<li>采用 AngularJS + Ionic 技术实现网页版客服平台，postMessage 传递窗口间消息，WebSocket 服务推送实现会话功能</li>\n<li>实现发送、放大图片，每隔一段时间显示会话时间的功能</li>\n</ul>\n</li>\n<li>\n<p>成果</p>\n<ul>\n<li>从零实现了网页版客服平台系统，平台用户售后回复率提升了 <code class="language-text">400%</code>，处理留言的速度提升了 <code class="language-text">5</code> 倍</li>\n</ul>\n</li>\n</ul>\n<h1 id="开源项目和作品"><a href="#%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%92%8C%E4%BD%9C%E5%93%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>开源项目和作品</h1>\n<ul>\n<li><a href="https://blog.towavephone.com/" target="_blank" rel="nofollow noreferrer noopener">技术博客</a> : gatsby 做的技术博客，离线加载，PWA、PRPL 架构，GitLab / Jenkins 自动化部署</li>\n<li><a href="https://github.com/towavephone/MemoryCleaner" target="_blank" rel="nofollow noreferrer noopener">安卓内存清理</a> : 在校期间做的安卓项目，至今（2020-5-13 00:04:39） star 数 82，fork 数 32</li>\n</ul>\n<h1 id="技能清单"><a href="#%E6%8A%80%E8%83%BD%E6%B8%85%E5%8D%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>技能清单</h1>\n<p>以下均为我掌握的技能</p>\n<ul>\n<li>Web 开发：JavaScript = jQuery > CSS = HTML</li>\n<li>前端框架：React</li>\n<li>前端工具：Webpack > ESLint > Sass = Gulp</li>\n<li>数据库相关：MySQL > SQLite</li>\n<li>版本管理、文档和自动化部署工具：GitLab > Jenkins</li>\n<li>云和开放平台：阿里云</li>\n</ul>\n<h1 id="致谢"><a href="#%E8%87%B4%E8%B0%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>致谢</h1>\n<p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>',id:"/home/runner/work/GatsbyBlog/GatsbyBlog/blog/个人简历/index-2021.md absPath of file >>> MarkdownRemark",timeToRead:6,frontmatter:{date:"2021-03-18 10:26:31",path:"/personal-resume-2021/",tags:"面试, 简历",title:"涂波涛的个人简历",draft:!0}},{excerpt:"腾讯 这里是 SNG 部门的面试 一面 今天晚上 7 点左右接到腾讯 SNG 打来的电话，全长 40 分钟 简要介绍自己 客服系统采用什么架构？ Ionic 框架是做什么的？ Ionic 前身是解决什么问题的？ 客服系统为什么采用这个框架？ websocket 怎么实现的？还有什么别的方式来实现消息推送机制？ 当时用的 Angular 的版本？双向绑定是怎么实现的？ 301 与 302 的区别？ jquery 中 bind 和 on 的用法？以及他们的区别？优缺点？ 商家后台技术栈？react…",html:'<h1 id="腾讯"><a href="#%E8%85%BE%E8%AE%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>腾讯</h1>\n<p>这里是 SNG 部门的面试</p>\n<h2 id="一面"><a href="#%E4%B8%80%E9%9D%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一面</h2>\n<p>今天晚上 7 点左右接到腾讯 SNG 打来的电话，全长 40 分钟</p>\n<ol>\n<li>简要介绍自己</li>\n<li>客服系统采用什么架构？</li>\n<li>Ionic 框架是做什么的？</li>\n<li>Ionic 前身是解决什么问题的？</li>\n<li>客服系统为什么采用这个框架？</li>\n<li>websocket 怎么实现的？还有什么别的方式来实现消息推送机制？</li>\n<li>当时用的 Angular 的版本？双向绑定是怎么实现的？</li>\n<li>301 与 302 的区别？</li>\n<li>jquery 中 bind 和 on 的用法？以及他们的区别？优缺点？</li>\n<li>商家后台技术栈？react 是什么东西？react 虚拟 dom 算法的实现方式？虚拟 dom 是什么？</li>\n<li>重绘与重排是什么？他们的区别？有一个动画怎样实现使它的 dom 的重排重绘改变最小？也就是更流畅？</li>\n<li>什么是一级 dom 和二级 dom？</li>\n<li>什么是事件委托？</li>\n<li>跨域的几种实现方式？其中 postMessage 内部的实现方式？调用过程？伪装域名怎么解决？其中服务器端怎么实现 Access-Control-Allow-Origin 的跨域的（怎么拦截跨域的）？</li>\n<li>浏览器事件规则的传递？</li>\n<li>缓存的实现方式？</li>\n<li>dns 的查询过程？</li>\n<li>你怎么称呼？</li>\n<li>你主要做什么业务？</li>\n<li>有没有涉及到后台运营一些业务？</li>\n</ol>\n<p>以上更新于<code class="language-text">2018-04-23 19:44:37</code></p>\n<hr>\n<h1 id="shein"><a href="#shein" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SHEIN</h1>\n<h2 id="一面-1"><a href="#%E4%B8%80%E9%9D%A2-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一面</h2>\n<ol>\n<li>react v15 与 v16 的主要变化？</li>\n<li>react v15 getChildContext 与 react v16 Context.Provider 优缺点？</li>\n<li>redux 与 mobx 的优缺点？</li>\n<li>组件怎么做性能优化？</li>\n<li>mobx 怎么做性能优化？</li>\n<li>table 的某一行有很多组件，使用起来卡顿，怎么优化？</li>\n<li>webpack v2 升级到 webpack v4 你主要做了哪些优化？</li>\n<li>页面性能优化？</li>\n<li>react 页面白屏的原因及解决方法？</li>\n<li>react 中全局主题色怎么配置？</li>\n<li>style 与 className 那种更好？</li>\n<li>react 组件最耗性能的地方？怎么优化</li>\n<li>面试需要几轮？</li>\n<li>面试官是做什么业务的？</li>\n</ol>\n<h2 id="二面"><a href="#%E4%BA%8C%E9%9D%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>二面</h2>\n<ol>\n<li>介绍自己</li>\n<li>有没有女朋友</li>\n<li>工作经历中隔了一年是什么原因</li>\n<li>为什么跳槽</li>\n<li>为什么要选你</li>\n<li>页面上有图片加载，图片有懒加载，如何计算图片曝光性能更好</li>\n<li>根据上面的条件，除了图片曝光信息之外，还有浏览器上有一些数据要采集，如何发给后端？</li>\n<li>架构组主要做些什么</li>\n<li>上线的流程怎么样</li>\n</ol>\n<p>以上更新于<code class="language-text">2020-5-20 09:17:01</code></p>\n<hr>\n<h1 id="数字广东（拿到-offer）"><a href="#%E6%95%B0%E5%AD%97%E5%B9%BF%E4%B8%9C%EF%BC%88%E6%8B%BF%E5%88%B0-offer%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>数字广东（拿到 offer）</h1>\n<h2 id="一面-2"><a href="#%E4%B8%80%E9%9D%A2-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一面</h2>\n<ol>\n<li>输入网址浏览器执行的过程</li>\n<li>TCP 连接时为什么三次握手</li>\n<li>TCP 断开时为什么四次挥手</li>\n<li>vue 用法？</li>\n<li>react 16 与 15 的区别</li>\n<li>为什么要加上 react 16 的生命周期？</li>\n<li>fiber 原理？底层架构</li>\n<li>webpack 原理</li>\n<li>webpack 分包机制？webpack 4 与 2 的分包机制有什么区别？</li>\n<li>网页性能优化</li>\n<li>图片格式的选择？</li>\n<li>拿到美工的图片时会怎么选择？做什么处理？</li>\n<li>iconfont 字体库原理？</li>\n<li>css 选择器优先级？</li>\n<li>对方技术栈？</li>\n<li>对方面试几轮？</li>\n<li>对方做什么业务？</li>\n</ol>\n<p>以上更新于<code class="language-text">2020-5-27 13:34:46</code></p>\n<hr>\n<h2 id="二面-1"><a href="#%E4%BA%8C%E9%9D%A2-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>二面</h2>\n<ol>\n<li>项目介绍？</li>\n<li>如果遇到 UI 和你的意见不一致你会怎么处理？</li>\n<li>对方的技术栈？</li>\n<li>对方的上线流程？</li>\n<li>对方的架构工作？</li>\n</ol>\n<h2 id="三面"><a href="#%E4%B8%89%E9%9D%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>三面</h2>\n<ol>\n<li>怎么做组件的复用</li>\n<li>项目介绍</li>\n</ol>\n<h1 id="腾讯-1"><a href="#%E8%85%BE%E8%AE%AF-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>腾讯</h1>\n<p>这里是开发平台运营前端的面试</p>\n<h2 id="一面-3"><a href="#%E4%B8%80%E9%9D%A2-3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一面</h2>\n<ol>\n<li>项目介绍？</li>\n<li>浏览器缓存介绍？</li>\n<li>sw 缓存怎么实现的？原理是什么？</li>\n<li>sw 缓存机制是否有了解？如何更新 sw 缓存？</li>\n<li>https 原理？中途被篡改的话该怎么预防？</li>\n<li>代码劫持实现 XMLHttpRequest Send 方法，要求每个 ajax 请求把请求参数打印出来？</li>\n<li>叙述一下 js 事件的处理机制？</li>\n<li>实现一段程序，检测括号是否成对出现？例如<code class="language-text">(())()</code></li>\n<li>实现一个 sum 函数，要求：<code class="language-text">sum(1, 2).result = 3;sum(1, 2)(3).result = 6;sum(1, 2)(3, 4).result = 10;sum(1, 2)(3, 4)(5).result = 15</code></li>\n<li>求字符串的最长公共前缀，例如输入：<code class="language-text">[&quot;flower&quot;, &quot;flow&quot;, &quot;flight&quot;]</code>，输出：<code class="language-text">fl</code></li>\n</ol>\n<p>以上更新于<code class="language-text">2020-6-2 00:17:38</code></p>\n<hr>\n<h1 id="晓教育"><a href="#%E6%99%93%E6%95%99%E8%82%B2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>晓教育</h1>\n<h2 id="一面-4"><a href="#%E4%B8%80%E9%9D%A2-4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一面</h2>\n<ol>\n<li>冒泡排序与选择排序的区别？</li>\n<li>BFC 与 IFC？</li>\n<li>react 生命周期？</li>\n<li>移动端适配的点？</li>\n<li>移动端像素的适配做过没？rem 转 px 之类的方案？</li>\n<li>webpack pc/mobile 是怎么多渠道打包的？</li>\n<li>怎么加速 webpack 的构建？</li>\n<li>微前端有做过吗？讲下实践过程及原理？</li>\n<li>websocket 做过吗？有自己写过的 socket 库吗？</li>\n</ol>\n<h2 id="二面-2"><a href="#%E4%BA%8C%E9%9D%A2-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>二面</h2>\n<ol>\n<li>app 冷启动怎样更快</li>\n<li>cdn 原理</li>\n</ol>\n<h1 id="果肉教育"><a href="#%E6%9E%9C%E8%82%89%E6%95%99%E8%82%B2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>果肉教育</h1>\n<h2 id="一面-5"><a href="#%E4%B8%80%E9%9D%A2-5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一面</h2>\n<ol>\n<li>react-lite 少了什么东西？</li>\n<li>react hooks 原理</li>\n<li>react hooks 生命周期类似实现方式</li>\n<li>后端服务</li>\n<li>文件 hash 算法原理？</li>\n</ol>\n<h1 id="青鹿教育"><a href="#%E9%9D%92%E9%B9%BF%E6%95%99%E8%82%B2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>青鹿教育</h1>\n<h2 id="二面-3"><a href="#%E4%BA%8C%E9%9D%A2-3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>二面</h2>\n<ol>\n<li>个人介绍？</li>\n<li>项目介绍？</li>\n<li>你搭建的脚手架或者说技术方案会带来什么商业价值？</li>\n<li>负责产品的用户规模？</li>\n<li>未来规划？</li>\n<li>你如何达到前端架构师/架构师的高度？</li>\n<li>如果带人你会怎么去带人？</li>\n</ol>\n<h2 id="三面-1"><a href="#%E4%B8%89%E9%9D%A2-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>三面</h2>\n<ol>\n<li>期望薪资？</li>\n<li>未来期望？</li>\n<li>来到这个团队希望担任的角色？</li>\n</ol>\n<h1 id="腾讯-2"><a href="#%E8%85%BE%E8%AE%AF-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>腾讯</h1>\n<p>这里是 QQ 邮箱架构组前端的面试</p>\n<h2 id="一面-6"><a href="#%E4%B8%80%E9%9D%A2-6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一面</h2>\n<ol>\n<li>\n<p>合并两个升序链表。比如：L1={1, 3, 5}, L2={2, 4}, L1.merge(L2)后，L1={1, 2, 3, 4, 5}</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="67795610669631640000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`/**\n* function LinkNode(val) {\n*     this.val = val;\n*     this.next = null;\n* }\n*\n* @param {LinkNode} headL2\n*/\nLinkNode.prototype.merge = function(headL2) {};`, `67795610669631640000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">/**\n* function LinkNode(val) {\n*     this.val = val;\n*     this.next = null;\n* }\n*\n* @param {LinkNode} headL2\n*/</span>\n<span class="token class-name">LinkNode</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">headL2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>给定一个递增的循环数组，从里面找出最小的元素。比如：[50, 52, 63, 90, 3, 8, 15, 44]，最小元素为 3，要求时间复杂度尽可能小。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="20985340439746736000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`/**\n* @param {number[]} nums\n* @returns {number}\n*/\nconst findmin = function(nums) {};`, `20985340439746736000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">/**\n* @param {number[]} nums\n* @returns {number}\n*/</span>\n<span class="token keyword">const</span> <span class="token function-variable function">findmin</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>找出二叉排序树中第 3 大的节点，要求空间复杂度为 O(1)。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="90502719948847070000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`/**\n* function TreeNode(value) {\n*     this.value = value\n*     this.left = null\n*     this.right = null\n* }\n*\n*\n* @param {TreeNode} root\n* @returns {number}\n*/\nconst find = function(root) {};`, `90502719948847070000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">/**\n* function TreeNode(value) {\n*     this.value = value\n*     this.left = null\n*     this.right = null\n* }\n*\n*\n* @param {TreeNode} root\n* @returns {number}\n*/</span>\n<span class="token keyword">const</span> <span class="token function-variable function">find</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>完成函数 inherit，使得函数 Child 继承函数 Parent，这里的子类为什么能访问到父类中的变量 a？</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="99583551002431200000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`/**\n* function Parent() {\n*     this.a = \'a\'\n* }\n*\n* function Child() {\n*     Parent.call(this)\n*     this.b = \'b\'\n* }\n*\n* inherit(Child, Parent)\n*/\nconst inherit = function(a, b) {};`, `99583551002431200000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">/**\n* function Parent() {\n*     this.a = \'a\'\n* }\n*\n* function Child() {\n*     Parent.call(this)\n*     this.b = \'b\'\n* }\n*\n* inherit(Child, Parent)\n*/</span>\n<span class="token keyword">const</span> <span class="token function-variable function">inherit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>将一个带 callback 参数的函数 promise 化</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79678229121519710000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`/**\n* const callbackFunc = function (callback) {\n*     callback()\n* }\n*\n* promisify(callbackFunc).call(this).then(() => {\n*     // after callback() called\n* })\n*/\nfunction promisify(original) {}`, `79678229121519710000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">/**\n* const callbackFunc = function (callback) {\n*     callback()\n* }\n*\n* promisify(callbackFunc).call(this).then(() => {\n*     // after callback() called\n* })\n*/</span>\n<span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>项目难点介绍</p>\n</li>\n<li>\n<p>微前端是什么？解决什么问题？</p>\n</li>\n<li>\n<p>https 原理？如果中间人伪造了权威机构的 ca 证书的话，有什么办法解决？</p>\n</li>\n<li>\n<p>兼容性平时怎么做的？做过一体化的解决方法没？</p>\n</li>\n<li>\n<p>对方人员构成？</p>\n</li>\n<li>\n<p>对方技术栈？</p>\n</li>\n</ol>\n<h1 id="头条"><a href="#%E5%A4%B4%E6%9D%A1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>头条</h1>\n<h2 id="一面-7"><a href="#%E4%B8%80%E9%9D%A2-7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一面</h2>\n<ol>\n<li>\n<p>写出执行结果</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="38622674914679770000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function a() {\n console.log(\'a\');\n Promise.resolve().then(() => {\n   console.log(\'e\');\n });\n}\n\nfunction b() {\n console.log(\'b\');\n}\n\nfunction c() {\n console.log(\'c\');\n}\n\nfunction d() {\n setTimeout(a, 0);\n var temp = Promise.resolve().then(b);\n setTimeout(c, 0);\n console.log(\'d\');\n}\nd();`, `38622674914679770000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'e\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'c\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token function">setTimeout</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token keyword">var</span> temp <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token function">setTimeout</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'d\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>实现以下函数，失败时重试次数为 retryTime，延时执行的时间 delay</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="41489853522673650000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`fetchTry(url, retryTime, delay);`, `41489853522673650000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="js"\n              >\n                <span class="gatsby-code-button-language">js</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token function">fetchTry</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> retryTime<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n</li>\n<li>\n<p>实现一个函数 add 3 个数相加， add(1, 2, 3), add(1)(2)(3), add(1, 2)(3), add(1)(2,3) 都返回 6</p>\n</li>\n<li>\n<p>react fiber 架构，如何实现不影响 ui 主线程并顺序更新？</p>\n</li>\n<li>\n<p>async 如何实现 promise？</p>\n</li>\n<li>\n<p>redux 结构怎样？api 有哪些？写过 redux 中间件吗？connect 原理？</p>\n</li>\n<li>\n<p>webpack 加速构建？</p>\n</li>\n<li>\n<p>webpack 的 loader、plugin 是什么？写过 plugin 吗？</p>\n</li>\n</ol>\n<h1 id="酷狗"><a href="#%E9%85%B7%E7%8B%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>酷狗</h1>\n<h2 id="一面-8"><a href="#%E4%B8%80%E9%9D%A2-8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一面</h2>\n<ol>\n<li>try catch 能捕获什么，不能捕获什么</li>\n<li>mobx 与 redux 区别</li>\n<li>mobx 使用了什么设计模式</li>\n<li>webpack4 之前使用了什么做 treeshaking</li>\n<li>webpack4 优化步骤</li>\n<li>小程序是否有做过</li>\n<li>跨端是否有做过</li>\n<li>nodejs 服务搭建过吗？</li>\n<li>一个嵌在 app 内，背景图为视频不支持苹果端怎么办？gif 图片过大，怎么提高首页加载速度？怎么监听 gif 图片加载完成？</li>\n<li>中台是否有做过？</li>\n<li>对我的评价</li>\n<li>react hooks 怎么写自定义的 hook？如果要写一个 fetch 有什么要注意的点？是否考虑全局化的比如埋点操作？</li>\n<li>打包时间怎么算的？首屏时间怎么算？</li>\n<li>编译时间节省了什么？是否考虑放到自动化编译工具上？在 nodejs 链路上需要注意什么？</li>\n</ol>\n<h1 id="文远知行"><a href="#%E6%96%87%E8%BF%9C%E7%9F%A5%E8%A1%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>文远知行</h1>\n<h2 id="二面-4"><a href="#%E4%BA%8C%E9%9D%A2-4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>二面</h2>\n<ol>\n<li>webpack plugin 的介绍及生命周期？</li>\n<li>css 优先级？10 个类的优先级会比 1 个 id 的要高吗？</li>\n<li>IM 除了 websocket 的长连接外还有那些方式可以建立长连接？或者说 webSocket 如何兼容低版本浏览器？</li>\n<li>怎么实现一个深拷贝？</li>\n</ol>\n<h2 id="三面-2"><a href="#%E4%B8%89%E9%9D%A2-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>三面</h2>\n<ol>\n<li>qiankun 切换页面时怎么保存原来的状态？</li>\n<li>如何更简单的实现表单？表单间的联动怎么处理？</li>\n<li>eggjs 如何实现网络响应？（select/epoll）</li>\n<li>midway 如何实现注解？注解原理？</li>\n<li>redis 有哪几种类型？</li>\n<li>表连接有哪几种？</li>\n<li>left join 与 inner join 区别？</li>\n<li>left join 的性能优化？</li>\n<li>MySQL 有哪几种锁？</li>\n<li>数据库四种隔离级别？</li>\n</ol>',
id:"/home/runner/work/GatsbyBlog/GatsbyBlog/blog/面试实录/index.md absPath of file >>> MarkdownRemark",timeToRead:6,frontmatter:{date:"2020-06-04 23:34:08",path:"/interview-record/",tags:"面试, 面试实录",title:"面试实录",draft:!0}}],page:3,pagesSum:5,length:21,prevPath:"/drafts/page/2",nextPath:"/drafts/page/4"}}}});
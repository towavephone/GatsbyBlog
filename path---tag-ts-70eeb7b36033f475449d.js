webpackJsonp([0x7126663221ff],{1511:function(n,s){n.exports={data:{site:{siteMetadata:{title:"女王控的博客",description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"测试一 代码为什么会提示错误，应该如何解决这个问题？ 我的解答 直接利用自动推导 最佳解答一 T 类型兼容 User 类型 最佳解答二 返回值限制为 User 类型 最佳解答三 断言处理 最佳解答四 重定义类型 实现要点 T 只是约束于 User 类型，而不局限于 User 类型，所以返回为 T 类型不仅仅只有 id 和 kind，所以需要限制类型 测试二 本道题我们希望参数 a 和 b 的类型都是一致的，即 a 和 b 同时为 number 或 string 类型。当它们的类型不一致的值，TS…",html:'<h1 id="测试一"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试一</h1>\n<p>代码为什么会提示错误，应该如何解决这个问题？</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="9762428061129636000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type User = {\n  id: number;\n  kind: string;\n};\n\nfunction makeCustomer<T extends User>(u: T): T {\n  // Error（TS 编译器版本：v4.4.2）\n  // Type \'{ id: number; kind: string; }\' is not assignable to type \'T\'.\n  // \'{ id: number; kind: string; }\' is assignable to the constraint of type \'T\',\n  // but \'T\' could be instantiated with a different subtype of constraint \'User\'.\n  return {\n    id: u.id,\n    kind: \'customer\'\n  };\n}`, `9762428061129636000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  kind<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> makeCustomer<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token operator">></span><span class="token punctuation">(</span>u<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Error（TS 编译器版本：v4.4.2）</span>\n  <span class="token comment">// Type \'{ id: number; kind: string; }\' is not assignable to type \'T\'.</span>\n  <span class="token comment">// \'{ id: number; kind: string; }\' is assignable to the constraint of type \'T\',</span>\n  <span class="token comment">// but \'T\' could be instantiated with a different subtype of constraint \'User\'.</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n    kind<span class="token punctuation">:</span> <span class="token string">\'customer\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<p>直接利用自动推导</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="33225646740443790000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type User = {\n  id: number;\n  kind: string;\n};\n\nfunction makeCustomer<T extends User>(u: T) {\n  // Error（TS 编译器版本：v4.4.2）\n  // Type \'{ id: number; kind: string; }\' is not assignable to type \'T\'.\n  // \'{ id: number; kind: string; }\' is assignable to the constraint of type \'T\',\n  // but \'T\' could be instantiated with a different subtype of constraint \'User\'.\n  return {\n    id: u.id,\n    kind: \'customer\'\n  };\n}`, `33225646740443790000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  kind<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> makeCustomer<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token operator">></span><span class="token punctuation">(</span>u<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Error（TS 编译器版本：v4.4.2）</span>\n  <span class="token comment">// Type \'{ id: number; kind: string; }\' is not assignable to type \'T\'.</span>\n  <span class="token comment">// \'{ id: number; kind: string; }\' is assignable to the constraint of type \'T\',</span>\n  <span class="token comment">// but \'T\' could be instantiated with a different subtype of constraint \'User\'.</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n    kind<span class="token punctuation">:</span> <span class="token string">\'customer\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答一"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%B8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答一</h2>\n<p>T 类型兼容 User 类型</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="39960313418568800000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type User = {\n  id: number;\n  kind: string;\n};\n\nfunction makeCustomer<T extends User>(u: T): T {\n  // Error（TS 编译器版本：v4.4.2）\n  // Type \'{ id: number; kind: string; }\' is not assignable to type \'T\'.\n  // \'{ id: number; kind: string; }\' is assignable to the constraint of type \'T\',\n  // but \'T\' could be instantiated with a different subtype of constraint \'User\'.\n  return {\n    ...u, // 返回的类型是 User，而非 T，T 是 User 的子类型，约束条件更多，子类可以赋值给父类，反过来不行\n    id: u.id,\n    kind: \'customer\'\n  };\n}`, `39960313418568800000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  kind<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> makeCustomer<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token operator">></span><span class="token punctuation">(</span>u<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Error（TS 编译器版本：v4.4.2）</span>\n  <span class="token comment">// Type \'{ id: number; kind: string; }\' is not assignable to type \'T\'.</span>\n  <span class="token comment">// \'{ id: number; kind: string; }\' is assignable to the constraint of type \'T\',</span>\n  <span class="token comment">// but \'T\' could be instantiated with a different subtype of constraint \'User\'.</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>u<span class="token punctuation">,</span> <span class="token comment">// 返回的类型是 User，而非 T，T 是 User 的子类型，约束条件更多，子类可以赋值给父类，反过来不行</span>\n    id<span class="token punctuation">:</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n    kind<span class="token punctuation">:</span> <span class="token string">\'customer\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答二"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%BA%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答二</h2>\n<p>返回值限制为 User 类型</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68687875712652910000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type User = {\n  id: number;\n  kind: string;\n};\n\nfunction makeCustomer<T extends User>(u: T): ReturnMake<T, User> {\n  // Error（TS 编译器版本：v4.4.2）\n  // Type \'{ id: number; kind: string; }\' is not assignable to type \'T\'.\n  // \'{ id: number; kind: string; }\' is assignable to the constraint of type \'T\',\n  // but \'T\' could be instantiated with a different subtype of constraint \'User\'.\n  return {\n    id: u.id,\n    kind: &quot;customer&quot;,\n  };\n}\n\ntype ReturnMake<T extends User, U> = {\n  [K in keyof U as K extends keyof T ? K : never]: U[K];\n};`, `68687875712652910000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  kind<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> makeCustomer<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token operator">></span><span class="token punctuation">(</span>u<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ReturnMake<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> User<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Error（TS 编译器版本：v4.4.2）</span>\n  <span class="token comment">// Type \'{ id: number; kind: string; }\' is not assignable to type \'T\'.</span>\n  <span class="token comment">// \'{ id: number; kind: string; }\' is assignable to the constraint of type \'T\',</span>\n  <span class="token comment">// but \'T\' could be instantiated with a different subtype of constraint \'User\'.</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n    kind<span class="token punctuation">:</span> <span class="token string">"customer"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> ReturnMake<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">U</span> <span class="token keyword">as</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答三"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%B8%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答三</h2>\n<p>断言处理</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79510683964225910000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type User = {\n  id: number;\n  kind: string;\n};\n\nfunction makeCustomer<T extends User>(u: T): T {\n  // Error（TS 编译器版本：v4.4.2）\n  // Type \'{ id: number; kind: string; }\' is not assignable to type \'T\'.\n  // \'{ id: number; kind: string; }\' is assignable to the constraint of type \'T\',\n  // but \'T\' could be instantiated with a different subtype of constraint \'User\'.\n  return {\n    id: u.id,\n    kind: \'customer\'\n  } as T;\n}`, `79510683964225910000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  kind<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> makeCustomer<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token operator">></span><span class="token punctuation">(</span>u<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Error（TS 编译器版本：v4.4.2）</span>\n  <span class="token comment">// Type \'{ id: number; kind: string; }\' is not assignable to type \'T\'.</span>\n  <span class="token comment">// \'{ id: number; kind: string; }\' is assignable to the constraint of type \'T\',</span>\n  <span class="token comment">// but \'T\' could be instantiated with a different subtype of constraint \'User\'.</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n    kind<span class="token punctuation">:</span> <span class="token string">\'customer\'</span>\n  <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答四"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E5%9B%9B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答四</h2>\n<p>重定义类型</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="78950171984740350000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type User = {\n  id: number;\n  kind: string;\n};\n\nfunction makeCustomer<T extends User>(u: T): User {\n  // Error（TS 编译器版本：v4.4.2）\n  // Type \'{ id: number; kind: string; }\' is not assignable to type \'T\'.\n  // \'{ id: number; kind: string; }\' is assignable to the constraint of type \'T\',\n  // but \'T\' could be instantiated with a different subtype of constraint \'User\'.\n  return {\n    id: u.id,\n    kind: \'customer\'\n  };\n}`, `78950171984740350000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  kind<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> makeCustomer<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token operator">></span><span class="token punctuation">(</span>u<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> User <span class="token punctuation">{</span>\n  <span class="token comment">// Error（TS 编译器版本：v4.4.2）</span>\n  <span class="token comment">// Type \'{ id: number; kind: string; }\' is not assignable to type \'T\'.</span>\n  <span class="token comment">// \'{ id: number; kind: string; }\' is assignable to the constraint of type \'T\',</span>\n  <span class="token comment">// but \'T\' could be instantiated with a different subtype of constraint \'User\'.</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n    kind<span class="token punctuation">:</span> <span class="token string">\'customer\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="实现要点"><a href="#%E5%AE%9E%E7%8E%B0%E8%A6%81%E7%82%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>实现要点</h2>\n<p>T 只是约束于 User 类型，而不局限于 User 类型，所以返回为 T 类型不仅仅只有 id 和 kind，所以需要限制类型</p>\n<h1 id="测试二"><a href="#%E6%B5%8B%E8%AF%95%E4%BA%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试二</h1>\n<p>本道题我们希望参数 a 和 b 的类型都是一致的，即 a 和 b 同时为 number 或 string 类型。当它们的类型不一致的值，TS 类型检查器能自动提示对应的错误信息。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="26277544988764090000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function f(a: string | number, b: string | number) {\n  if (typeof a === \'string\') {\n    return a + \':\' + b; // no error but b can be number!\n  } else {\n    return a + b; // error as b can be number | string\n  }\n}\n\nf(2, 3); // Ok\nf(1, \'a\'); // Error\nf(\'a\', 2); // Error\nf(\'a\', \'b\'); // Ok`, `26277544988764090000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token string">\':\'</span> <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// no error but b can be number!</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// error as b can be number | string</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-1"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<p>函数重载</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="59466438211508270000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function f(a: string, b: string): string;\nfunction f(a: number, b: number): number;\n\nfunction f(a, b) {\n  if (typeof a === \'string\') {\n    return a + \':\' + b; // no error but b can be number!\n  } else {\n    return a + b; // error as b can be number | string\n  }\n}\n\nf(2, 3); // Ok\nf(1, \'a\'); // Error\nf(\'a\', 2); // Error\nf(\'a\', \'b\'); // Ok`, `59466438211508270000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">number</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token string">\':\'</span> <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// no error but b can be number!</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// error as b can be number | string</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答一-1"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%B8%80-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答一</h2>\n<p>泛型实现</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15565429446103440000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function f<T extends string | number>(a: T, b: T) {\n  if (typeof a === \'string\') {\n    return a + \':\' + b; // no error but b can be number!\n  } else {\n    return +a + +b; // error as b can be number | string\n  }\n}\n\nf(2, 3); // Ok\nf(1, \'a\'); // Error\nf(\'a\', 2); // Error\nf(\'a\', \'b\'); // Ok`, `15565429446103440000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> f<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token string">\':\'</span> <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// no error but b can be number!</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">+</span>a <span class="token operator">+</span> <span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">// error as b can be number | string</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答二-1"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%BA%8C-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答二</h2>\n<p>元祖固定类型</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="7655472049523837000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type F = <T extends string | number>(...args: [T, T]) => string | number;\n\nconst f: F = (a, b) => {\n  if (typeof a === \'string\') {\n    return a + \':\' + b; // no error but b can be number!\n  } else {\n    return +a + +b; // error as b can be number | string\n  }\n};\n\nf(2, 3); // Ok\nf(1, \'a\'); // Error\nf(\'a\', 2); // Error\nf(\'a\', \'b\'); // Ok`, `7655472049523837000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> f<span class="token punctuation">:</span> <span class="token function-variable function">F</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token string">\':\'</span> <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// no error but b can be number!</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">+</span>a <span class="token operator">+</span> <span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">// error as b can be number | string</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答三-1"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%B8%89-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答三</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="82463492675562000000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type F = (...args: [string, string] | [number, number]) => string | number;\n\nconst f: F = (a, b) => {\n  if (typeof a === \'string\') {\n    return a + \':\' + b; // no error but b can be number!\n  } else {\n    return +a + +b; // error as b can be number | string\n  }\n};\n\nf(2, 3); // Ok\nf(1, \'a\'); // Error\nf(\'a\', 2); // Error\nf(\'a\', \'b\'); // Ok`, `82463492675562000000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> <span class="token function-variable function">F</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> f<span class="token punctuation">:</span> <span class="token function-variable function">F</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token string">\':\'</span> <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// no error but b can be number!</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">+</span>a <span class="token operator">+</span> <span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">// error as b can be number | string</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试三"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试三</h1>\n<p>如何定义一个 SetOptional 工具类型，支持把给定的 keys 对应的属性变成可选的？对应的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="92495005307027780000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Foo = {\n  a: number;\n  b?: string;\n  c: boolean;\n};\n\n// 测试用例\ntype SomeOptional = SetOptional<Foo, \'a\' | \'b\'>;\n\n// type SomeOptional = {\n//   a?: number; // 该属性已变成可选的\n//   b?: string; // 保持不变\n//   c: boolean;\n// }`, `92495005307027780000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Foo <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  b<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  c<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> SomeOptional <span class="token operator">=</span> SetOptional<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">\'a\'</span> <span class="token operator">|</span> <span class="token string">\'b\'</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token comment">// type SomeOptional = {</span>\n<span class="token comment">//   a?: number; // 该属性已变成可选的</span>\n<span class="token comment">//   b?: string; // 保持不变</span>\n<span class="token comment">//   c: boolean;</span>\n<span class="token comment">// }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在实现 SetOptional 工具类型之后，如果你感兴趣，可以继续实现 SetRequired 工具类型，利用它可以把指定的 keys 对应的属性变成必填的。对应的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="89325812897942260000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Foo = {\n  a?: number;\n  b: string;\n  c?: boolean;\n};\n\n// 测试用例\ntype SomeRequired = SetRequired<Foo, \'b\' | \'c\'>;\n// type SomeRequired = {\n//   a?: number;\n//   b: string; // 保持不变\n//   c: boolean; // 该属性已变成必填\n// }`, `89325812897942260000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Foo <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  b<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  c<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> SomeRequired <span class="token operator">=</span> SetRequired<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">\'b\'</span> <span class="token operator">|</span> <span class="token string">\'c\'</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// type SomeRequired = {</span>\n<span class="token comment">//   a?: number;</span>\n<span class="token comment">//   b: string; // 保持不变</span>\n<span class="token comment">//   c: boolean; // 该属性已变成必填</span>\n<span class="token comment">// }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68048646557722804000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Simplify<T> = {\n  [P in keyof T]: T[P];\n};\n\ntype SetOptional<T extends object, K extends keyof T = keyof T> = Simplify<Omit<T, K> & Partial<Pick<T, K>>>;\n\ntype SetRequired<T extends object, K extends keyof T = keyof T> = Simplify<Omit<T, K> & Required<Pick<T, K>>>;`, `68048646557722804000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Simplify<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> SetOptional<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> Simplify<span class="token operator">&lt;</span>Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">></span> <span class="token operator">&amp;</span> Partial<span class="token operator">&lt;</span>Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>>></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> SetRequired<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> Simplify<span class="token operator">&lt;</span>Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">></span> <span class="token operator">&amp;</span> Required<span class="token operator">&lt;</span>Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>>></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试四"><a href="#%E6%B5%8B%E8%AF%95%E5%9B%9B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试四</h1>\n<p><code class="language-text">Pick&lt;T, K extends keyof T&gt;</code> 的作用是将某个类型中的子属性挑出来，变成包含这个类型部分属性的子类型。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="25311702951683880000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\ntype TodoPreview = Pick<Todo, \'title\' | \'completed\'>;\n\nconst todo: TodoPreview = {\n  title: \'Clean room\',\n  completed: false\n};`, `25311702951683880000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>\n  title<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  description<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  completed<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> TodoPreview <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">\'title\'</span> <span class="token operator">|</span> <span class="token string">\'completed\'</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> todo<span class="token punctuation">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token punctuation">:</span> <span class="token string">\'Clean room\'</span><span class="token punctuation">,</span>\n  completed<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>那么如何定义一个 ConditionalPick 工具类型，支持根据指定的 Condition 条件来生成新的类型，对应的使用示例如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="51231182503684970000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Example {\n  a: string;\n  b: string | number;\n  c: () => void;\n  d: {};\n}\n\n// 测试用例：\ntype StringKeysOnly = ConditionalPick<Example, string>;\n//=> {a: string}`, `51231182503684970000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>\n  a<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  b<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">c</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  d<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 测试用例：</span>\n<span class="token keyword">type</span> StringKeysOnly <span class="token operator">=</span> ConditionalPick<span class="token operator">&lt;</span>Example<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">//=> {a: string}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-2"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="87819938592994200000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Example {\n  a: string;\n  b: string | number;\n  c: () => void;\n  d: {};\n}\n\ntype ConditionalPick<T, U> = {\n  [K in keyof T]: T[K] extends U ? Pick<T, K> : never;\n}[keyof T];\n\n// 测试用例：\ntype StringKeysOnly = ConditionalPick<Example, string>;\n//=> {a: string}`, `87819938592994200000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>\n  a<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  b<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">c</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  d<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> ConditionalPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例：</span>\n<span class="token keyword">type</span> StringKeysOnly <span class="token operator">=</span> ConditionalPick<span class="token operator">&lt;</span>Example<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">//=> {a: string}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-1"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="50541399086772175000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Example {\n  a: string;\n  b: string | number;\n  c: () => void;\n  d: {};\n}\n\ntype ConditionalPick<T, U> = {\n    [K in keyof T as (T[K] extends U ? K : never)]: T[K]\n}\n\n// 测试用例：\ntype StringKeysOnly = ConditionalPick<Example, string>;\n//=> {a: string}`, `50541399086772175000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>\n  a<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  b<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">c</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  d<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> ConditionalPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 测试用例：</span>\n<span class="token keyword">type</span> StringKeysOnly <span class="token operator">=</span> ConditionalPick<span class="token operator">&lt;</span>Example<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">//=> {a: string}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试五"><a href="#%E6%B5%8B%E8%AF%95%E4%BA%94" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试五</h1>\n<p>定义一个工具类型 AppendArgument，为已有的函数类型增加指定类型的参数，新增的参数名是 x，将作为新函数类型的第一个参数。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="3730408978210131500"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Fn = (a: number, b: string) => number\ntype AppendArgument<F, A> = // 你的实现代码\n\ntype FinalFn = AppendArgument<Fn, boolean>\n// (x: boolean, a: number, b: string) => number`, `3730408978210131500`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> <span class="token function-variable function">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span>\n<span class="token keyword">type</span> AppendArgument<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> FinalFn <span class="token operator">=</span> AppendArgument<span class="token operator">&lt;</span>Fn<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">></span>\n<span class="token comment">// (x: boolean, a: number, b: string) => number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-3"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<p>工具类型</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="70939220910910276000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Fn = (a: number, b: string) => number;\ntype AppendArgument<F extends (...args: any) => any, A> = (x: A, ...args: Parameters<F>) => ReturnType<F>;\n\ntype FinalFn = AppendArgument<Fn, boolean>;\n// (x: boolean, a: number, b: string) => number`, `70939220910910276000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> <span class="token function-variable function">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> AppendArgument<span class="token operator">&lt;</span><span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> Parameters<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> ReturnType<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> FinalFn <span class="token operator">=</span> AppendArgument<span class="token operator">&lt;</span>Fn<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// (x: boolean, a: number, b: string) => number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-2"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<p>infer 推断</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="6085853606450131000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Fn = (a: number, b: string) => number;\ntype AppendArgument<F extends (...args: any) => any, A> = F extends (...args: infer T) => infer U\n  ? (x: A, ...args: T) => U\n  : never;\n\ntype FinalFn = AppendArgument<Fn, boolean>;\n// (x: boolean, a: number, b: string) => number`, `6085853606450131000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> <span class="token function-variable function">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> AppendArgument<span class="token operator">&lt;</span><span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> infer <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> infer <span class="token constant">U</span>\n  <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">U</span>\n  <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> FinalFn <span class="token operator">=</span> AppendArgument<span class="token operator">&lt;</span>Fn<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// (x: boolean, a: number, b: string) => number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="拓展"><a href="#%E6%8B%93%E5%B1%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>拓展</h2>\n<p>类似的实现 PushArgument</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="75562803306347430000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Fn = (a: number, b?: string) => number;\ntype PushArgument<F, A> =\n\ntype FinalFn = PushArgument<Fn, boolean>;\n// (a: number, b?: string, x?: boolean) => number`, `75562803306347430000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> <span class="token function-variable function">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> PushArgument<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span>\n\n<span class="token keyword">type</span> FinalFn <span class="token operator">=</span> PushArgument<span class="token operator">&lt;</span>Fn<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// (a: number, b?: string, x?: boolean) => number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-3"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="76577686664673840000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Fn = (a: number, b?: string) => number;\ntype PushArgument<F extends Function, A, S extends any[] = [x?: A]> = F extends (...args: infer R) => infer R2 ? (...args: [...R, ...S]) => R2 : never\n\ntype FinalFn = PushArgument<Fn, boolean>;\n// (a: number, b?: string, x?: boolean) => number`, `76577686664673840000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> <span class="token function-variable function">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> PushArgument<span class="token operator">&lt;</span><span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token class-name">Function</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">A</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> infer <span class="token constant">R</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> infer <span class="token constant">R2</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">S</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">R2</span> <span class="token punctuation">:</span> <span class="token builtin">never</span>\n\n<span class="token keyword">type</span> FinalFn <span class="token operator">=</span> PushArgument<span class="token operator">&lt;</span>Fn<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// (a: number, b?: string, x?: boolean) => number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试六"><a href="#%E6%B5%8B%E8%AF%95%E5%85%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试六</h1>\n<p>定义一个 NativeFlat 工具类型，支持把数组类型拍平（扁平化）。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="94078779997389700000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type NaiveFlat<T extends any[]> = // 你的实现代码\n\n// 测试用例：\ntype NaiveResult = NaiveFlat<[[\'a\'], [\'b\', \'c\'], [\'d\']]>\n// NaiveResult 的结果： &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot;`, `94078779997389700000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> NaiveFlat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token comment">// 测试用例：</span>\n<span class="token keyword">type</span> NaiveResult <span class="token operator">=</span> NaiveFlat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'d\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span>\n<span class="token comment">// NaiveResult 的结果： "a" | "b" | "c" | "d"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在完成 NaiveFlat 工具类型之后，在继续实现 DeepFlat 工具类型，以支持多维数组类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68679469709212640000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type DeepFlat<T extends any[]> = unknown; // 你的实现代码\n\n// 测试用例\ntype Deep = [[\'a\'], [\'b\', \'c\'], [[\'d\']], [[[[\'e\']]]]];\ntype DeepTestResult = DeepFlat<Deep>;\n// DeepTestResult: &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot;`, `68679469709212640000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> DeepFlat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> Deep <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'d\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'e\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> DeepTestResult <span class="token operator">=</span> DeepFlat<span class="token operator">&lt;</span>Deep<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// DeepTestResult: "a" | "b" | "c" | "d" | "e"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答一-2"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%B8%80-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答一</h2>\n<p>递归 + number 循环</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="7344032123374133000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// T[P][number] 对数组里每个 index 进行循环，将 index 转换成key\ntype NaiveFlat<T extends any[]> = {\n  [P in keyof T]: T[P] extends any[] ? T[P][number] : T[P];\n}[number];\n\n// 测试用例：\ntype NaiveResult = NaiveFlat<[[\'a\'], [\'b\', \'c\'], [\'d\']]>;\n// NaiveResult 的结果： &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot;\n\ntype Deep = [[\'a\'], [\'b\', \'c\'], [[\'d\']], [[[[\'e\']]]]];\n\ntype DeepFlat<T extends any[]> = {\n  [K in keyof T]: T[K] extends any[] ? DeepFlat<T[K]> : T[K];\n}[number];\n\ntype DeepTestResult = DeepFlat<Deep>;\n// DeepTestResult: &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot;`, `7344032123374133000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts{3,13}"\n              >\n                <span class="gatsby-code-button-language">ts{3,13}</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight has-highlighted-lines" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// T[P][number] 对数组里每个 index 进行循环，将 index 转换成key</span>\n<span class="token keyword">type</span> NaiveFlat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n<span class="gatsby-highlight-code-line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例：</span>\n<span class="token keyword">type</span> NaiveResult <span class="token operator">=</span> NaiveFlat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'d\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// NaiveResult 的结果： "a" | "b" | "c" | "d"</span>\n\n<span class="token keyword">type</span> Deep <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'d\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'e\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> DeepFlat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n<span class="gatsby-highlight-code-line">  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> DeepFlat<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> DeepTestResult <span class="token operator">=</span> DeepFlat<span class="token operator">&lt;</span>Deep<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// DeepTestResult: "a" | "b" | "c" | "d" | "e"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答二-2"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%BA%8C-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答二</h2>\n<p>infer 推断，这里的 <code class="language-text">T[number] extends infer U</code> 可等价替换为 <code class="language-text">T extends (infer U)[]</code></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79576937484559450000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type NaiveFlat<T extends any[]> = T[number] extends infer U // 你的实现代码\n  ? U extends any[]\n    ? U[number]\n    : U\n  : never;\n\n// 测试用例：\ntype NaiveResult = NaiveFlat<[[\'a\'], [\'b\', \'c\'], [\'d\']]>;\n// NaiveResult 的结果： &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot;\n\ntype DeepFlat<T extends any[]> = T[number] extends infer U // 你的实现代码\n  ? U extends any[]\n    ? DeepFlat<U>\n    : U\n  : never;\n\n// 测试用例\ntype Deep = [[\'a\'], [\'b\', \'c\'], [[\'d\']], [[[[\'e\']]]]];\ntype DeepTestResult = DeepFlat<Deep>;\n// DeepTestResult: &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot;`, `79576937484559450000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> NaiveFlat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">infer</span> <span class="token constant">U</span> <span class="token comment">// 你的实现代码</span>\n  <span class="token operator">?</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token operator">?</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span>\n    <span class="token punctuation">:</span> <span class="token constant">U</span>\n  <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例：</span>\n<span class="token keyword">type</span> NaiveResult <span class="token operator">=</span> NaiveFlat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'d\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// NaiveResult 的结果： "a" | "b" | "c" | "d"</span>\n\n<span class="token keyword">type</span> DeepFlat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">infer</span> <span class="token constant">U</span> <span class="token comment">// 你的实现代码</span>\n  <span class="token operator">?</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token operator">?</span> DeepFlat<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span>\n    <span class="token punctuation">:</span> <span class="token constant">U</span>\n  <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> Deep <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'d\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'e\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> DeepTestResult <span class="token operator">=</span> DeepFlat<span class="token operator">&lt;</span>Deep<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// DeepTestResult: "a" | "b" | "c" | "d" | "e"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试七"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%83" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试七</h1>\n<p>使用类型别名定义一个 EmptyObject 类型，使得该类型只允许空对象赋值：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="29111771896896510000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type EmptyObject = {};\n\n// 测试用例\nconst shouldPass: EmptyObject = {}; // 可以正常赋值\nconst shouldFail: EmptyObject = {\n  // 将出现编译错误\n  prop: \'TS\'\n};`, `29111771896896510000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> EmptyObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">const</span> shouldPass<span class="token punctuation">:</span> EmptyObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 可以正常赋值</span>\n<span class="token keyword">const</span> shouldFail<span class="token punctuation">:</span> EmptyObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 将出现编译错误</span>\n  prop<span class="token punctuation">:</span> <span class="token string">\'TS\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在通过 EmptyObject 类型的测试用例检测后，我们来更改以下 takeSomeTypeOnly 函数的类型定义，让它的参数只允许严格 SomeType 类型的值。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15548162510869635000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type SomeType = {\n  prop: string;\n};\n\n// 更改以下函数的类型定义，让它的参数只允许严格SomeType类型的值\nfunction takeSomeTypeOnly(x: SomeType) {\n  return x;\n}\n\n// 测试用例：\nconst x = { prop: \'a\' };\ntakeSomeTypeOnly(x); // 可以正常调用\n\nconst y = { prop: \'a\', addditionalProp: \'x\' };\ntakeSomeTypeOnly(y); // 将出现编译错误`, `15548162510869635000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> SomeType <span class="token operator">=</span> <span class="token punctuation">{</span>\n  prop<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 更改以下函数的类型定义，让它的参数只允许严格SomeType类型的值</span>\n<span class="token keyword">function</span> <span class="token function">takeSomeTypeOnly</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> SomeType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 测试用例：</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token string">\'a\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">takeSomeTypeOnly</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以正常调用</span>\n\n<span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span> addditionalProp<span class="token punctuation">:</span> <span class="token string">\'x\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">takeSomeTypeOnly</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将出现编译错误</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-4"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="50011135434584790000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type EmptyObject = {\n  [P in PropertyKey]: never;\n};\n\n// 测试用例\nconst shouldPass: EmptyObject = {}; // 可以正常赋值\nconst shouldFail: EmptyObject = {\n  // 将出现编译错误\n  prop: \'TS\'\n};\n\ntype SomeType = {\n  prop: string;\n};\n\n// T2 的 key 必须存在于 T1 里面，且 T2 是 T1 的一部分\ntype StrictType<T1 extends T2, T2> = {\n  [P in keyof T1]: P extends keyof T2 ? T1[P] : never;\n};\n\n// 更改以下函数的类型定义，让它的参数只允许严格 SomeType 类型的值\nfunction takeSomeTypeOnly<T extends SomeType>(x: StrictType<T, SomeType>) {\n  return x;\n}\n\n// 测试用例：\nconst x = { prop: \'a\' };\ntakeSomeTypeOnly(x); // 可以正常调用\n\nconst y = { prop: \'a\', addditionalProp: \'x\' };\ntakeSomeTypeOnly(y); // 将出现编译错误`, `50011135434584790000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> EmptyObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> PropertyKey<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">const</span> shouldPass<span class="token punctuation">:</span> EmptyObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 可以正常赋值</span>\n<span class="token keyword">const</span> shouldFail<span class="token punctuation">:</span> EmptyObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 将出现编译错误</span>\n  prop<span class="token punctuation">:</span> <span class="token string">\'TS\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> SomeType <span class="token operator">=</span> <span class="token punctuation">{</span>\n  prop<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// T2 的 key 必须存在于 T1 里面，且 T2 是 T1 的一部分</span>\n<span class="token keyword">type</span> StrictType<span class="token operator">&lt;</span><span class="token constant">T1</span> <span class="token keyword">extends</span> <span class="token class-name">T2</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T2</span> <span class="token operator">?</span> <span class="token constant">T1</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 更改以下函数的类型定义，让它的参数只允许严格 SomeType 类型的值</span>\n<span class="token keyword">function</span> takeSomeTypeOnly<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">SomeType</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> StrictType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> SomeType<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 测试用例：</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token string">\'a\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">takeSomeTypeOnly</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以正常调用</span>\n\n<span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span> addditionalProp<span class="token punctuation">:</span> <span class="token string">\'x\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">takeSomeTypeOnly</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将出现编译错误</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试八"><a href="#%E6%B5%8B%E8%AF%95%E5%85%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试八</h1>\n<p>定义 NonEmptyArray 工具类型，用于确保数据非空数组。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="93272023150203360000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type NonEmptyArray<T> = // 你的实现代码\n\nconst a: NonEmptyArray<string> = [] // 将出现编译错误\nconst b: NonEmptyArray<string> = [\'Hello TS\'] // 非空数据，正常使用`, `93272023150203360000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> NonEmptyArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">const</span> a<span class="token punctuation">:</span> NonEmptyArray<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 将出现编译错误</span>\n<span class="token keyword">const</span> b<span class="token punctuation">:</span> NonEmptyArray<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Hello TS\'</span><span class="token punctuation">]</span> <span class="token comment">// 非空数据，正常使用</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答一-3"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%B8%80-3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答一</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="48981739055146350000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type NonEmptyArray<T> = [T, ...T[]];`, `48981739055146350000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> NonEmptyArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h2 id="最佳解答二-3"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%BA%8C-3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答二</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="50153721298226880000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type NonEmptyArray<T> = T[] & { 0: T };`, `50153721298226880000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> NonEmptyArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h1 id="测试九"><a href="#%E6%B5%8B%E8%AF%95%E4%B9%9D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试九</h1>\n<p>定义一个 JoinStrArray 工具类型，用于根据指定的 Separator 分隔符，对字符串数组类型进行拼接。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="12963674780688250000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type JoinStrArray<Arr extends string[], Separator extends string, Result extends string = &quot;&quot;> = // 你的实现代码\n\n// 测试用例\ntype Names = [&quot;Sem&quot;, &quot;Lolo&quot;, &quot;Kaquko&quot;]\ntype NamesComma = JoinStrArray<Names, &quot;,&quot;> // &quot;Sem,Lolo,Kaquko&quot;\ntype NamesSpace = JoinStrArray<Names, &quot; &quot;> // &quot;Sem Lolo Kaquko&quot;\ntype NamesStars = JoinStrArray<Names, &quot;⭐️&quot;> // &quot;Sem⭐️Lolo⭐️Kaquko&quot;`, `12963674780688250000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> JoinStrArray<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Separator <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span> Result <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> Names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Sem"</span><span class="token punctuation">,</span> <span class="token string">"Lolo"</span><span class="token punctuation">,</span> <span class="token string">"Kaquko"</span><span class="token punctuation">]</span>\n<span class="token keyword">type</span> NamesComma <span class="token operator">=</span> JoinStrArray<span class="token operator">&lt;</span>Names<span class="token punctuation">,</span> <span class="token string">","</span><span class="token operator">></span> <span class="token comment">// "Sem,Lolo,Kaquko"</span>\n<span class="token keyword">type</span> NamesSpace <span class="token operator">=</span> JoinStrArray<span class="token operator">&lt;</span>Names<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token operator">></span> <span class="token comment">// "Sem Lolo Kaquko"</span>\n<span class="token keyword">type</span> NamesStars <span class="token operator">=</span> JoinStrArray<span class="token operator">&lt;</span>Names<span class="token punctuation">,</span> <span class="token string">"⭐️"</span><span class="token operator">></span> <span class="token comment">// "Sem⭐️Lolo⭐️Kaquko"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-5"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="75466652125614770000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type JoinStrArray<\n  Arr extends string[],\n  Separator extends string\n> = Arr extends [infer A, ...infer B]\n  ? \\`\\${A extends string ? A : \'\'}\\${B extends [string, ...string[]]\n      ? \\`\\${Separator}\\${JoinStrArray<B, Separator>}\\`\n      : \'\'}\\`\n  : \'\';\n\n// 测试用例\ntype Names = [&quot;Sem&quot;, &quot;Lolo&quot;, &quot;Kaquko&quot;];\ntype NamesComma = JoinStrArray<Names, &quot;,&quot;>; // &quot;Sem,Lolo,Kaquko&quot;\ntype NamesSpace = JoinStrArray<Names, &quot; &quot;>; // &quot;Sem Lolo Kaquko&quot;\ntype NamesStars = JoinStrArray<Names, &quot;⭐️&quot;>; // &quot;Sem⭐️Lolo⭐️Kaquko&quot;`, `75466652125614770000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> JoinStrArray<span class="token operator">&lt;</span>\n  Arr <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  Separator <span class="token keyword">extends</span> <span class="token class-name">string</span>\n<span class="token operator">></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span>infer <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token operator">...</span>infer <span class="token constant">B</span><span class="token punctuation">]</span>\n  <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> <span class="token operator">...</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n      <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Separator<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JoinStrArray<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> Separator<span class="token operator">></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> Names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Sem"</span><span class="token punctuation">,</span> <span class="token string">"Lolo"</span><span class="token punctuation">,</span> <span class="token string">"Kaquko"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> NamesComma <span class="token operator">=</span> JoinStrArray<span class="token operator">&lt;</span>Names<span class="token punctuation">,</span> <span class="token string">","</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "Sem,Lolo,Kaquko"</span>\n<span class="token keyword">type</span> NamesSpace <span class="token operator">=</span> JoinStrArray<span class="token operator">&lt;</span>Names<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "Sem Lolo Kaquko"</span>\n<span class="token keyword">type</span> NamesStars <span class="token operator">=</span> JoinStrArray<span class="token operator">&lt;</span>Names<span class="token punctuation">,</span> <span class="token string">"⭐️"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "Sem⭐️Lolo⭐️Kaquko"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试十"><a href="#%E6%B5%8B%E8%AF%95%E5%8D%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试十</h1>\n<p>实现一个 Trim 工具类型，用于对字符串字面量类型进行去空格处理。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="84191647459354430000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Trim<V extends string> = // 你的实现代码\n  // 测试用例\n  Trim<\' semlinker \'>;\n//=> \'semlinker\'`, `84191647459354430000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Trim<span class="token operator">&lt;</span><span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n  <span class="token comment">// 测试用例</span>\n  Trim<span class="token operator">&lt;</span><span class="token string">\' semlinker \'</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">//=> \'semlinker\'</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>提示：可以考虑先定义 TrimLeft 和 TrimRight 工具类型，再组合成 Trim 工具类型。</p>\n<h2 id="最佳解答-6"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<p>infer + 递归</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="50851665460558440000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 实现一个 Trim 工具类型，用于对字符串字面量类型进行去空格处理。具体的使用示例如下所示：\ntype TrimLeft<V extends string> = V extends \\` \\${infer U}\\` ? TrimLeft<U> : V;\ntype TrimRight<V extends string> = V extends \\`\\${infer U} \\` ? TrimRight<U> : V;\ntype Trim<V extends string> = TrimLeft<TrimRight<V>>\n\n// 测试用例\ntype T3 = Trim<\'             semlinker              \'>\n//=> \'semlinker\'`, `50851665460558440000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 实现一个 Trim 工具类型，用于对字符串字面量类型进行去空格处理。具体的使用示例如下所示：</span>\n<span class="token keyword">type</span> TrimLeft<span class="token operator">&lt;</span><span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">U</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimLeft<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token constant">V</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> TrimRight<span class="token operator">&lt;</span><span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">U</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimRight<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token constant">V</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> Trim<span class="token operator">&lt;</span><span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> TrimLeft<span class="token operator">&lt;</span>TrimRight<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">>></span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">T3</span> <span class="token operator">=</span> Trim<span class="token operator">&lt;</span><span class="token string">\'             semlinker              \'</span><span class="token operator">></span>\n<span class="token comment">//=> \'semlinker\'</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试十一"><a href="#%E6%B5%8B%E8%AF%95%E5%8D%81%E4%B8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试十一</h1>\n<p>实现一个 IsEqual 工具类型，用于比较两个类型是否相等。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="6137723770826086000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsEqual<A, B> = // 你的实现代码\n\n// 测试用例\ntype E0 = IsEqual<1, 2>; // false\ntype E1 = IsEqual<{ a: 1 }, { a: 1 }> // true\ntype E2 = IsEqual<[1], []>; // false`, `6137723770826086000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">E0</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">E1</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token operator">></span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">E2</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-4"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="45543051965145900000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsEqual<A, B> = A extends B ? (B extends A ? true : false) : false;\n\n// 测试用例\ntype E0 = IsEqual<1, 2>; // false\ntype E1 = IsEqual<{ a: 1 }, { a: 1 }>; // true\ntype E2 = IsEqual<[1], []>; // false`, `45543051965145900000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">E0</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">E1</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">E2</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-7"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="14660349484316780000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsEqual<A, B> = A extends B ? (B extends A ? true : false) : false;\n\n// 测试用例\ntype A6 = IsEqual<true, boolean>; // boolean\ntype A7 = IsEqual<1 | 2, 1>; // boolean`, `14660349484316780000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">A6</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>\n<span class="token keyword">type</span> <span class="token constant">A7</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// boolean</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>对于这 2 个例子，以上我的解答是不对的，这是由于 泛型和 extends 两者结合产生的 <code class="language-text">distributive conditional types（分布式条件类型）</code> 导致的，这里的 <code class="language-text">boolean</code> 和 <code class="language-text">true | false</code> 等价，即 2 个条件都走了</p>\n<p>给泛型套上一个 <code class="language-text">[]</code>，就可以解决这个问题</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="34354134421733716000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsEqual<A, B> = [A, B] extends [B, A] ? true : false;\n\n// 测试用例\ntype A6 = IsEqual<true, boolean>; // boolean\ntype A7 = IsEqual<1 | 2, 1>; // boolean`, `34354134421733716000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">A6</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>\n<span class="token keyword">type</span> <span class="token constant">A7</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// boolean</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>但是针对 any 还是不行，以下是最终解决方案，具体可参考 <a href="https://github.com/microsoft/TypeScript/issues/27024#issuecomment-510924206" target="_blank" rel="nofollow noreferrer noopener">issue</a></p>\n<p>// TODO IsEqual 具体原理</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="81355918950274760000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsEqual<T, U> = (<G>() => G extends T ? 1 : 2) extends <G>() => G extends U ? 1 : 2 ? true : false;\n\n// 测试用例\ntype E0 = IsEqual<1, 2>; // false\ntype E1 = IsEqual<{ a: 1 }, { a: 1 }>; // true\ntype E2 = IsEqual<[1], []>; // false\n\n// 这里考虑了边缘情况\ntype X = IsEqual<{ x: any }, { x: number }>; // false\ntype A6 = IsEqual<true, boolean>; // false\ntype A7 = IsEqual<1 | 2, 1>; // false`, `81355918950274760000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsEqual<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">G</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">G</span> <span class="token keyword">extends</span> <span class="token class-name">T</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token operator">&lt;</span><span class="token constant">G</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">G</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">E0</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">E1</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">E2</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token comment">// 这里考虑了边缘情况</span>\n<span class="token keyword">type</span> <span class="token constant">X</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">A6</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">A7</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试十二"><a href="#%E6%B5%8B%E8%AF%95%E5%8D%81%E4%BA%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试十二</h1>\n<p>实现一个 Head 工具类型，用于获取数组类型的第一个类型。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="73942538705005500000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Head<T extends Array<any>> = // 你的实现代码\n\n// 测试用例\ntype H0 = Head<[]> // never\ntype H1 = Head<[1]> // 1\ntype H2 = Head<[3, 2]> // 3`, `73942538705005500000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Head<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">H0</span> <span class="token operator">=</span> Head<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// never</span>\n<span class="token keyword">type</span> <span class="token constant">H1</span> <span class="token operator">=</span> Head<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// 1</span>\n<span class="token keyword">type</span> <span class="token constant">H2</span> <span class="token operator">=</span> Head<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// 3</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-5"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="76553930904195380000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Head<T extends Array<any>> = T[0];\n\n// 测试用例\ntype H0 = Head<[]>; // never\ntype H1 = Head<[1]>; // 1\ntype H2 = Head<[3, 2]>; // 3`, `76553930904195380000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Head<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">H0</span> <span class="token operator">=</span> Head<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// never</span>\n<span class="token keyword">type</span> <span class="token constant">H1</span> <span class="token operator">=</span> Head<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token keyword">type</span> <span class="token constant">H2</span> <span class="token operator">=</span> Head<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-8"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="18774238842937405000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Head<T extends Array<any>> = T extends [] ? never : T[0];\n\n// 测试用例\ntype H0 = Head<[]>; // never\ntype H1 = Head<[1]>; // 1\ntype H2 = Head<[3, 2]>; // 3`, `18774238842937405000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Head<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">H0</span> <span class="token operator">=</span> Head<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// never</span>\n<span class="token keyword">type</span> <span class="token constant">H1</span> <span class="token operator">=</span> Head<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token keyword">type</span> <span class="token constant">H2</span> <span class="token operator">=</span> Head<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试十三"><a href="#%E6%B5%8B%E8%AF%95%E5%8D%81%E4%B8%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试十三</h1>\n<p>实现一个 Tail 工具类型，用于获取数组类型除了第一个类型外，剩余的类型。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="93954270698159550000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Tail<T extends Array<any>> =  // 你的实现代码\n\n// 测试用例\ntype T0 = Tail<[]> // []\ntype T1 = Tail<[1, 2]> // [2]\ntype T2 = Tail<[1, 2, 3, 4, 5]> // [2, 3, 4, 5]`, `93954270698159550000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Tail<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">>></span> <span class="token operator">=</span>  <span class="token comment">// 你的实现代码</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">T0</span> <span class="token operator">=</span> Tail<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// []</span>\n<span class="token keyword">type</span> <span class="token constant">T1</span> <span class="token operator">=</span> Tail<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// [2]</span>\n<span class="token keyword">type</span> <span class="token constant">T2</span> <span class="token operator">=</span> Tail<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// [2, 3, 4, 5]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-6"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="60636235750432750000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Tail<T extends Array<any>> = T extends [a: any, ...rest: infer K] ? K : never\n\n// 测试用例\ntype T0 = Tail<[]> // []\ntype T1 = Tail<[1, 2]> // [2]\ntype T2 = Tail<[1, 2, 3, 4, 5]> // [2, 3, 4, 5]`, `60636235750432750000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Tail<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>a<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">:</span> infer <span class="token constant">K</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">T0</span> <span class="token operator">=</span> Tail<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// []</span>\n<span class="token keyword">type</span> <span class="token constant">T1</span> <span class="token operator">=</span> Tail<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// [2]</span>\n<span class="token keyword">type</span> <span class="token constant">T2</span> <span class="token operator">=</span> Tail<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// [2, 3, 4, 5]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-9"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="81698049841813320000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Tail<T extends Array<any>> = T extends [] ? [] : T extends [any, ...(infer K)] ? K : never;\n\n// 测试用例\ntype T0 = Tail<[]>; // []\ntype T1 = Tail<[1, 2]>; // [2]\ntype T2 = Tail<[1, 2, 3, 4, 5]>; // [2, 3, 4, 5]`, `81698049841813320000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Tail<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>infer <span class="token constant">K</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">T0</span> <span class="token operator">=</span> Tail<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// []</span>\n<span class="token keyword">type</span> <span class="token constant">T1</span> <span class="token operator">=</span> Tail<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [2]</span>\n<span class="token keyword">type</span> <span class="token constant">T2</span> <span class="token operator">=</span> Tail<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, 4, 5]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试十四"><a href="#%E6%B5%8B%E8%AF%95%E5%8D%81%E5%9B%9B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试十四</h1>\n<p>实现一个 Unshift 工具类型，用于把指定类型 E 作为第一个元素添加到 T 数组类型中。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="31024496454188343000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Unshift<T extends any[], E> =  // 你的实现代码\n\n// 测试用例\ntype Arr0 = Unshift<[], 1>; // [1]\ntype Arr1 = Unshift<[1, 2, 3], 0>; // [0, 1, 2, 3]`, `31024496454188343000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Unshift<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">></span> <span class="token operator">=</span>  <span class="token comment">// 你的实现代码</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> Arr0 <span class="token operator">=</span> Unshift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>\n<span class="token keyword">type</span> Arr1 <span class="token operator">=</span> Unshift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-7"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="89475568823536240000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Unshift<T extends any[], E> = [E, ...T] extends infer K ? K : never;\n\n// 测试用例\ntype Arr0 = Unshift<[], 1>; // [1]\ntype Arr1 = Unshift<[1, 2, 3], 0>; // [0, 1, 2, 3]`, `89475568823536240000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Unshift<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">E</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">infer</span> <span class="token constant">K</span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> Arr0 <span class="token operator">=</span> Unshift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>\n<span class="token keyword">type</span> Arr1 <span class="token operator">=</span> Unshift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="62759816860530800000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Unshift<T extends any[], E> = [E, ...T];\n\n// 测试用例\ntype Arr0 = Unshift<[], 1>; // [1]\ntype Arr1 = Unshift<[1, 2, 3], 0>; // [0, 1, 2, 3]`, `62759816860530800000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Unshift<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">E</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> Arr0 <span class="token operator">=</span> Unshift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>\n<span class="token keyword">type</span> Arr1 <span class="token operator">=</span> Unshift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试十五"><a href="#%E6%B5%8B%E8%AF%95%E5%8D%81%E4%BA%94" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试十五</h1>\n<p>实现一个 Shift 工具类型，用于移除 T 数组类型中的第一个类型。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="11334101233715431000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Shift<T extends any[]> = // 你的实现代码\n\n// 测试用例\ntype S0 = Shift<[1, 2, 3]>\ntype S1 = Shift<[string,number,boolean]>`, `11334101233715431000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Shift<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">S0</span> <span class="token operator">=</span> Shift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span>\n<span class="token keyword">type</span> <span class="token constant">S1</span> <span class="token operator">=</span> Shift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token punctuation">,</span><span class="token builtin">boolean</span><span class="token punctuation">]</span><span class="token operator">></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-8"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="83298294611014320000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Shift<T extends any[]> = T extends [any, ...(infer R)] ? R : [];\n\n// 测试用例\ntype S0 = Shift<[1, 2, 3]>;\ntype S1 = Shift<[string, number, boolean]>;`, `83298294611014320000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Shift<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>infer <span class="token constant">R</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">S0</span> <span class="token operator">=</span> Shift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token constant">S1</span> <span class="token operator">=</span> Shift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试十六"><a href="#%E6%B5%8B%E8%AF%95%E5%8D%81%E5%85%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试十六</h1>\n<p>实现一个 Push 工具类型，用于把指定类型 E 作为最后一个元素添加到 T 数组类型中。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97626146694730240000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Push<T extends any[], V> = // 你的实现代码\n\n// 测试用例\ntype Arr0 = Push<[], 1> // [1]\ntype Arr1 = Push<[1, 2, 3], 4> // [1, 2, 3, 4]`, `97626146694730240000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Push<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> Arr0 <span class="token operator">=</span> Push<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span> <span class="token comment">// [1]</span>\n<span class="token keyword">type</span> Arr1 <span class="token operator">=</span> Push<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">></span> <span class="token comment">// [1, 2, 3, 4]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-9"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="82634381090061660000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Push<T extends any[], V> = [...T, V];\n\n// 测试用例\ntype Arr0 = Push<[], 1>; // [1]\ntype Arr1 = Push<[1, 2, 3], 4>; // [1, 2, 3, 4]`, `82634381090061660000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Push<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> Arr0 <span class="token operator">=</span> Push<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>\n<span class="token keyword">type</span> Arr1 <span class="token operator">=</span> Push<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试十七"><a href="#%E6%B5%8B%E8%AF%95%E5%8D%81%E4%B8%83" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试十七</h1>\n<p>实现一个 Includes 工具类型，用于判断指定的类型 E 是否包含在 T 数组类型中。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="43295143980794500000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Includes<T extends Array<any>, E> = // 你的实现代码\n\ntype I0 = Includes<[], 1> // false\ntype I1 = Includes<[2, 2, 3, 1], 2> // true\ntype I2 = Includes<[2, 3, 3, 1], 1> // true`, `43295143980794500000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Includes<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-10"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-10" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="73272158210646880000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Includes<T extends Array<any>, E> = E extends T[keyof T] ? true : false;\n// 或 type Includes<T extends Array<any>, E> = E extends T[number] ? true : false\n\ntype I0 = Includes<[], 1>; // false\ntype I1 = Includes<[2, 2, 3, 1], 2>; // true\ntype I2 = Includes<[2, 3, 3, 1], 1>; // true`, `73272158210646880000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Includes<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">E</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token comment">// 或 type Includes&lt;T extends Array&lt;any>, E> = E extends T[number] ? true : false</span>\n\n<span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-10"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-10" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<p>需结合 isEqual 方法</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="24930001030823813000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 实现一个 Includes 工具类型，用于判断指定的类型 E 是否包含在 T 数组类型中。具体的使用示例如下所示：\ntype IsEqual<T, U> = (<G>() => G extends T ? 1 : 2) extends <G>() => G extends U ? 1 : 2 ? true : false;\n\ntype Includes<T extends Array<any>, E> = T extends [infer A, ...(infer B)]\n  ? IsEqual<A, E> extends true\n    ? true\n    : Includes<B, E>\n  : false;\n\ntype I0 = Includes<[], 1>; // false\ntype I1 = Includes<[2, 2, 3, 1], 2>; // true\ntype I2 = Includes<[2, 3, 3, 1], 1>; // true\ntype I3 = Includes<[2 | 3, 3, 3, 1], 2 | 3 | 4>; // false\ntype I4 = Includes<[2 | 3, 3, 3, 1], 2 | 3>; // true\ntype I5 = Includes<[never, 3, 3, 1], never>; // true\ntype I6 = Includes<[never, 3, 3, 1], any>; // false`, `24930001030823813000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 实现一个 Includes 工具类型，用于判断指定的类型 E 是否包含在 T 数组类型中。具体的使用示例如下所示：</span>\n<span class="token keyword">type</span> IsEqual<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">G</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">G</span> <span class="token keyword">extends</span> <span class="token class-name">T</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token operator">&lt;</span><span class="token constant">G</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">G</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Includes<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>infer <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>infer <span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token operator">?</span> IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">true</span>\n    <span class="token operator">?</span> <span class="token boolean">true</span>\n    <span class="token punctuation">:</span> Includes<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">></span>\n  <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">I3</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I4</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">I5</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">I6</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试十八"><a href="#%E6%B5%8B%E8%AF%95%E5%8D%81%E5%85%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试十八</h1>\n<p>实现一个 UnionToIntersection 工具类型，用于把联合类型转换为交叉类型。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="46185863295701840000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type UnionToIntersection<U> = // 你的实现代码\n\n// 测试用例\ntype U0 = UnionToIntersection<string | number> // never\ntype U1 = UnionToIntersection<{ name: string } | { age: number }> // { name: string; } & { age: number; }`, `46185863295701840000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">U0</span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span> <span class="token comment">// never</span>\n<span class="token keyword">type</span> <span class="token constant">U1</span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">></span> <span class="token comment">// { name: string; } &amp; { age: number; }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-11"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-11" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<p>分布式条件类型 + 条件类型推断</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="17597068348183020000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#type-inference-in-conditional-types\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer K) => void ? K : never;\n\n// 测试用例\ntype U0 = UnionToIntersection<string | number>; // never\ntype U1 = UnionToIntersection<{ name: string } | { age: number }>; // { name: string; } & { age: number; }`, `17597068348183020000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#type-inference-in-conditional-types</span>\n<span class="token keyword">type</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">any</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">:</span> <span class="token constant">U</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">:</span> infer <span class="token constant">K</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">type</span> <span class="token constant">U0</span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// never</span>\n<span class="token keyword">type</span> <span class="token constant">U1</span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// { name: string; } &amp; { age: number; }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试十九"><a href="#%E6%B5%8B%E8%AF%95%E5%8D%81%E4%B9%9D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试十九</h1>\n<p>实现一个 OptionalKeys 工具类型，用来获取对象类型中声明的可选属性。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="96806302562305850000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Person = {\n  id: string;\n  name: string;\n  age: number;\n  from?: string;\n  speak?: string;\n};\n\ntype OptionalKeys<T> = // 你的实现代码\ntype PersonOptionalKeys = OptionalKeys<Person> // &quot;from&quot; | &quot;speak&quot;`, `96806302562305850000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token keyword">from</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  speak<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> OptionalKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n<span class="token keyword">type</span> PersonOptionalKeys <span class="token operator">=</span> OptionalKeys<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token comment">// "from" | "speak"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-12"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-12" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="64648975334687450000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Person = {\n  id: string;\n  name: string;\n  age: number;\n  from?: string;\n  speak?: string;\n};\n\ntype OptionalKeys<T> = {\n  [K in keyof T]: {} extends Pick<T, K> ? K : never;\n}[keyof T];\n\ntype PersonOptionalKeys = OptionalKeys<Person>; // &quot;from&quot; | &quot;speak&quot;`, `64648975334687450000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token keyword">from</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  speak<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> OptionalKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">Pick</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> PersonOptionalKeys <span class="token operator">=</span> OptionalKeys<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "from" | "speak"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试二十"><a href="#%E6%B5%8B%E8%AF%95%E4%BA%8C%E5%8D%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试二十</h1>\n<p>实现一个 Curry 工具类型，用来实现函数类型的柯里化处理。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="29254409935135728000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Curry<\n  F extends (...args: any[]) => any,\n  P extends any[] = Parameters<F>,\n  R = ReturnType<F>\n> = // 你的实现代码\n\ntype F0 = Curry<() => Date>; // () => Date\ntype F1 = Curry<(a: number) => Date>; // (arg: number) => Date\ntype F2 = Curry<(a: number, b: string) => Date>; //  (arg_0: number) => (b: string) => Date`, `29254409935135728000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Curry<span class="token operator">&lt;</span>\n  <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n  <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">></span><span class="token punctuation">,</span>\n  <span class="token constant">R</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">></span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">F0</span> <span class="token operator">=</span> Curry<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Date<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// () => Date</span>\n<span class="token keyword">type</span> <span class="token constant">F1</span> <span class="token operator">=</span> Curry<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Date<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// (arg: number) => Date</span>\n<span class="token keyword">type</span> <span class="token constant">F2</span> <span class="token operator">=</span> Curry<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Date<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">//  (arg_0: number) => (b: string) => Date</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-11"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-11" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="92355790366203800000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type FirstAsArray<T extends any[]> = T extends [...(infer A), infer B, infer C]\n  ? A extends []\n    ? T extends [...(infer A), infer B]\n      ? A\n      : never\n    : T extends [...(infer A), infer B]\n    ? FirstAsArray<A>\n    : never\n  : T;\n\ntype Curry<F extends (...args: any[]) => any, P extends any[] = Parameters<F>, R = ReturnType<F>> = P extends [\n  infer A,\n  infer B,\n  ...(infer C)\n]\n  ? P extends [infer A, ...(infer B)]\n    ? Curry<F, FirstAsArray<P>, Curry<F, B, R>>\n    : never\n  : (...args: P) => R;\n\ntype F0 = Curry<() => Date>; // () => Date\ntype F1 = Curry<(a: number) => Date>; // (a: number) => Date\ntype F2 = Curry<(a: number, b: string) => Date>; // (a: number) => (b: string) => Date\ntype F3 = Curry<(a: number, b: string, c: boolean) => Date>; // (a: number) => (b: string) => (c: boolean) => Date`, `92355790366203800000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> FirstAsArray<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">(</span>infer <span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">,</span> infer <span class="token constant">B</span><span class="token punctuation">,</span> infer <span class="token constant">C</span><span class="token punctuation">]</span>\n  <span class="token operator">?</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token operator">?</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">(</span>infer <span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">,</span> infer <span class="token constant">B</span><span class="token punctuation">]</span>\n      <span class="token operator">?</span> <span class="token constant">A</span>\n      <span class="token punctuation">:</span> <span class="token builtin">never</span>\n    <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">(</span>infer <span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">,</span> infer <span class="token constant">B</span><span class="token punctuation">]</span>\n    <span class="token operator">?</span> FirstAsArray<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span>\n    <span class="token punctuation">:</span> <span class="token builtin">never</span>\n  <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Curry<span class="token operator">&lt;</span><span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>\n  infer <span class="token constant">A</span><span class="token punctuation">,</span>\n  infer <span class="token constant">B</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span><span class="token punctuation">(</span>infer <span class="token constant">C</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n  <span class="token operator">?</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>infer <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>infer <span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n    <span class="token operator">?</span> Curry<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token punctuation">,</span> FirstAsArray<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">></span><span class="token punctuation">,</span> Curry<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">>></span>\n    <span class="token punctuation">:</span> <span class="token function-variable function">never</span>\n  <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">R</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">F0</span> <span class="token operator">=</span> Curry<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Date<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// () => Date</span>\n<span class="token keyword">type</span> <span class="token constant">F1</span> <span class="token operator">=</span> Curry<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Date<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// (a: number) => Date</span>\n<span class="token keyword">type</span> <span class="token constant">F2</span> <span class="token operator">=</span> Curry<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Date<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// (a: number) => (b: string) => Date</span>\n<span class="token keyword">type</span> <span class="token constant">F3</span> <span class="token operator">=</span> Curry<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token builtin">boolean</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Date<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// (a: number) => (b: string) => (c: boolean) => Date</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试二十一"><a href="#%E6%B5%8B%E8%AF%95%E4%BA%8C%E5%8D%81%E4%B8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试二十一</h1>\n<p>实现一个 Merge 工具类型，用于把两个类型合并成一个新的类型。第二种类型（SecondType）的 Keys 将会覆盖第一种类型（FirstType）的 Keys。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="18551523364777610000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Foo = {\n   a: number;\n   b: string;\n};\n\ntype Bar = {\n   b: number;\n};\n\ntype Merge<FirstType, SecondType> = // 你的实现代码\n\nconst ab: Merge<Foo, Bar> = { a: 1, b: 2 };`, `18551523364777610000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Foo <span class="token operator">=</span> <span class="token punctuation">{</span>\n   a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   b<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Bar <span class="token operator">=</span> <span class="token punctuation">{</span>\n   b<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Merge<span class="token operator">&lt;</span>FirstType<span class="token punctuation">,</span> SecondType<span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">const</span> ab<span class="token punctuation">:</span> Merge<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> Bar<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-13"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-13" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="63127504254743090000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ExtractKeys<T> = {\n  [K in keyof T]: K;\n}[keyof T];\n\ntype Merge<FirstType, SecondType> = {\n  [K in keyof FirstType]: K extends ExtractKeys<SecondType> ? SecondType[K] : FirstType[K];\n} &\n  SecondType;`, `63127504254743090000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ExtractKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">K</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Merge<span class="token operator">&lt;</span>FirstType<span class="token punctuation">,</span> SecondType<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> FirstType<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">ExtractKeys</span><span class="token operator">&lt;</span>SecondType<span class="token operator">></span> <span class="token operator">?</span> SecondType<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> FirstType<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token operator">&amp;</span>\n  SecondType<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答一-4"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%B8%80-4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答一</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="616555539898255900"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Merge<FirstType, SecondType> = Omit<FirstType, keyof SecondType> & SecondType;`, `616555539898255900`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Merge<span class="token operator">&lt;</span>FirstType<span class="token punctuation">,</span> SecondType<span class="token operator">></span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>FirstType<span class="token punctuation">,</span> <span class="token keyword">keyof</span> SecondType<span class="token operator">></span> <span class="token operator">&amp;</span> SecondType<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h2 id="最佳解答二-4"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%BA%8C-4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答二</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="61224696091419490000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Merge<FirstType, SecondType> = {\n  [K in keyof (FirstType & SecondType)]: K extends keyof SecondType\n    ? SecondType[K]\n    : K extends keyof FirstType\n    ? FirstType[K]\n    : never;\n};`, `61224696091419490000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Merge<span class="token operator">&lt;</span>FirstType<span class="token punctuation">,</span> SecondType<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token punctuation">(</span>FirstType <span class="token operator">&amp;</span> SecondType<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> SecondType\n    <span class="token operator">?</span> SecondType<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n    <span class="token punctuation">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> FirstType\n    <span class="token operator">?</span> FirstType<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n    <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试二十二"><a href="#%E6%B5%8B%E8%AF%95%E4%BA%8C%E5%8D%81%E4%BA%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试二十二</h1>\n<p>实现一个 RequireAtLeastOne 工具类型，它将创建至少含有一个给定 Keys 的类型，其余的 Keys 保持原样。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68306448301210910000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Responder = {\n   text?: () => string;\n   json?: () => string;\n   secure?: boolean;\n};\n\ntype RequireAtLeastOne<\n    ObjectType,\n    KeysType extends keyof ObjectType = keyof ObjectType,\n> = // 你的实现代码\n\n// 表示当前类型至少包含 \'text\' 或 \'json\' 键\nconst responder: RequireAtLeastOne<Responder, \'text\' | \'json\'> = {\n    json: () => \'{&quot;message&quot;: &quot;ok&quot;}\',\n    secure: true\n};`, `68306448301210910000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Responder <span class="token operator">=</span> <span class="token punctuation">{</span>\n   text<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   json<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   secure<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> RequireAtLeastOne<span class="token operator">&lt;</span>\n    ObjectType<span class="token punctuation">,</span>\n    KeysType <span class="token keyword">extends</span> <span class="token class-name">keyof</span> ObjectType <span class="token operator">=</span> <span class="token keyword">keyof</span> ObjectType<span class="token punctuation">,</span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token comment">// 表示当前类型至少包含 \'text\' 或 \'json\' 键</span>\n<span class="token keyword">const</span> responder<span class="token punctuation">:</span> RequireAtLeastOne<span class="token operator">&lt;</span>Responder<span class="token punctuation">,</span> <span class="token string">\'text\'</span> <span class="token operator">|</span> <span class="token string">\'json\'</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">json</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'{"message": "ok"}\'</span><span class="token punctuation">,</span>\n    secure<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答一-5"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%B8%80-5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答一</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="90248872467359070000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 这里利用了联合类型作为泛型是 extends 会分发处理的特性，之后将去掉某个属性的类型与只有某个属性，且必填的类型做交叉合并\ntype RequireAtLeastOne<ObjectType, KeysType extends keyof ObjectType = keyof ObjectType> = KeysType extends string\n  ? Omit<ObjectType, KeysType> & Required<Pick<ObjectType, KeysType>>\n  : never;`, `90248872467359070000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 这里利用了联合类型作为泛型是 extends 会分发处理的特性，之后将去掉某个属性的类型与只有某个属性，且必填的类型做交叉合并</span>\n<span class="token keyword">type</span> RequireAtLeastOne<span class="token operator">&lt;</span>ObjectType<span class="token punctuation">,</span> KeysType <span class="token keyword">extends</span> <span class="token class-name">keyof</span> ObjectType <span class="token operator">=</span> <span class="token keyword">keyof</span> ObjectType<span class="token operator">></span> <span class="token operator">=</span> KeysType <span class="token keyword">extends</span> <span class="token class-name">string</span>\n  <span class="token operator">?</span> Omit<span class="token operator">&lt;</span>ObjectType<span class="token punctuation">,</span> KeysType<span class="token operator">></span> <span class="token operator">&amp;</span> Required<span class="token operator">&lt;</span>Pick<span class="token operator">&lt;</span>ObjectType<span class="token punctuation">,</span> KeysType<span class="token operator">>></span>\n  <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答二-5"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%BA%8C-5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答二</h2>\n<p><code class="language-text">{[k in KeysType]: ...}[KeysType]</code> 具体的作用是取出具体的键值，也就是 <code class="language-text">Required&lt;Pick&lt;ObjectType, k&gt;&gt;</code> 部分</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="9859408322475448000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type RequireAtLeastOne<ObjectType, KeysType extends keyof ObjectType = keyof ObjectType> = Omit<ObjectType, KeysType> &\n  {\n    [K in KeysType]: Required<Pick<ObjectType, K>>;\n  }[KeysType];`, `9859408322475448000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> RequireAtLeastOne<span class="token operator">&lt;</span>ObjectType<span class="token punctuation">,</span> KeysType <span class="token keyword">extends</span> <span class="token class-name">keyof</span> ObjectType <span class="token operator">=</span> <span class="token keyword">keyof</span> ObjectType<span class="token operator">></span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>ObjectType<span class="token punctuation">,</span> KeysType<span class="token operator">></span> <span class="token operator">&amp;</span>\n  <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> KeysType<span class="token punctuation">]</span><span class="token punctuation">:</span> Required<span class="token operator">&lt;</span>Pick<span class="token operator">&lt;</span>ObjectType<span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">[</span>KeysType<span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试二十三"><a href="#%E6%B5%8B%E8%AF%95%E4%BA%8C%E5%8D%81%E4%B8%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试二十三</h1>\n<p>实现一个 RemoveIndexSignature 工具类型，用于移除已有类型中的索引签名。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="69678491247730710000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Foo {\n  [key: string]: any;\n  [key: number]: any;\n  bar(): void;\n}\n\ntype RemoveIndexSignature<T> = // 你的实现代码\n\ntype FooWithOnlyBar = RemoveIndexSignature<Foo>; //{ bar: () => void; }`, `69678491247730710000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> RemoveIndexSignature<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> FooWithOnlyBar <span class="token operator">=</span> RemoveIndexSignature<span class="token operator">&lt;</span>Foo<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">//{ bar: () => void; }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-12"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-12" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<p>这里利用的是 <code class="language-text">[k in as]</code> 的用法。as 过的语法可以直接实现对 k 的判断过滤，基于<code class="language-text">&#39;a&#39; extends string</code> 但 string 没有 <code class="language-text">extends &#39;a&#39;</code>。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="69604184160131520000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type b = &quot;a&quot; extends string ? true : false; // true\ntype c = string extends &quot;a&quot; ? true : false; // false\ntype d = string extends string ? true : false; // true\n\ninterface Foo {\n  [key: string]: any;\n  [key: number]: any;\n  [key: symbol]: any;\n  bar(): void;\n}\n\ntype RemoveIndexSignature<T> = {\n  [K in keyof T as string extends K\n    ? never\n    : number extends K\n    ? never\n    : symbol extends K\n    ? never\n    : K]: T[K];\n};\n\ntype FooWithOnlyBar = RemoveIndexSignature<Foo>; //{ bar: () => void; }`, `69604184160131520000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> b <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> c <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token string">"a"</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> d <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token builtin">symbol</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> RemoveIndexSignature<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name">K</span>\n    <span class="token operator">?</span> <span class="token builtin">never</span>\n    <span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name">K</span>\n    <span class="token operator">?</span> <span class="token builtin">never</span>\n    <span class="token punctuation">:</span> <span class="token builtin">symbol</span> <span class="token keyword">extends</span> <span class="token class-name">K</span>\n    <span class="token operator">?</span> <span class="token builtin">never</span>\n    <span class="token punctuation">:</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> FooWithOnlyBar <span class="token operator">=</span> RemoveIndexSignature<span class="token operator">&lt;</span>Foo<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">//{ bar: () => void; }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试二十四"><a href="#%E6%B5%8B%E8%AF%95%E4%BA%8C%E5%8D%81%E5%9B%9B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试二十四</h1>\n<p>实现一个 Mutable 工具类型，用于移除对象类型上所有属性或部分属性的 readonly 修饰符。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97199059255076390000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Foo = {\n  readonly a: number;\n  readonly b: string;\n  readonly c: boolean;\n};\n\ntype Mutable<T, Keys extends keyof T = keyof T> = // 你的实现代码\n\nconst mutableFoo: Mutable<Foo, \'a\'> = { a: 1, b: \'2\', c: true };\n\nmutableFoo.a = 3; // OK\nmutableFoo.b = \'6\'; // Cannot assign to \'b\' because it is a read-only property.`, `97199059255076390000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Foo <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> b<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> c<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Mutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Keys <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">const</span> mutableFoo<span class="token punctuation">:</span> Mutable<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmutableFoo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\nmutableFoo<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">\'6\'</span><span class="token punctuation">;</span> <span class="token comment">// Cannot assign to \'b\' because it is a read-only property.</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-13"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-13" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="44081746567351160000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Foo = {\n  readonly a: number;\n  readonly b: string;\n  readonly c: boolean;\n};\n\ntype Mutable<T, Keys extends keyof T = keyof T> = {\n  -readonly [K in Keys]: T[K];\n} &\n  Omit<T, Keys>;\n\nconst mutableFoo: Mutable<Foo, \'a\'> = { a: 1, b: \'2\', c: true };\n\nmutableFoo.a = 3; // OK\nmutableFoo.b = \'6\'; // Cannot assign to \'b\' because it is a read-only property.`, `44081746567351160000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Foo <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> b<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> c<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Mutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Keys <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> Keys<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token operator">&amp;</span>\n  Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Keys<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> mutableFoo<span class="token punctuation">:</span> Mutable<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmutableFoo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\nmutableFoo<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">\'6\'</span><span class="token punctuation">;</span> <span class="token comment">// Cannot assign to \'b\' because it is a read-only property.</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试二十五"><a href="#%E6%B5%8B%E8%AF%95%E4%BA%8C%E5%8D%81%E4%BA%94" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试二十五</h1>\n<p>实现一个 IsUnion 工具类型，判断指定的类型是否为联合类型。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="3377742232175462400"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsUnion<T, U = T> = // 你的实现代码\n\ntype I0 = IsUnion<string|number> // true\ntype I1 = IsUnion<string|never> // false\ntype I2 = IsUnion<string|unknown> // false`, `3377742232175462400`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsUnion<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">never</span><span class="token operator">></span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">unknown</span><span class="token operator">></span> <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-14"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-14" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<ol>\n<li>联合类型作为泛型的时候 extends 会触发分发执行</li>\n<li>联合类型 T 写成 <code class="language-text">[T]</code> 就变成了普通类型，extends 的时候不会分发执行</li>\n</ol>\n<p>这里第一步的 T extends any 肯定为真，这个其实就是利用其分发的特性，后面的 <code class="language-text">[T]</code> 就是一个联合类型拆开后的某一个，因此如果是联合类型的话 <code class="language-text">[U] extends [T]</code> 一定为否</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="70468567299932630000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type a = string | number extends string ? true : false; // false\n\ntype IsUnion<T, U = T> = T extends any ? ([U] extends [T] ? false : true) : never;\n\ntype I0 = IsUnion<string | number>; // true\ntype I1 = IsUnion<string | never>; // false\ntype I2 = IsUnion<string | unknown>; // false`, `70468567299932630000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> a <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token keyword">type</span> IsUnion<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">U</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">unknown</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试二十六"><a href="#%E6%B5%8B%E8%AF%95%E4%BA%8C%E5%8D%81%E5%85%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试二十六</h1>\n<p>实现一个 IsNever 工具类型，判断指定的类型是否为 never 类型。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="84215648963226470000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type I0 = IsNever<never>; // true\ntype I1 = IsNever<never | string>; // false\ntype I2 = IsNever<null>; // false`, `84215648963226470000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token builtin">never</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-14"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-14" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="1970501854184170200"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsNever<T> = [T] extends [never] ? true : false;\ntype I0 = IsNever<never>; // true\ntype I1 = IsNever<never | string>; // false\ntype I2 = IsNever<null>; // false`, `1970501854184170200`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsNever<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token builtin">never</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-15"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-15" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<p>利用 isEqual</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="36347816447859140000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsEqual<T, U> = (<G>() => G extends T ? 1 : 2) extends <G>() => G extends U ? 1 : 2 ? true : false;\ntype IsNever<T> = IsEqual<T, never>;\ntype I0 = IsNever<never>; // true\ntype I1 = IsNever<never | string>; // false\ntype I2 = IsNever<null>; // false`, `36347816447859140000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsEqual<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">G</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">G</span> <span class="token keyword">extends</span> <span class="token class-name">T</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token operator">&lt;</span><span class="token constant">G</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">G</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> IsNever<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token builtin">never</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试二十七"><a href="#%E6%B5%8B%E8%AF%95%E4%BA%8C%E5%8D%81%E4%B8%83" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试二十七</h1>\n<p>实现一个 Reverse 工具类型，用于对元组类型中元素的位置颠倒，并返回该数组。元组的第一个元素会变成最后一个，最后一个元素变成第一个。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="7761032038012083000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Reverse<\n  T extends Array<any>,\n  R extends Array<any> = []\n> = // 你的实现代码\n\ntype R0 = Reverse<[]> // []\ntype R1 = Reverse<[1, 2, 3]> // [3, 2, 1]`, `7761032038012083000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Reverse<span class="token operator">&lt;</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span>\n  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">R0</span> <span class="token operator">=</span> Reverse<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// []</span>\n<span class="token keyword">type</span> <span class="token constant">R1</span> <span class="token operator">=</span> Reverse<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// [3, 2, 1]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答一-6"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%B8%80-6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答一</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="85518120074244800000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Reverse<T extends Array<any>, R extends Array<any> = []> = T extends [infer First, ...(infer Rest)]\n  ? Reverse<Rest, [First, ...R]>\n  : R;\n\ntype R0 = Reverse<[]>; // []\ntype R1 = Reverse<[1, 2, 3]>; // [3, 2, 1]`, `85518120074244800000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Reverse<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>infer First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>infer Rest<span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token operator">?</span> Reverse<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token punctuation">[</span>First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">]</span><span class="token operator">></span>\n  <span class="token punctuation">:</span> <span class="token constant">R</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">R0</span> <span class="token operator">=</span> Reverse<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// []</span>\n<span class="token keyword">type</span> <span class="token constant">R1</span> <span class="token operator">=</span> Reverse<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [3, 2, 1]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答二-6"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%BA%8C-6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答二</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="76016258726199850000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Reverse<T extends Array<any>, R extends Array<any> = []> = T extends [infer First, ...(infer Rest)]\n  ? [...Reverse<Rest>, First]\n  : [];\n\ntype R0 = Reverse<[]>; // []\ntype R1 = Reverse<[1, 2, 3]>; // [3, 2, 1]`, `76016258726199850000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Reverse<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>infer First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>infer Rest<span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>Reverse<span class="token operator">&lt;</span>Rest<span class="token operator">></span><span class="token punctuation">,</span> First<span class="token punctuation">]</span>\n  <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">R0</span> <span class="token operator">=</span> Reverse<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// []</span>\n<span class="token keyword">type</span> <span class="token constant">R1</span> <span class="token operator">=</span> Reverse<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [3, 2, 1]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试二十八"><a href="#%E6%B5%8B%E8%AF%95%E4%BA%8C%E5%8D%81%E5%85%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试二十八</h1>\n<p>实现一个 Split 工具类型，根据给定的分隔符（Delimiter）对包含分隔符的字符串进行切割。可用于定义 String.prototype.split 方法的返回值类型。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="26122691082079474000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Item = \'semlinker,lolo,kakuqo\';\n\ntype Split<\n   S extends string,\n   Delimiter extends string,\n> = // 你的实现代码\n\ntype ElementType = Split<Item, \',\'>; // [&quot;semlinker&quot;, &quot;lolo&quot;, &quot;kakuqo&quot;]`, `26122691082079474000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Item <span class="token operator">=</span> <span class="token string">\'semlinker,lolo,kakuqo\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Split<span class="token operator">&lt;</span>\n   <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n   Delimiter <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> ElementType <span class="token operator">=</span> Split<span class="token operator">&lt;</span>Item<span class="token punctuation">,</span> <span class="token string">\',\'</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// ["semlinker", "lolo", "kakuqo"]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-15"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-15" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="2879434586399298600"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Item = \'semlinker,lolo,kakuqo\';\n\ntype Split<\n   S extends string,\n   Delimiter extends string,\n> = S extends \\`\\${infer A}\\${Delimiter}\\${infer B}\\` ? [A, ...Split<B, Delimiter>] : [S]\n\ntype ElementType = Split<Item, \',\'>; // [&quot;semlinker&quot;, &quot;lolo&quot;, &quot;kakuqo&quot;]`, `2879434586399298600`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Item <span class="token operator">=</span> <span class="token string">\'semlinker,lolo,kakuqo\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Split<span class="token operator">&lt;</span>\n   <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n   Delimiter <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">A</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Delimiter<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">B</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token operator">...</span>Split<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> Delimiter<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">]</span>\n\n<span class="token keyword">type</span> ElementType <span class="token operator">=</span> Split<span class="token operator">&lt;</span>Item<span class="token punctuation">,</span> <span class="token string">\',\'</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// ["semlinker", "lolo", "kakuqo"]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试二十九"><a href="#%E6%B5%8B%E8%AF%95%E4%BA%8C%E5%8D%81%E4%B9%9D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试二十九</h1>\n<p>实现一个 ToPath 工具类型，用于把属性访问（. 或 []）路径转换为元组的形式。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="85569416738736200000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ToPath<S extends string> = // 你的实现代码\n\nToPath<\'foo.bar.baz\'> //=> [\'foo\', \'bar\', \'baz\']\nToPath<\'foo[0].bar.baz\'> //=> [\'foo\', \'0\', \'bar\', \'baz\']`, `85569416738736200000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ToPath<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\nToPath<span class="token operator">&lt;</span><span class="token string">\'foo.bar.baz\'</span><span class="token operator">></span> <span class="token comment">//=> [\'foo\', \'bar\', \'baz\']</span>\nToPath<span class="token operator">&lt;</span><span class="token string">\'foo[0].bar.baz\'</span><span class="token operator">></span> <span class="token comment">//=> [\'foo\', \'0\', \'bar\', \'baz\']</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-16"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-16" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="27932893721822950000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ToPath<S extends string> = S extends \\`\\${infer A}.\\${infer B}\\`\n  ? [...ToPath<A>, ...ToPath<B>]\n  : S extends \\`\\${infer A}[\\${infer B}]\\`\n  ? [...ToPath<A>, ...ToPath<B>]\n  : [S];\n\ntype a = ToPath<&quot;foo.bar.baz&quot;>; //=> [\'foo\', \'bar\', \'baz\']\ntype b = ToPath<&quot;foo[0].bar.baz&quot;>; //=> [\'foo\', \'0\', \'bar\', \'baz\']`, `27932893721822950000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ToPath<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">A</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">B</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>ToPath<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">...</span>ToPath<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span><span class="token punctuation">]</span>\n  <span class="token punctuation">:</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">A</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">B</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>ToPath<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">...</span>ToPath<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span><span class="token punctuation">]</span>\n  <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> a <span class="token operator">=</span> ToPath<span class="token operator">&lt;</span><span class="token string">"foo.bar.baz"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">//=> [\'foo\', \'bar\', \'baz\']</span>\n<span class="token keyword">type</span> b <span class="token operator">=</span> ToPath<span class="token operator">&lt;</span><span class="token string">"foo[0].bar.baz"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">//=> [\'foo\', \'0\', \'bar\', \'baz\']</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试三十"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%89%E5%8D%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试三十</h1>\n<p>完善 Chainable 类型的定义，使得 TS 能成功推断出 result 变量的类型。调用 option 方法之后会不断扩展当前对象的类型，使得调用 get 方法后能获取正确的类型。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="51843064427373140000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare const config: Chainable;\n\ntype Chainable = {\n  option(key: string, value: any): any;\n  get(): any;\n};\n\nconst result = config.option(\'age\', 7).option(\'name\', \'lolo\').option(\'address\', { value: \'XiaMen\' }).get();\n\ntype ResultType = typeof result;\n// 期望 ResultType 的类型是：\n// {\n//   age: number\n//   name: string\n//   address: {\n//     value: string\n//   }\n// }`, `51843064427373140000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">const</span> config<span class="token punctuation">:</span> Chainable<span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Chainable <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">option</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> result <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">\'age\'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token string">\'lolo\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">\'address\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">\'XiaMen\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> ResultType <span class="token operator">=</span> <span class="token keyword">typeof</span> result<span class="token punctuation">;</span>\n<span class="token comment">// 期望 ResultType 的类型是：</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   age: number</span>\n<span class="token comment">//   name: string</span>\n<span class="token comment">//   address: {</span>\n<span class="token comment">//     value: string</span>\n<span class="token comment">//   }</span>\n<span class="token comment">// }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-16"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-16" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="22572768841348600000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare const config: Chainable;\n\ntype Chainable<T0 = {}> = {\n  option<T, U>(key: keyof T, value: U): Chainable<T0 & { [P in keyof T]: U }>;\n  get(): T0;\n};\n\nconst result = config.option(\'age\', 7).option(\'name\', \'lolo\').option(\'address\', { value: \'XiaMen\' }).get();\n\ntype ResultType = typeof result;\n// 期望 ResultType 的类型是：\n// {\n//   age: number\n//   name: string\n//   address: {\n//     value: string\n//   }\n// }`, `22572768841348600000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">const</span> config<span class="token punctuation">:</span> Chainable<span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Chainable<span class="token operator">&lt;</span><span class="token constant">T0</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  option<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Chainable<span class="token operator">&lt;</span><span class="token constant">T0</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">U</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span>\n  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> result <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">\'age\'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token string">\'lolo\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">\'address\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">\'XiaMen\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> ResultType <span class="token operator">=</span> <span class="token keyword">typeof</span> result<span class="token punctuation">;</span>\n<span class="token comment">// 期望 ResultType 的类型是：</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   age: number</span>\n<span class="token comment">//   name: string</span>\n<span class="token comment">//   address: {</span>\n<span class="token comment">//     value: string</span>\n<span class="token comment">//   }</span>\n<span class="token comment">// }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试三十一"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%89%E5%8D%81%E4%B8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试三十一</h1>\n<p>实现一个 Repeat 工具类型，用于根据类型变量 C 的值，重复 T 类型并以元组的形式返回新的类型。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="86792086755380400000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Repeat<T, C extends number> = // 你的实现代码\n\ntype R0 = Repeat<0, 0>; // []\ntype R1 = Repeat<1, 1>; // [1]\ntype R2 = Repeat<number, 2>; // [number, number]`, `86792086755380400000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Repeat<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">R0</span> <span class="token operator">=</span> Repeat<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// []</span>\n<span class="token keyword">type</span> <span class="token constant">R1</span> <span class="token operator">=</span> Repeat<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>\n<span class="token keyword">type</span> <span class="token constant">R2</span> <span class="token operator">=</span> Repeat<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [number, number]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-17"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-17" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<p>和 PushArgument 的实现类似</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="39388534426237485000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Repeat<T, C extends number, U extends any[] = []> = U[\'length\'] extends C ? U : Repeat<T, C, [...U, T]>;\n\ntype R0 = Repeat<0, 0>; // []\ntype R1 = Repeat<1, 1>; // [1]\ntype R2 = Repeat<number, 2>; // [number, number]`, `39388534426237485000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Repeat<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token string">\'length\'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">C</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token punctuation">:</span> Repeat<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">R0</span> <span class="token operator">=</span> Repeat<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// []</span>\n<span class="token keyword">type</span> <span class="token constant">R1</span> <span class="token operator">=</span> Repeat<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>\n<span class="token keyword">type</span> <span class="token constant">R2</span> <span class="token operator">=</span> Repeat<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [number, number]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试三十二"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%89%E5%8D%81%E4%BA%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试三十二</h1>\n<p>实现一个 RepeatString 工具类型，用于根据类型变量 C 的值，重复 T 类型并以字符串的形式返回新的类型。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="24898978834622243000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type RepeatString<\n  T extends string,\n  C extends number,\n> = // 你的实现代码\n\ntype S0 = RepeatString<&quot;a&quot;, 0>; // \'\'\ntype S1 = RepeatString<&quot;a&quot;, 2>; // \'aa\'\ntype S2 = RepeatString<&quot;ab&quot;, 3>; // \'ababab\'`, `24898978834622243000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> RepeatString<span class="token operator">&lt;</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n  <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token punctuation">,</span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">S0</span> <span class="token operator">=</span> RepeatString<span class="token operator">&lt;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// \'\'</span>\n<span class="token keyword">type</span> <span class="token constant">S1</span> <span class="token operator">=</span> RepeatString<span class="token operator">&lt;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// \'aa\'</span>\n<span class="token keyword">type</span> <span class="token constant">S2</span> <span class="token operator">=</span> RepeatString<span class="token operator">&lt;</span><span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// \'ababab\'</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-18"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-18" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<p>数字的比较只能利用数组的 length 属性来实现，字符串的 length 属性在 tsc 阶段无法获取到真实长度，只能得到 number 类型。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="22068215809888137000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type RepeatString<\n  T extends string,\n  C extends number,\n  U extends string = \'\',\n  V extends any[] = []\n> = V[\'length\'] extends C ? U : RepeatString<T, C, \\`\\${U}\\${T}\\`, [T, ...V]>\n\ntype S0 = RepeatString<&quot;a&quot;, 0>; // \'\'\ntype S1 = RepeatString<&quot;a&quot;, 2>; // \'aa\'\ntype S2 = RepeatString<&quot;ab&quot;, 3>; // \'ababab\'`, `22068215809888137000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> RepeatString<span class="token operator">&lt;</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n  <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token punctuation">,</span>\n  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n  <span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">V</span><span class="token punctuation">[</span><span class="token string">\'length\'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">C</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token punctuation">:</span> RepeatString<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">U</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">V</span><span class="token punctuation">]</span><span class="token operator">></span>\n\n<span class="token keyword">type</span> <span class="token constant">S0</span> <span class="token operator">=</span> RepeatString<span class="token operator">&lt;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// \'\'</span>\n<span class="token keyword">type</span> <span class="token constant">S1</span> <span class="token operator">=</span> RepeatString<span class="token operator">&lt;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// \'aa\'</span>\n<span class="token keyword">type</span> <span class="token constant">S2</span> <span class="token operator">=</span> RepeatString<span class="token operator">&lt;</span><span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// \'ababab\'</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试三十三"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%89%E5%8D%81%E4%B8%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试三十三</h1>\n<p>实现一个 ToNumber 工具类型，用于实现把数值字符串类型转换为数值类型。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="34185148635647080000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ToNumber<T extends string> = // 你的实现代码\n\ntype T0 = ToNumber<&quot;0&quot;>; // 0\ntype T1 = ToNumber<&quot;10&quot;>; // 10\ntype T2 = ToNumber<&quot;20&quot;>; // 20`, `34185148635647080000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ToNumber<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">T0</span> <span class="token operator">=</span> ToNumber<span class="token operator">&lt;</span><span class="token string">"0"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token keyword">type</span> <span class="token constant">T1</span> <span class="token operator">=</span> ToNumber<span class="token operator">&lt;</span><span class="token string">"10"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 10</span>\n<span class="token keyword">type</span> <span class="token constant">T2</span> <span class="token operator">=</span> ToNumber<span class="token operator">&lt;</span><span class="token string">"20"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 20</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-19"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-19" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<p>首先利用 TS 模板字符串把默认数组 S 的长度转为字符串，之后那这个字符串和 T 比较，若相等，表示当前 S 的长度和传入的字符串所对应的数值相等 (如，“15” —> 15)，否则增加 S 的长度，进行下一次 ToNumber 判断</p>\n<p>不过这种方式可能会出现一个警告：<code class="language-text">Type instantiation is excessively deep and possibly infinite. ts(2589)</code>，因为字符串过大时，可能会导致递归次数变多，个人认为可以忽略此错误</p>\n<p>基本上，这种和数组有关系的类型，都需要构建一个辅助数组来进行判断</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="14175427388130046000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ToNumber<T extends string, S extends any[] = [], L extends number = S[\'length\']> =\n  \\`\\${L}\\` extends T ? L : ToNumber<T, [...S, any]>\n\ntype T0 = ToNumber<&quot;0&quot;>; // 0\ntype T1 = ToNumber<&quot;10&quot;>; // 10\ntype T2 = ToNumber<&quot;20&quot;>; // 20`, `14175427388130046000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ToNumber<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name">number</span> <span class="token operator">=</span> <span class="token constant">S</span><span class="token punctuation">[</span><span class="token string">\'length\'</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token keyword">extends</span> <span class="token class-name">T</span> <span class="token operator">?</span> <span class="token constant">L</span> <span class="token punctuation">:</span> ToNumber<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">]</span><span class="token operator">></span>\n\n<span class="token keyword">type</span> <span class="token constant">T0</span> <span class="token operator">=</span> ToNumber<span class="token operator">&lt;</span><span class="token string">"0"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token keyword">type</span> <span class="token constant">T1</span> <span class="token operator">=</span> ToNumber<span class="token operator">&lt;</span><span class="token string">"10"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 10</span>\n<span class="token keyword">type</span> <span class="token constant">T2</span> <span class="token operator">=</span> ToNumber<span class="token operator">&lt;</span><span class="token string">"20"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 20</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试三十四"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%89%E5%8D%81%E5%9B%9B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试三十四</h1>\n<p>实现一个 SmallerThan 工具类型，用于比较数值类型的大小。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="84064531920772970000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type SmallerThan<\n  N extends number,\n  M extends number,\n> = // 你的实现代码\n\ntype S0 = SmallerThan<0, 1>; // true\ntype S1 = SmallerThan<2, 0>; // false\ntype S2 = SmallerThan<8, 10>; // true`, `84064531920772970000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> SmallerThan<span class="token operator">&lt;</span>\n  <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token punctuation">,</span>\n  <span class="token constant">M</span> <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token punctuation">,</span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">S0</span> <span class="token operator">=</span> SmallerThan<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">S1</span> <span class="token operator">=</span> SmallerThan<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">S2</span> <span class="token operator">=</span> SmallerThan<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-20"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-20" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<p>依然是利用构造数组的长度来判断，体用递归逐步迭代，先和哪个数匹配上，哪个数就小，注意边界问题。这里要求的是第一个数小，如果相等，返回自然是 false</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="44128450948868610000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type SmallerThan<N extends number, M extends number, A extends any[] = []> = A[\'length\'] extends M\n  ? false\n  : A[\'length\'] extends N\n  ? true\n  : SmallerThan<N, M, [...A, any]>;\n\ntype S0 = SmallerThan<0, 1>; // true\ntype S1 = SmallerThan<2, 0>; // false\ntype S2 = SmallerThan<8, 10>; // true\ntype S3 = SmallerThan<8, 8>; // false`, `44128450948868610000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> SmallerThan<span class="token operator">&lt;</span><span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token punctuation">,</span> <span class="token constant">M</span> <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token punctuation">,</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token string">\'length\'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">M</span>\n  <span class="token operator">?</span> <span class="token boolean">false</span>\n  <span class="token punctuation">:</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token string">\'length\'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">N</span>\n  <span class="token operator">?</span> <span class="token boolean">true</span>\n  <span class="token punctuation">:</span> SmallerThan<span class="token operator">&lt;</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">S0</span> <span class="token operator">=</span> SmallerThan<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">S1</span> <span class="token operator">=</span> SmallerThan<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">S2</span> <span class="token operator">=</span> SmallerThan<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">S3</span> <span class="token operator">=</span> SmallerThan<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试三十五"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%89%E5%8D%81%E4%BA%94" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试三十五</h1>\n<p>实现一个 Add 工具类型，用于实现对数值类型对应的数值进行加法运算。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="89256856649302700000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Add<T, R> = // 你的实现代码\n\ntype A0 = Add<5, 5>; // 10\ntype A1 = Add<8, 20> // 28\ntype A2 = Add<10, 30>; // 40`, `89256856649302700000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Add<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">A0</span> <span class="token operator">=</span> Add<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 10</span>\n<span class="token keyword">type</span> <span class="token constant">A1</span> <span class="token operator">=</span> Add<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token operator">></span> <span class="token comment">// 28</span>\n<span class="token keyword">type</span> <span class="token constant">A2</span> <span class="token operator">=</span> Add<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 40</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-21"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-21" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="45931637202883250000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Repeat<T, C extends number, U extends any[] = []> = U[\'length\'] extends C ? U : Repeat<T, C, [...U, T]>;\n\ntype Add<T extends number, R extends number> = [...Repeat<any, T>, ...Repeat<any, R>][\'length\'];\n\ntype A0 = Add<5, 5>; // 10\ntype A1 = Add<8, 20>; // 28\ntype A2 = Add<10, 30>; // 40`, `45931637202883250000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Repeat<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token string">\'length\'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">C</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token punctuation">:</span> Repeat<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Add<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>Repeat<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">...</span>Repeat<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">\'length\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">A0</span> <span class="token operator">=</span> Add<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 10</span>\n<span class="token keyword">type</span> <span class="token constant">A1</span> <span class="token operator">=</span> Add<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 28</span>\n<span class="token keyword">type</span> <span class="token constant">A2</span> <span class="token operator">=</span> Add<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 40</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试三十六"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%89%E5%8D%81%E5%85%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试三十六</h1>\n<p>实现一个 Filter 工具类型，用于根据类型变量 F 的值进行类型过滤。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="65539703932244950000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Filter<T extends any[], F> = // 你的实现代码\n\ntype F0 = Filter<[6, &quot;lolo&quot;, 7, &quot;semlinker&quot;, false], number>; // [6, 7]\ntype F1 = Filter<[&quot;kakuqo&quot;, 2, [&quot;ts&quot;], &quot;lolo&quot;], string>; // [&quot;kakuqo&quot;, &quot;lolo&quot;]\ntype F2 = Filter<[0, true, any, &quot;abao&quot;], string>; // [any, &quot;abao&quot;]`, `65539703932244950000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Filter<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">F0</span> <span class="token operator">=</span> Filter<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"lolo"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"semlinker"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [6, 7]</span>\n<span class="token keyword">type</span> <span class="token constant">F1</span> <span class="token operator">=</span> Filter<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">"kakuqo"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"lolo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// ["kakuqo", "lolo"]</span>\n<span class="token keyword">type</span> <span class="token constant">F2</span> <span class="token operator">=</span> Filter<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token string">"abao"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [any, "abao"]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-22"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-22" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="45773795660818470000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Filter<T extends any[], F> = T extends [infer A, ...(infer B)]\n  ? [A] extends [F]\n    ? [A, ...Filter<B, F>]\n    : Filter<B, F>\n  : [];\n\ntype F0 = Filter<[6, \'lolo\', 7, \'semlinker\', false], number>; // [6, 7]\ntype F1 = Filter<[\'kakuqo\', 2, [\'ts\'], \'lolo\'], string>; // [&quot;kakuqo&quot;, &quot;lolo&quot;]\ntype F2 = Filter<[0, true, any, \'abao\'], string>; // [any, &quot;abao&quot;]\ntype F3 = Filter<[never, number | string, any, \'abao\'], string>; // [never, any, &quot;abao&quot;]`, `45773795660818470000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Filter<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>infer <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>infer <span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">F</span><span class="token punctuation">]</span>\n    <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token operator">...</span>Filter<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token operator">></span><span class="token punctuation">]</span>\n    <span class="token punctuation">:</span> Filter<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token operator">></span>\n  <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">F0</span> <span class="token operator">=</span> Filter<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">\'lolo\'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">\'semlinker\'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [6, 7]</span>\n<span class="token keyword">type</span> <span class="token constant">F1</span> <span class="token operator">=</span> Filter<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">\'kakuqo\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'ts\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\'lolo\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// ["kakuqo", "lolo"]</span>\n<span class="token keyword">type</span> <span class="token constant">F2</span> <span class="token operator">=</span> Filter<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token string">\'abao\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [any, "abao"]</span>\n<span class="token keyword">type</span> <span class="token constant">F3</span> <span class="token operator">=</span> Filter<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">,</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token string">\'abao\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [never, any, "abao"]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试三十七"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%89%E5%8D%81%E4%B8%83" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试三十七</h1>\n<p>实现一个 Flat 工具类型，支持把数组类型拍平（扁平化）。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="74601317092987980000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Flat<T extends any[]> = // 你的实现代码\n\ntype F0 = Flat<[]> // []\ntype F1 = Flat<[\'a\', \'b\', \'c\']> // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\ntype F2 = Flat<[\'a\', [\'b\', \'c\'], [\'d\', [\'e\', [\'f\']]]]> // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]`, `74601317092987980000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Flat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">F0</span> <span class="token operator">=</span> Flat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// []</span>\n<span class="token keyword">type</span> <span class="token constant">F1</span> <span class="token operator">=</span> Flat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// ["a", "b", "c"]</span>\n<span class="token keyword">type</span> <span class="token constant">F2</span> <span class="token operator">=</span> Flat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'d\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'e\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'f\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// ["a", "b", "c", "d", "e", "f"]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-23"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-23" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="24342894745456810000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Flat<T extends any[]> = T extends [infer U, ...(infer V)]\n  ? U extends any[]\n    ? [...Flat<U>, ...Flat<V>]\n    : [U, ...Flat<V>]\n  : [];\n\ntype F0 = Flat<[]>; // []\ntype F1 = Flat<[\'a\', \'b\', \'c\']>; // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\ntype F2 = Flat<[\'a\', [\'b\', \'c\'], [\'d\', [\'e\', [\'f\']]]]>; // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]`, `24342894745456810000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Flat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>infer <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>infer <span class="token constant">V</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token operator">?</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>Flat<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">...</span>Flat<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">></span><span class="token punctuation">]</span>\n    <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span>Flat<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">></span><span class="token punctuation">]</span>\n  <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">F0</span> <span class="token operator">=</span> Flat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// []</span>\n<span class="token keyword">type</span> <span class="token constant">F1</span> <span class="token operator">=</span> Flat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// ["a", "b", "c"]</span>\n<span class="token keyword">type</span> <span class="token constant">F2</span> <span class="token operator">=</span> Flat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'d\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'e\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'f\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// ["a", "b", "c", "d", "e", "f"]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试三十八"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%89%E5%8D%81%E5%85%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试三十八</h1>\n<p>实现 StartsWith 工具类型，判断字符串字面量类型 T 是否以给定的字符串字面量类型 U 开头，并根据判断结果返回布尔值。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="83916963844268600000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type StartsWith<T extends string, U extends string> = // 你的实现代码\n\ntype S0 = StartsWith<\'123\', \'12\'> // true\ntype S1 = StartsWith<\'123\', \'13\'> // false\ntype S2 = StartsWith<\'123\', \'1234\'> // false`, `83916963844268600000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> StartsWith<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">S0</span> <span class="token operator">=</span> StartsWith<span class="token operator">&lt;</span><span class="token string">\'123\'</span><span class="token punctuation">,</span> <span class="token string">\'12\'</span><span class="token operator">></span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">S1</span> <span class="token operator">=</span> StartsWith<span class="token operator">&lt;</span><span class="token string">\'123\'</span><span class="token punctuation">,</span> <span class="token string">\'13\'</span><span class="token operator">></span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">S2</span> <span class="token operator">=</span> StartsWith<span class="token operator">&lt;</span><span class="token string">\'123\'</span><span class="token punctuation">,</span> <span class="token string">\'1234\'</span><span class="token operator">></span> <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>此外，继续实现 EndsWith 工具类型，判断字符串字面量类型 T 是否以给定的字符串字面量类型 U 结尾，并根据判断结果返回布尔值。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="83950450909833330000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type EndsWith<T extends string, U extends string> = // 你的实现代码\n\ntype E0 = EndsWith<\'123\', \'23\'> // true\ntype E1 = EndsWith<\'123\', \'13\'> // false\ntype E2 = EndsWith<\'123\', \'123\'> // true`, `83950450909833330000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> EndsWith<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">E0</span> <span class="token operator">=</span> EndsWith<span class="token operator">&lt;</span><span class="token string">\'123\'</span><span class="token punctuation">,</span> <span class="token string">\'23\'</span><span class="token operator">></span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">E1</span> <span class="token operator">=</span> EndsWith<span class="token operator">&lt;</span><span class="token string">\'123\'</span><span class="token punctuation">,</span> <span class="token string">\'13\'</span><span class="token operator">></span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">E2</span> <span class="token operator">=</span> EndsWith<span class="token operator">&lt;</span><span class="token string">\'123\'</span><span class="token punctuation">,</span> <span class="token string">\'123\'</span><span class="token operator">></span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-17"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-17" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="18649149483297587000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type StartsWith<T extends string, U extends string> = T extends \\`\\${U}\\${string}\\`\n  ? true\n  : false;\n\ntype S0 = StartsWith<&quot;123&quot;, &quot;12&quot;>; // true\ntype S1 = StartsWith<&quot;123&quot;, &quot;13&quot;>; // false\ntype S2 = StartsWith<&quot;123&quot;, &quot;1234&quot;>; // false\n\ntype EndsWith<T extends string, U extends string> = T extends \\`\\${string}\\${U}\\`\n  ? true\n  : false;\n\ntype E0 = EndsWith<&quot;123&quot;, &quot;23&quot;>; // true\ntype E1 = EndsWith<&quot;123&quot;, &quot;13&quot;>; // false\ntype E2 = EndsWith<&quot;123&quot;, &quot;123&quot;>; // true`, `18649149483297587000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> StartsWith<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">U</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>string<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token boolean">true</span>\n  <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">S0</span> <span class="token operator">=</span> StartsWith<span class="token operator">&lt;</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">S1</span> <span class="token operator">=</span> StartsWith<span class="token operator">&lt;</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">S2</span> <span class="token operator">=</span> StartsWith<span class="token operator">&lt;</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token keyword">type</span> EndsWith<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>string<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">U</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token boolean">true</span>\n  <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">E0</span> <span class="token operator">=</span> EndsWith<span class="token operator">&lt;</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">E1</span> <span class="token operator">=</span> EndsWith<span class="token operator">&lt;</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">E2</span> <span class="token operator">=</span> EndsWith<span class="token operator">&lt;</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试三十九"><a href="#%E6%B5%8B%E8%AF%95%E4%B8%89%E5%8D%81%E4%B9%9D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试三十九</h1>\n<p>实现 IsAny 工具类型，用于判断类型 T 是否为 any 类型。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68471466462332445000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsAny<T> = // 你的实现代码\n\ntype I0 = IsAny<never> // false\ntype I1 = IsAny<unknown> // false\ntype I2 = IsAny<any> // true`, `68471466462332445000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsAny<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">></span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">></span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答一-7"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%B8%80-7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答一</h2>\n<p>利用任何类型和 any 交叉都等于 any 来实现。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="47680044463838580000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsAny<T> = 0 extends 1 & T ? true : false;\n\ntype I0 = IsAny<never>; // false\ntype I1 = IsAny<unknown>; // false\ntype I2 = IsAny<any>; // true`, `47680044463838580000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsAny<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">extends</span> <span class="token class-name">1</span> <span class="token operator">&amp;</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答二-7"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94%E4%BA%8C-7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答二</h2>\n<p>unknown 只能赋给 unknown 或者 any</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="18722112692243020000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsAny<T> = [unknown] extends [T] ? ([T] extends [string] ? true : false) : false;\n\ntype I0 = IsAny<never>; // false\ntype I1 = IsAny<unknown>; // false\ntype I2 = IsAny<any>; // true`, `18722112692243020000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsAny<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试四十"><a href="#%E6%B5%8B%E8%AF%95%E5%9B%9B%E5%8D%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试四十</h1>\n<p>实现 AnyOf 工具类型，只要数组中任意元素的类型非 Falsy 类型、 {} 类型或 [] 类型，则返回 true，否则返回 false。如果数组为空的话，则返回 false。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="61340316755726480000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type AnyOf<T extends any[]> = // 你的实现代码\n\ntype A0 = AnyOf<[]>; // false\ntype A1 = AnyOf<[0, &quot;&quot;, false, [], {}]> // false\ntype A2 = AnyOf<[1, &quot;&quot;, false, [], {}]> // true`, `61340316755726480000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> AnyOf<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">A0</span> <span class="token operator">=</span> AnyOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">A1</span> <span class="token operator">=</span> AnyOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">A2</span> <span class="token operator">=</span> AnyOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-24"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-24" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="51015719475604280000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type NotEmptyObject<T> = T extends {} ? ({} extends T ? false : true) : true;\ntype Flasy = 0 | \'\' | false | [];\ntype AnyOf<T extends any[]> = T extends [infer First, ...(infer Rest)]\n  ? [First] extends [Flasy]\n    ? AnyOf<Rest>\n    : NotEmptyObject<First>\n  : false;\n\ntype A0 = AnyOf<[]>; // false\ntype A1 = AnyOf<[0, \'\', false, [], {}]>; // false\ntype A2 = AnyOf<[1, \'\', false, [], {}]>; // true\ntype A3 = AnyOf<[0, \'\' | 2, false, [], {}]>; // true`, `51015719475604280000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> NotEmptyObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">T</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> Flasy <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token string">\'\'</span> <span class="token operator">|</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> AnyOf<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>infer First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>infer Rest<span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token operator">?</span> <span class="token punctuation">[</span>First<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>Flasy<span class="token punctuation">]</span>\n    <span class="token operator">?</span> AnyOf<span class="token operator">&lt;</span>Rest<span class="token operator">></span>\n    <span class="token punctuation">:</span> NotEmptyObject<span class="token operator">&lt;</span>First<span class="token operator">></span>\n  <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">A0</span> <span class="token operator">=</span> AnyOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">A1</span> <span class="token operator">=</span> AnyOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">type</span> <span class="token constant">A2</span> <span class="token operator">=</span> AnyOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> <span class="token constant">A3</span> <span class="token operator">=</span> AnyOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">\'\'</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试四十一"><a href="#%E6%B5%8B%E8%AF%95%E5%9B%9B%E5%8D%81%E4%B8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试四十一</h1>\n<p>实现 Replace 工具类型，用于实现字符串类型的替换操作。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="35524863857833644000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Replace<\n  S extends string,\n  From extends string,\n  To extends string\n> = // 你的实现代码\n\ntype R0 = Replace<\'\', \'\', \'\'> // \'\'\ntype R1 = Replace<\'foobar\', \'bar\', \'foo\'> // &quot;foofoo&quot;\ntype R2 = Replace<\'foobarbar\', \'bar\', \'foo\'> // &quot;foofoobar&quot;`, `35524863857833644000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Replace<span class="token operator">&lt;</span>\n  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n  From <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n  To <span class="token keyword">extends</span> <span class="token class-name">string</span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">R0</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token operator">></span> <span class="token comment">// \'\'</span>\n<span class="token keyword">type</span> <span class="token constant">R1</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">\'foobar\'</span><span class="token punctuation">,</span> <span class="token string">\'bar\'</span><span class="token punctuation">,</span> <span class="token string">\'foo\'</span><span class="token operator">></span> <span class="token comment">// "foofoo"</span>\n<span class="token keyword">type</span> <span class="token constant">R2</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">\'foobarbar\'</span><span class="token punctuation">,</span> <span class="token string">\'bar\'</span><span class="token punctuation">,</span> <span class="token string">\'foo\'</span><span class="token operator">></span> <span class="token comment">// "foofoobar"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>此外，继续实现 ReplaceAll 工具类型，用于实现替换所有满足条件的子串。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="59546044463376150000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ReplaceAll<\n  S extends string,\n  From extends string,\n  To extends string\n> = // 你的实现代码\n\ntype R0 = ReplaceAll<\'\', \'\', \'\'> // \'\'\ntype R1 = ReplaceAll<\'barfoo\', \'bar\', \'foo\'> // &quot;foofoo&quot;\ntype R2 = ReplaceAll<\'foobarbar\', \'bar\', \'foo\'> // &quot;foofoofoo&quot;\ntype R3 = ReplaceAll<\'foobarfoobar\', \'ob\', \'b\'> // &quot;fobarfobar&quot;`, `59546044463376150000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ReplaceAll<span class="token operator">&lt;</span>\n  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n  From <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n  To <span class="token keyword">extends</span> <span class="token class-name">string</span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> <span class="token constant">R0</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token operator">></span> <span class="token comment">// \'\'</span>\n<span class="token keyword">type</span> <span class="token constant">R1</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">\'barfoo\'</span><span class="token punctuation">,</span> <span class="token string">\'bar\'</span><span class="token punctuation">,</span> <span class="token string">\'foo\'</span><span class="token operator">></span> <span class="token comment">// "foofoo"</span>\n<span class="token keyword">type</span> <span class="token constant">R2</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">\'foobarbar\'</span><span class="token punctuation">,</span> <span class="token string">\'bar\'</span><span class="token punctuation">,</span> <span class="token string">\'foo\'</span><span class="token operator">></span> <span class="token comment">// "foofoofoo"</span>\n<span class="token keyword">type</span> <span class="token constant">R3</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">\'foobarfoobar\'</span><span class="token punctuation">,</span> <span class="token string">\'ob\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token operator">></span> <span class="token comment">// "fobarfobar"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-18"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-18" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="73666721747843520000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Replace<\n  S extends string,\n  From extends string,\n  To extends string\n> = S extends \\`\\${infer Head}\\${From}\\${infer Tail}\\` ? \\`\\${Head}\\${To}\\${Tail}\\` : S;\n\ntype R0 = Replace<&quot;&quot;, &quot;&quot;, &quot;&quot;>; // \'\'\ntype R1 = Replace<&quot;foobar&quot;, &quot;bar&quot;, &quot;foo&quot;>; // &quot;foofoo&quot;\ntype R2 = Replace<&quot;foobarbar&quot;, &quot;bar&quot;, &quot;foo&quot;>; // &quot;foofoobar&quot;\n\ntype ReplaceAll<\n  S extends string,\n  From extends string,\n  To extends string\n> = S extends \\`\\${infer Head}\\${From}\\${infer Tail}\\`\n  ? \\`\\${ReplaceAll<Head, From, To>}\\${To}\\${ReplaceAll<Tail, From, To>}\\`\n  : S;\n\ntype R0 = ReplaceAll<&quot;&quot;, &quot;&quot;, &quot;&quot;>; // \'\'\ntype R1 = ReplaceAll<&quot;barfoo&quot;, &quot;bar&quot;, &quot;foo&quot;>; // &quot;foofoo&quot;\ntype R2 = ReplaceAll<&quot;foobarbar&quot;, &quot;bar&quot;, &quot;foo&quot;>; // &quot;foofoofoo&quot;\ntype R3 = ReplaceAll<&quot;foobarfoobar&quot;, &quot;ob&quot;, &quot;b&quot;>; // &quot;fobarfobar&quot;`, `73666721747843520000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Replace<span class="token operator">&lt;</span>\n  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n  From <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n  To <span class="token keyword">extends</span> <span class="token class-name">string</span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer Head<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>From<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer Tail<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Head<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>To<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Tail<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">:</span> <span class="token constant">S</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">R0</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// \'\'</span>\n<span class="token keyword">type</span> <span class="token constant">R1</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">"foobar"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"foo"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "foofoo"</span>\n<span class="token keyword">type</span> <span class="token constant">R2</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">"foobarbar"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"foo"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "foofoobar"</span>\n\n<span class="token keyword">type</span> ReplaceAll<span class="token operator">&lt;</span>\n  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n  From <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>\n  To <span class="token keyword">extends</span> <span class="token class-name">string</span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer Head<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>From<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer Tail<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ReplaceAll<span class="token operator">&lt;</span>Head<span class="token punctuation">,</span> From<span class="token punctuation">,</span> To<span class="token operator">></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>To<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ReplaceAll<span class="token operator">&lt;</span>Tail<span class="token punctuation">,</span> From<span class="token punctuation">,</span> To<span class="token operator">></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">:</span> <span class="token constant">S</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">R0</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// \'\'</span>\n<span class="token keyword">type</span> <span class="token constant">R1</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">"barfoo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"foo"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "foofoo"</span>\n<span class="token keyword">type</span> <span class="token constant">R2</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">"foobarbar"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"foo"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "foofoofoo"</span>\n<span class="token keyword">type</span> <span class="token constant">R3</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">"foobarfoobar"</span><span class="token punctuation">,</span> <span class="token string">"ob"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "fobarfobar"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试四十二"><a href="#%E6%B5%8B%E8%AF%95%E5%9B%9B%E5%8D%81%E4%BA%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试四十二</h1>\n<p>实现 IndexOf 工具类型，用于获取数组类型中指定项的索引值。若不存在的话，则返回 -1 字面量类型。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="18867313716324508000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IndexOf<A extends any[], Item> = // 你的实现代码\n\ntype Arr = [1, 2, 3, 4, 5]\ntype I0 = IndexOf<Arr, 0> // -1\ntype I1 = IndexOf<Arr, 1> // 0\ntype I2 = IndexOf<Arr, 3> // 2`, `18867313716324508000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IndexOf<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Item<span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token keyword">type</span> Arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> IndexOf<span class="token operator">&lt;</span>Arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">></span> <span class="token comment">// -1</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> IndexOf<span class="token operator">&lt;</span>Arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span> <span class="token comment">// 0</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> IndexOf<span class="token operator">&lt;</span>Arr<span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">></span> <span class="token comment">// 2</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-19"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-19" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="89574056229146890000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsEqual<T, U> = (<G>() => G extends T ? 1 : 2) extends <G>() => G extends U ? 1 : 2 ? true : false;\n\ntype IndexOf<A extends any[], Item, U extends any[] = []> = A extends [infer First, ...(infer Rest)]\n  ? IsEqual<First, Item> extends true\n    ? U[\'length\']\n    : IndexOf<Rest, Item, [...U, First]>\n  : -1;\n\ntype Arr = [1, 2, 3, 4, 5];\ntype I0 = IndexOf<Arr, 0>; // -1\ntype I1 = IndexOf<Arr, 1>; // 0\ntype I2 = IndexOf<Arr, 3>; // 2`, `89574056229146890000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsEqual<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">G</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">G</span> <span class="token keyword">extends</span> <span class="token class-name">T</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token operator">&lt;</span><span class="token constant">G</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">G</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> IndexOf<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Item<span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>infer First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>infer Rest<span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token operator">?</span> IsEqual<span class="token operator">&lt;</span>First<span class="token punctuation">,</span> Item<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">true</span>\n    <span class="token operator">?</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token string">\'length\'</span><span class="token punctuation">]</span>\n    <span class="token punctuation">:</span> IndexOf<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> Item<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> First<span class="token punctuation">]</span><span class="token operator">></span>\n  <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token constant">I0</span> <span class="token operator">=</span> IndexOf<span class="token operator">&lt;</span>Arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\n<span class="token keyword">type</span> <span class="token constant">I1</span> <span class="token operator">=</span> IndexOf<span class="token operator">&lt;</span>Arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token keyword">type</span> <span class="token constant">I2</span> <span class="token operator">=</span> IndexOf<span class="token operator">&lt;</span>Arr<span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试四十三"><a href="#%E6%B5%8B%E8%AF%95%E5%9B%9B%E5%8D%81%E4%B8%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试四十三</h1>\n<p>实现一个 Permutation 工具类型，当输入一个联合类型时，返回一个包含该联合类型的全排列类型数组。具体的使用示例如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="31683094631911410000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Permutation<T, K=T> = // 你的实现代码\n\n// [&quot;a&quot;, &quot;b&quot;] | [&quot;b&quot;, &quot;a&quot;]\ntype P0 = Permutation<\'a\' | \'b\'>  // [\'a\', \'b\'] | [\'b\' | \'a\']\n// type P1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] | [&quot;a&quot;, &quot;c&quot;, &quot;b&quot;] | [&quot;b&quot;, &quot;a&quot;, &quot;c&quot;]\n// | [&quot;b&quot;, &quot;c&quot;, &quot;a&quot;] | [&quot;c&quot;, &quot;a&quot;, &quot;b&quot;] | [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]\ntype P1 = Permutation<\'a\' | \'b\' | \'c\'>`, `31683094631911410000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Permutation<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">=</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token comment">// 你的实现代码</span>\n\n<span class="token comment">// ["a", "b"] | ["b", "a"]</span>\n<span class="token keyword">type</span> <span class="token constant">P0</span> <span class="token operator">=</span> Permutation<span class="token operator">&lt;</span><span class="token string">\'a\'</span> <span class="token operator">|</span> <span class="token string">\'b\'</span><span class="token operator">></span>  <span class="token comment">// [\'a\', \'b\'] | [\'b\' | \'a\']</span>\n<span class="token comment">// type P1 = ["a", "b", "c"] | ["a", "c", "b"] | ["b", "a", "c"]</span>\n<span class="token comment">// | ["b", "c", "a"] | ["c", "a", "b"] | ["c", "b", "a"]</span>\n<span class="token keyword">type</span> <span class="token constant">P1</span> <span class="token operator">=</span> Permutation<span class="token operator">&lt;</span><span class="token string">\'a\'</span> <span class="token operator">|</span> <span class="token string">\'b\'</span> <span class="token operator">|</span> <span class="token string">\'c\'</span><span class="token operator">></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-25"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-25" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="41389429327814240000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Permutation<T, K = T> = [T] extends [never] ? [] : K extends K ? [K, ...Permutation<Exclude<T, K>>] : never;\n\n// [&quot;a&quot;, &quot;b&quot;] | [&quot;b&quot;, &quot;a&quot;]\ntype P0 = Permutation<\'a\' | \'b\'>; // [\'a\', \'b\'] | [\'b\' | \'a\']\n// type P1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] | [&quot;a&quot;, &quot;c&quot;, &quot;b&quot;] | [&quot;b&quot;, &quot;a&quot;, &quot;c&quot;]\n// | [&quot;b&quot;, &quot;c&quot;, &quot;a&quot;] | [&quot;c&quot;, &quot;a&quot;, &quot;b&quot;] | [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]\ntype P1 = Permutation<\'a\' | \'b\' | \'c\'>;`, `41389429327814240000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Permutation<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">K</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token operator">...</span>Permutation<span class="token operator">&lt;</span>Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>></span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ["a", "b"] | ["b", "a"]</span>\n<span class="token keyword">type</span> <span class="token constant">P0</span> <span class="token operator">=</span> Permutation<span class="token operator">&lt;</span><span class="token string">\'a\'</span> <span class="token operator">|</span> <span class="token string">\'b\'</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [\'a\', \'b\'] | [\'b\' | \'a\']</span>\n<span class="token comment">// type P1 = ["a", "b", "c"] | ["a", "c", "b"] | ["b", "a", "c"]</span>\n<span class="token comment">// | ["b", "c", "a"] | ["c", "a", "b"] | ["c", "b", "a"]</span>\n<span class="token keyword">type</span> <span class="token constant">P1</span> <span class="token operator">=</span> Permutation<span class="token operator">&lt;</span><span class="token string">\'a\'</span> <span class="token operator">|</span> <span class="token string">\'b\'</span> <span class="token operator">|</span> <span class="token string">\'c\'</span><span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试四十四"><a href="#%E6%B5%8B%E8%AF%95%E5%9B%9B%E5%8D%81%E5%9B%9B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试四十四</h1>\n<p>精简如下组合起来的 ts</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="87073710553073960000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 上报选项\ntype ExposeOptions =\n  | {\n      selector: string; // 选择器\n      targetList?: HTMLElement[]; // 元素列表\n      viewSuccess: ViewSuccessOptions; // 有效曝光\n      view?: ViewOptions; // 立即曝光\n    }\n  | {\n      selector?: string; // 选择器\n      targetList: HTMLElement[]; // 元素列表\n      viewSuccess?: ViewSuccessOptions; // 有效曝光\n      view: ViewOptions; // 立即曝光\n    }\n  | {\n      selector: string; // 选择器\n      targetList?: HTMLElement[]; // 元素列表\n      viewSuccess?: ViewSuccessOptions; // 有效曝光\n      view: ViewOptions; // 立即曝光\n    }\n  | {\n      selector?: string; // 选择器\n      targetList: HTMLElement[]; // 元素列表\n      viewSuccess: ViewSuccessOptions; // 有效曝光\n      view?: ViewOptions; // 立即曝光\n    };`, `87073710553073960000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 上报选项</span>\n<span class="token keyword">type</span> ExposeOptions <span class="token operator">=</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      selector<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 选择器</span>\n      targetList<span class="token operator">?</span><span class="token punctuation">:</span> HTMLElement<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 元素列表</span>\n      viewSuccess<span class="token punctuation">:</span> ViewSuccessOptions<span class="token punctuation">;</span> <span class="token comment">// 有效曝光</span>\n      view<span class="token operator">?</span><span class="token punctuation">:</span> ViewOptions<span class="token punctuation">;</span> <span class="token comment">// 立即曝光</span>\n    <span class="token punctuation">}</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      selector<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 选择器</span>\n      targetList<span class="token punctuation">:</span> HTMLElement<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 元素列表</span>\n      viewSuccess<span class="token operator">?</span><span class="token punctuation">:</span> ViewSuccessOptions<span class="token punctuation">;</span> <span class="token comment">// 有效曝光</span>\n      view<span class="token punctuation">:</span> ViewOptions<span class="token punctuation">;</span> <span class="token comment">// 立即曝光</span>\n    <span class="token punctuation">}</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      selector<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 选择器</span>\n      targetList<span class="token operator">?</span><span class="token punctuation">:</span> HTMLElement<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 元素列表</span>\n      viewSuccess<span class="token operator">?</span><span class="token punctuation">:</span> ViewSuccessOptions<span class="token punctuation">;</span> <span class="token comment">// 有效曝光</span>\n      view<span class="token punctuation">:</span> ViewOptions<span class="token punctuation">;</span> <span class="token comment">// 立即曝光</span>\n    <span class="token punctuation">}</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      selector<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 选择器</span>\n      targetList<span class="token punctuation">:</span> HTMLElement<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 元素列表</span>\n      viewSuccess<span class="token punctuation">:</span> ViewSuccessOptions<span class="token punctuation">;</span> <span class="token comment">// 有效曝光</span>\n      view<span class="token operator">?</span><span class="token punctuation">:</span> ViewOptions<span class="token punctuation">;</span> <span class="token comment">// 立即曝光</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-20"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-20" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="88272065604375040000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ExposeOption = {\n  selector: string; // 选择器\n  targetList: HTMLElement[]; // 元素列表\n  viewSuccess: string; // 有效曝光\n  view: string; // 立即曝光\n};\n\ntype tmp2 = [\'targetList\', \'view\'] | [\'selector\', \'viewSuccess\'];\n\ntype UnionType<T> = T extends (infer P)[] ? P : never;\n\ntype RequireAtLeastOne<ObjectType, KeysType extends keyof ObjectType = keyof ObjectType> = KeysType extends string[]\n  ? Omit<ObjectType, UnionType<KeysType>> & Partial<Pick<ObjectType, UnionType<KeysType>>>\n  : never;\n\ntype tmp = RequireAtLeastOne<ExposeOption, tmp2>;`, `88272065604375040000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ExposeOption <span class="token operator">=</span> <span class="token punctuation">{</span>\n  selector<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 选择器</span>\n  targetList<span class="token punctuation">:</span> HTMLElement<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 元素列表</span>\n  viewSuccess<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 有效曝光</span>\n  view<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 立即曝光</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> tmp2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'targetList\'</span><span class="token punctuation">,</span> <span class="token string">\'view\'</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">\'selector\'</span><span class="token punctuation">,</span> <span class="token string">\'viewSuccess\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> UnionType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>infer <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> RequireAtLeastOne<span class="token operator">&lt;</span>ObjectType<span class="token punctuation">,</span> KeysType <span class="token keyword">extends</span> <span class="token class-name">keyof</span> ObjectType <span class="token operator">=</span> <span class="token keyword">keyof</span> ObjectType<span class="token operator">></span> <span class="token operator">=</span> KeysType <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token operator">?</span> Omit<span class="token operator">&lt;</span>ObjectType<span class="token punctuation">,</span> UnionType<span class="token operator">&lt;</span>KeysType<span class="token operator">>></span> <span class="token operator">&amp;</span> Partial<span class="token operator">&lt;</span>Pick<span class="token operator">&lt;</span>ObjectType<span class="token punctuation">,</span> UnionType<span class="token operator">&lt;</span>KeysType<span class="token operator">>>></span>\n  <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> tmp <span class="token operator">=</span> RequireAtLeastOne<span class="token operator">&lt;</span>ExposeOption<span class="token punctuation">,</span> tmp2<span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-26"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-26" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="41177136517122830000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type PersonInfo = {\n  name: string;\n  age: number;\n  sex: string;\n  id: number;\n};\n\n// 在这里写需要的组合\ntype ArrType = [[\'name\', \'age\'], [\'id\', \'age\']];\n// type ArrType = [[\'name\', \'age\'], [\'id\', \'age\'], [\'id\'], [\'id\', \'age\', \'name\']]\n\ntype PartialWithKeys<T, Keys extends Array<keyof T>, K extends keyof T = Keys[number]> = Partial<Pick<T, K>> &\n  Omit<T, Extract<keyof T, K>>;\n\ntype IterArr<\n  T,\n  C extends Array<Array<keyof T>>,\n  Res = never,\n  L extends Array<any> = []\n> = C[\'length\'] extends L[\'length\'] ? Res : IterArr<T, C, Res | PartialWithKeys<T, C[L[\'length\']]>, [...L, 1]>;\n\ntype R5 = IterArr<PersonInfo, ArrType>;\n\n// 测试用例\nconst dd: R5 = {\n  // name: \'1\',\n  // age: 2,\n  // sex: \'k\',\n  // id: 2\n};`, `41177136517122830000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> PersonInfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  sex<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  id<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在这里写需要的组合</span>\n<span class="token keyword">type</span> ArrType <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token string">\'age\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'id\'</span><span class="token punctuation">,</span> <span class="token string">\'age\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// type ArrType = [[\'name\', \'age\'], [\'id\', \'age\'], [\'id\'], [\'id\', \'age\', \'name\']]</span>\n\n<span class="token keyword">type</span> PartialWithKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Keys <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> Keys<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>></span> <span class="token operator">&amp;</span>\n  Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Extract<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> IterArr<span class="token operator">&lt;</span>\n  <span class="token constant">T</span><span class="token punctuation">,</span>\n  <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">,</span>\n  Res <span class="token operator">=</span> <span class="token builtin">never</span><span class="token punctuation">,</span>\n  <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">[</span><span class="token string">\'length\'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">L</span><span class="token punctuation">[</span><span class="token string">\'length\'</span><span class="token punctuation">]</span> <span class="token operator">?</span> Res <span class="token punctuation">:</span> IterArr<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">,</span> Res <span class="token operator">|</span> PartialWithKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">[</span><span class="token string">\'length\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">R5</span> <span class="token operator">=</span> IterArr<span class="token operator">&lt;</span>PersonInfo<span class="token punctuation">,</span> ArrType<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试用例</span>\n<span class="token keyword">const</span> dd<span class="token punctuation">:</span> <span class="token constant">R5</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// name: \'1\',</span>\n  <span class="token comment">// age: 2,</span>\n  <span class="token comment">// sex: \'k\',</span>\n  <span class="token comment">// id: 2</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="测试四十五"><a href="#%E6%B5%8B%E8%AF%95%E5%9B%9B%E5%8D%81%E4%BA%94" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试四十五</h1>\n<p>实现 Flat 工具类</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="20866684827055090000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type permission = {\n  a: string;\n  c: number;\n  d: {\n    e: string;\n    f: string;\n  };\n};\n\n// type R1 = {\n//   a: string;\n//   c: number;\n//   e: string;\n//   f: string;\n// };\ntype R1 = Flat<permission>;`, `20866684827055090000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> permission <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  c<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  d<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    e<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    f<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// type R1 = {</span>\n<span class="token comment">//   a: string;</span>\n<span class="token comment">//   c: number;</span>\n<span class="token comment">//   e: string;</span>\n<span class="token comment">//   f: string;</span>\n<span class="token comment">// };</span>\n<span class="token keyword">type</span> <span class="token constant">R1</span> <span class="token operator">=</span> Flat<span class="token operator">&lt;</span>permission<span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="我的解答-21"><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-21" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我的解答</h2>\n<p>这里不考虑 key 的冲突情况，且没有处理对象嵌套的情况</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="60353554068864270000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type permission = {\n    a: string;\n    c: number;\n    d: {\n        e: string;\n        f: string\n    };\n}\n\ntype ValueOf<T> = T[keyof T];\n\ntype Flat<T> = ValueOf<{\n    [K in keyof T as (T[K] extends { [key: string]: any } ? K : never)] : T[K]\n}> & {\n    [K in keyof T as (T[K] extends { [key: string]: any } ? never : K)] : T[K]\n}\n\ntype R1 = Flat<permission>\n\nconst c: R1 = {\n    a: \'12\',\n    c: 1,\n    e: \'12\',\n    f: \'ssf\'\n}`, `60353554068864270000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> permission <span class="token operator">=</span> <span class="token punctuation">{</span>\n    a<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    d<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        e<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n        f<span class="token punctuation">:</span> <span class="token builtin">string</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> ValueOf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Flat<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> ValueOf<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token punctuation">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token constant">R1</span> <span class="token operator">=</span> Flat<span class="token operator">&lt;</span>permission<span class="token operator">></span>\n\n<span class="token keyword">const</span> c<span class="token punctuation">:</span> <span class="token constant">R1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    a<span class="token punctuation">:</span> <span class="token string">\'12\'</span><span class="token punctuation">,</span>\n    c<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    e<span class="token punctuation">:</span> <span class="token string">\'12\'</span><span class="token punctuation">,</span>\n    f<span class="token punctuation">:</span> <span class="token string">\'ssf\'</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="最佳解答-27"><a href="#%E6%9C%80%E4%BD%B3%E8%A7%A3%E7%AD%94-27" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最佳解答</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="98427299984873830000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type PermissionReqBaseSharp = {\n  resourceCode: string;\n  privilegeName: string;\n  ext: {\n    multiLanguageKey: string;\n    hasFeatureKey: boolean;\n    isCascade: {\n      person: boolean;\n      score: {\n        math: 100;\n      };\n    };\n  };\n  params: {\n    name: string;\n  };\n};\n\ntype GetDetail<T> = {\n  [K in keyof T]: T[K];\n};\n\n// 选出对象中非对象类型的 keys\ntype PickNonObjectKeys<T> = {\n  [K in keyof T]: T[K] extends object ? never : K;\n}[keyof T];\n\ntype PickNonObjectPartial<T> = Pick<T, PickNonObjectKeys<T>>;\n\n// 选出对象中对象类型的 keys\ntype PickObjectKeys<T> = Exclude<keyof T, PickNonObjectKeys<T>>;\n\n// 联合转交叉\ntype UnionToIntersection<T> = (T extends any ? (k: T) => void : never) extends (k: infer I) => void ? I : never;\n\n// 处理联合对象，继续向下递归\ntype FlatUnion<T> = T extends object ? FlatDeep<T> : never;\n\n/**\n * 递归打平对象类型, 可参考：PermissionReqBaseSharp\n */\ntype FlatDeep<T> = PickNonObjectPartial<T> &\n  (PickObjectKeys<T> extends never ? {} : UnionToIntersection<FlatUnion<T[PickObjectKeys<T>]>>);\n\ntype APermissionReqBaseSharp = {\n  resourceCode: string;\n  privilegeUrl: string;\n  privilegeType: any;\n  belongDomain: any;\n  privilegeName: string;\n  belongType: 1; // admin 归属\n  ext: {\n    multiLanguageKey: string;\n    hasFeatureKey: boolean;\n    featureKey: string;\n    hasHover: boolean;\n    hasHoverLangKey: string;\n    isCascade: boolean;\n  };\n  brushData: boolean;\n  publishEnv: 2;\n  parentId?: string;\n};\n\ntype R1 = GetDetail<FlatDeep<APermissionReqBaseSharp>>;\n\ntype R2 = GetDetail<FlatDeep<PermissionReqBaseSharp>>;`, `98427299984873830000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> PermissionReqBaseSharp <span class="token operator">=</span> <span class="token punctuation">{</span>\n  resourceCode<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  privilegeName<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  ext<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    multiLanguageKey<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    hasFeatureKey<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n    isCascade<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      person<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n      score<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        math<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  params<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> GetDetail<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 选出对象中非对象类型的 keys</span>\n<span class="token keyword">type</span> PickNonObjectKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token punctuation">:</span> <span class="token constant">K</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> PickNonObjectPartial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> PickNonObjectKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 选出对象中对象类型的 keys</span>\n<span class="token keyword">type</span> PickObjectKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> PickNonObjectKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 联合转交叉</span>\n<span class="token keyword">type</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">:</span> infer <span class="token constant">I</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token operator">?</span> <span class="token constant">I</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 处理联合对象，继续向下递归</span>\n<span class="token keyword">type</span> FlatUnion<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">?</span> FlatDeep<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * 递归打平对象类型, 可参考：PermissionReqBaseSharp\n */</span>\n<span class="token keyword">type</span> FlatDeep<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> PickNonObjectPartial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">&amp;</span>\n  <span class="token punctuation">(</span>PickObjectKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">never</span> <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">:</span> UnionToIntersection<span class="token operator">&lt;</span>FlatUnion<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span>PickObjectKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> APermissionReqBaseSharp <span class="token operator">=</span> <span class="token punctuation">{</span>\n  resourceCode<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  privilegeUrl<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  privilegeType<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  belongDomain<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  privilegeName<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  belongType<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// admin 归属</span>\n  ext<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    multiLanguageKey<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    hasFeatureKey<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n    featureKey<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    hasHover<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n    hasHoverLangKey<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    isCascade<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  brushData<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  publishEnv<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  parentId<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">R1</span> <span class="token operator">=</span> GetDetail<span class="token operator">&lt;</span>FlatDeep<span class="token operator">&lt;</span>APermissionReqBaseSharp<span class="token operator">>></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">R2</span> <span class="token operator">=</span> GetDetail<span class="token operator">&lt;</span>FlatDeep<span class="token operator">&lt;</span>PermissionReqBaseSharp<span class="token operator">>></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>// TODO <a href="https://github.com/semlinker/awesome-typescript/issues?page=2&#x26;q=is%3Aissue+is%3Aopen+sort%3Acreated-asc" target="_blank" rel="nofollow noreferrer noopener">https://github.com/semlinker/awesome-typescript/issues?page=2&#x26;q=is%3Aissue+is%3Aopen+sort%3Acreated-asc</a></p>',
id:"/home/runner/work/GatsbyBlog/GatsbyBlog/blog/TypeScript练手测试/index.md absPath of file >>> MarkdownRemark",timeToRead:45,frontmatter:{date:"2021-11-24 16:36:17",path:"/typescript-practice-test/",tags:"前端, TypeScript, ts, 练手测试",title:"TypeScript 练手测试",draft:null}},{excerpt:"背景知识 TypeScript 入门教程 深入理解 TypeScript 一份不可多得的 TS 学习指南 React 中的用法 组件声明 类组件 类组件的定义形式有两种：  和  ，它们都是泛型接口，接收两个参数，第一个是 props 类型的定义，第二个是 state 类型的定义，这两个参数都不是必须的，没有时可以省略：  也是差不多的： 如果定义时候我们不知道组件的 props…",html:'<h1 id="背景知识"><a href="#%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>背景知识</h1>\n<ul>\n<li><a href="https://ts.xcatliu.com/" target="_blank" rel="nofollow noreferrer noopener">TypeScript 入门教程</a></li>\n<li><a href="https://jkchao.github.io/typescript-book-chinese/" target="_blank" rel="nofollow noreferrer noopener">深入理解 TypeScript</a></li>\n<li><a href="https://juejin.cn/post/6872111128135073806" target="_blank" rel="nofollow noreferrer noopener">一份不可多得的 TS 学习指南</a></li>\n</ul>\n<h1 id="react-中的用法"><a href="#react-%E4%B8%AD%E7%9A%84%E7%94%A8%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React 中的用法</h1>\n<h2 id="组件声明"><a href="#%E7%BB%84%E4%BB%B6%E5%A3%B0%E6%98%8E" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>组件声明</h2>\n<h3 id="类组件"><a href="#%E7%B1%BB%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>类组件</h3>\n<p>类组件的定义形式有两种：<code class="language-text">React.Component&lt;P, S={}&gt;</code> 和 <code class="language-text">React.PureComponent&lt;P, S={} SS={}&gt;</code>，它们都是泛型接口，接收两个参数，第一个是 props 类型的定义，第二个是 state 类型的定义，这两个参数都不是必须的，没有时可以省略：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="77564737819825030000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface IProps {\n   name: string;\n}\n\ninterface IState {\n   count: number;\n}\n\nclass App extends React.Component<IProps, IState> {\n   state = {\n      count: 0\n   };\n\n   render() {\n      return (\n         <div>\n            {this.state.count}\n            {this.props.name}\n         </div>\n      );\n   }\n}\n\nexport default App;`, `77564737819825030000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">IState</span> <span class="token punctuation">{</span>\n   count<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>IProps<span class="token punctuation">,</span> IState<span class="token operator">></span> <span class="token punctuation">{</span>\n   state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      count<span class="token punctuation">:</span> <span class="token number">0</span>\n   <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token plain-text">\n            </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">\n         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class="language-text">React.PureComponent&lt;P, S={} SS={}&gt;</code> 也是差不多的：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="55226536570084230000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`class App extends React.PureComponent<IProps, IState> {}`, `55226536570084230000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span><span class="token operator">&lt;</span>IProps<span class="token punctuation">,</span> IState<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>如果定义时候我们不知道组件的 props 的类型，只有在调用时才知道组件类型，该怎么办呢？这时泛型就发挥作用了：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="71788465177789160000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 定义组件\nclass MyComponent<P> extends React.Component<P> {\n   internalProp: P;\n   constructor(props: P) {\n      super(props);\n      this.internalProp = props;\n   }\n   render() {\n      return <span>hello world</span>;\n   }\n}\n\n// 使用组件\ntype IProps = { name: string; age: number };\n\n<MyComponent<IProps> name=\'React\' age={18} />; // Success\n<MyComponent<IProps> name=\'TypeScript\' age=\'hello\' />; // Error`, `71788465177789160000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token comment">// 定义组件</span>\n<span class="token keyword">class</span> <span class="token class-name">MyComponent</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span><span class="token plain-text"> extends React.Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">{</span>\n   internalProp<span class="token punctuation">:</span> <span class="token constant">P</span><span class="token punctuation">;</span>\n   <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">:</span> <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>internalProp <span class="token operator">=</span> props<span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token plain-text">\n\n// 使用组件\ntype IProps = </span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token plain-text">;\n\n&lt;MyComponent</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">IProps</span></span><span class="token punctuation">></span></span><span class="token plain-text"> name=\'React\' age=</span><span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token plain-text"> />; // Success\n&lt;MyComponent</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">IProps</span></span><span class="token punctuation">></span></span><span class="token plain-text"> name=\'TypeScript\' age=\'hello\' />; // Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="函数组件"><a href="#%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>函数组件</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="33416877816733835000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface IProps {\n   name: string;\n}\n\nconst App = (props: IProps) => {\n   const { name } = props;\n\n   return (\n      <div className=\'App\'>\n         <h1>hello world</h1>\n         <h2>{name}</h2>\n      </div>\n   );\n};\n\nexport default App;`, `33416877816733835000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">:</span> IProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n\n   <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>App<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n   <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>除此之外，函数类型还可以使用 <code class="language-text">React.FunctionComponent&lt;P={}&gt;</code> 来定义，也可以使用其简写<code class="language-text">React.FC&lt;P={}&gt;</code>，两者效果是一样的。它是一个泛型接口，可以接收一个参数，参数表示 props 的类型，这个参数不是必须的。它们就相当于这样：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="49932312524034200000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type React.FC<P = {}> = React.FunctionComponent<P>`, `49932312524034200000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">type</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> React<span class="token punctuation">.</span>FunctionComponent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>最终的定义形式如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="24604093251063742000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface IProps {\n   name: string;\n}\n\nconst App: React.FC<IProps> = (props) => {\n   const { name } = props;\n   return (\n      <div className=\'App\'>\n         <h1>hello world</h1>\n         <h2>{name}</h2>\n      </div>\n   );\n};\n\nexport default App;`, `24604093251063742000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> App<span class="token punctuation">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">IProps</span></span><span class="token punctuation">></span></span><span class="token plain-text"> = (props) => </span><span class="token punctuation">{</span>\n   <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n   <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>App<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n   <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token plain-text">;\n\nexport default App;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>当使用这种形式来定义函数组件时，props 中默认会带有 children 属性，它表示该组件在调用时，其内部的元素</p>\n<p>使用 React.FC 声明函数组件和普通声明的区别如下：</p>\n<ul>\n<li>React.FC 显式地定义了返回类型，其他方式是隐式推导的；</li>\n<li>React.FC 对静态属性：displayName、propTypes、defaultProps 提供了类型检查和自动补全；</li>\n<li>React.FC 为 children 提供了隐式的类型（ReactElement | null）。</li>\n</ul>\n<p>那如果我们在定义组件时不知道 props 的类型，只有调用时才知道，那就还是用泛型来定义 props 的类型。对于使用 function 定义的函数组件：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="17139698185864204000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 定义组件\nfunction MyComponent<P>(props: P) {\n   return <span>{props}</span>;\n}\n\n// 使用组件\ntype IProps = { name: string; age: number };\n\n<MyComponent<IProps> name=\'React\' age={18} />; // Success\n<MyComponent<IProps> name=\'TypeScript\' age=\'hello\' />; // Error`, `17139698185864204000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token comment">// 定义组件</span>\n<span class="token keyword">function</span> MyComponent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span><span class="token plain-text">(props: P) </span><span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token plain-text">\n\n// 使用组件\ntype IProps = </span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token plain-text">;\n\n&lt;MyComponent</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">IProps</span></span><span class="token punctuation">></span></span><span class="token plain-text"> name=\'React\' age=</span><span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token plain-text"> />; // Success\n&lt;MyComponent</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">IProps</span></span><span class="token punctuation">></span></span><span class="token plain-text"> name=\'TypeScript\' age=\'hello\' />; // Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>如果使用箭头函数定义的函数组件，直接这样调用时错误的：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="47773804709890340000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const MyComponent = <P>(props: P) {\n  return (\n   <span>\n     {props}\n    </span>\n  );\n}`, `47773804709890340000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span><span class="token plain-text">(props: P) </span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">\n     </span><span class="token punctuation">{</span>props<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>必须使用 extends 关键字来定义泛型参数才能被成功解析：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="99276178426506460000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const MyComponent = <P extends any>(props: P) {\n  return (\n   <span>\n     {props}\n    </span>\n  );\n}`, `99276178426506460000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">any</span><span class="token punctuation">></span></span><span class="token plain-text">(props: P) </span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">\n     </span><span class="token punctuation">{</span>props<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="react-内置类型"><a href="#react-%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React 内置类型</h2>\n<h3 id="jsxelement"><a href="#jsxelement" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JSX.Element</h3>\n<p>先来看看 JSX.Element 类型的声明：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="86773021921103840000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare global {\n   namespace JSX {\n      interface Element extends React.ReactElement<any, any> {}\n   }\n}`, `86773021921103840000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">declare</span> global <span class="token punctuation">{</span>\n   <span class="token keyword">namespace</span> <span class="token constant">JSX</span> <span class="token punctuation">{</span>\n      <span class="token keyword">interface</span> <span class="token class-name">Element</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>ReactElement</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>可以看到，JSX.Element 是 ReactElement 的子类型，它没有增加属性，两者是等价的。也就是说两种类型的变量可以相互赋值。​</p>\n<p>JSX.Element 可以通过执行 React.createElement 或是转译 JSX 获得：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="50424809783306170000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const jsx = <div>hello</div>;\nconst ele = React.createElement(\'div\', null, \'hello\');`, `50424809783306170000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> jsx <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">hello</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ele <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<h3 id="reactreactelement"><a href="#reactreactelement" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React.ReactElement</h3>\n<p>React 的类型声明文件中提供了 <code class="language-text">React.ReactElement&lt;T&gt;</code>，它可以让我们通过传入 <code class="language-text">&lt;T&gt;</code> 来注解类组件的实例化，它在声明文件中的定义如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="54184854929004690000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {\n   type: T;\n   props: P;\n   key: Key | null;\n}`, `54184854929004690000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">ReactElement</span><span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">|</span> JSXElementConstructor<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> JSXElementConstructor<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">>></span> <span class="token punctuation">{</span>\n   <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n   props<span class="token punctuation">:</span> <span class="token constant">P</span><span class="token punctuation">;</span>\n   key<span class="token punctuation">:</span> Key <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ReactElement 是一个接口，包含 type,props,key 三个属性值。该类型的变量值只能是两种： null 和 ReactElement 实例。​</p>\n<p>通常情况下，函数组件返回 ReactElement（JSX.Element）的值。</p>\n<h3 id="reactreactnode"><a href="#reactreactnode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React.ReactNode</h3>\n<p>ReactNode 类型的声明如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="77865055225793430000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ReactText = string | number;\ntype ReactChild = ReactElement | ReactText;\n\ninterface ReactNodeArray extends Array<ReactNode> {}\ntype ReactFragment = {} | ReactNodeArray;\ntype ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;`, `77865055225793430000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ReactText <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> ReactChild <span class="token operator">=</span> ReactElement <span class="token operator">|</span> ReactText<span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ReactNodeArray</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>ReactNode<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">type</span> ReactFragment <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">|</span> ReactNodeArray<span class="token punctuation">;</span>\n<span class="token keyword">type</span> ReactNode <span class="token operator">=</span> ReactChild <span class="token operator">|</span> ReactFragment <span class="token operator">|</span> ReactPortal <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>可以看到，ReactNode 是一个联合类型，它可以是 string、number、ReactElement、null、boolean、ReactNodeArray。由此可知。ReactElement 类型的变量可以直接赋值给 ReactNode 类型的变量，但反过来是不行的。</p>\n<p>类组件的 render 成员函数会返回 ReactNode 类型的值：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="48811927603403450000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`class MyComponent extends React.Component {\n   render() {\n      return <div>hello world</div>;\n   }\n}\n// 正确\nconst component: React.ReactNode<MyComponent> = <MyComponent />;\n// 错误\nconst component: React.ReactNode<MyComponent> = <OtherComponent />;`, `48811927603403450000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 正确</span>\n<span class="token keyword">const</span> component<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">></span></span><span class="token plain-text"> = </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">;\n// 错误\nconst component: React.ReactNode</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">></span></span><span class="token plain-text"> = </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OtherComponent</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上面的代码中，给 component 变量设置了类型是 Mycomponent 类型的 react 实例，这时只能给其赋值其为 MyComponent 的实例组件。​</p>\n<p>通常情况下，类组件通过 render() 返回 ReactNode 的值。</p>\n<h3 id="cssproperties"><a href="#cssproperties" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CSSProperties</h3>\n<p>先来看看 React 的声明文件中对 CSSProperties 的定义：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="60763110072146076000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`export interface CSSProperties extends CSS.Properties<string | number> {\n   /**\n    * The index signature was removed to enable closed typing for style\n    * using CSSType. You\'re able to use type assertion or module augmentation\n    * to add properties or an index signature of your own.\n    *\n    * For examples and more information, visit:\n    * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n    */\n}`, `60763110072146076000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CSSProperties</span> <span class="token keyword">extends</span> <span class="token class-name">CSS<span class="token punctuation">.</span>Properties</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   <span class="token comment">/**\n    * The index signature was removed to enable closed typing for style\n    * using CSSType. You\'re able to use type assertion or module augmentation\n    * to add properties or an index signature of your own.\n    *\n    * For examples and more information, visit:\n    * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n    */</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>React.CSSProperties 是 React 基于 TypeScript 定义的 CSS 属性类型，可以将一个方法的返回值设置为该类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="83641937034193980000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`import * as React from \'react\';\n\nconst classNames = require(\'./sidebar.css\');\n\ninterface Props {\n   isVisible: boolean;\n}\n\nconst divStyle = (props: Props): React.CSSProperties => ({\n   width: props.isVisible ? \'23rem\' : \'0rem\'\n});\n\nexport const SidebarComponent: React.StatelessComponent<Props> = (props) => (\n   <div id=\'mySidenav\' className={classNames.sidenav} style={divStyle(props)}>\n      {props.children}\n   </div>\n);`, `83641937034193980000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> classNames <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">\'./sidebar.css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n   isVisible<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> divStyle <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">:</span> Props<span class="token punctuation">)</span><span class="token punctuation">:</span> React<span class="token punctuation">.</span><span class="token parameter">CSSProperties</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n   width<span class="token punctuation">:</span> props<span class="token punctuation">.</span>isVisible <span class="token operator">?</span> <span class="token string">\'23rem\'</span> <span class="token punctuation">:</span> <span class="token string">\'0rem\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> SidebarComponent<span class="token punctuation">:</span> React<span class="token punctuation">.</span>StatelessComponent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Props</span></span><span class="token punctuation">></span></span><span class="token plain-text"> = (props) => (\n   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>mySidenav<span class="token punctuation">\'</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>classNames<span class="token punctuation">.</span>sidenav<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">divStyle</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token plain-text">\n   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n);</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里 divStyle 组件的返回值就是 React.CSSProperties 类型。</p>\n<p>我们还可以定义一个 CSSProperties 类型的变量：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="44771875923848010000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const divStyle: React.CSSProperties = {\n   width: \'11rem\',\n   height: \'7rem\',\n   backgroundColor: \\`rgb(\\${props.color.red},\\${props.color.green}, \\${props.color.blue})\\`\n};`, `44771875923848010000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> divStyle<span class="token punctuation">:</span> React<span class="token punctuation">.</span>CSSProperties <span class="token operator">=</span> <span class="token punctuation">{</span>\n   width<span class="token punctuation">:</span> <span class="token string">\'11rem\'</span><span class="token punctuation">,</span>\n   height<span class="token punctuation">:</span> <span class="token string">\'7rem\'</span><span class="token punctuation">,</span>\n   backgroundColor<span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>color<span class="token punctuation">.</span>red<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>color<span class="token punctuation">.</span>green<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>color<span class="token punctuation">.</span>blue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这个变量可以在 HTML 标签的 style 属性上使用：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="52216518836667930000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<div style={divStyle} />`, `52216518836667930000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>divStyle<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>在 React 的类型声明文件中，style 属性的类型如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="34406384640542355000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`style?: CSSProperties | undefined;`, `34406384640542355000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts">style<span class="token operator">?</span><span class="token punctuation">:</span> CSSProperties <span class="token operator">|</span> undefined<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h2 id="react-hooks"><a href="#react-hooks" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React Hooks</h2>\n<h3 id="usestate"><a href="#usestate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>useState</h3>\n<p>默认情况下，React 会为根据设置的 state 的初始值来自动推导 state 以及更新函数的类型</p>\n<p>如果已知 state 的类型，可以通过以下形式来自定义 state 的类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="26803808607712498000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const [count, setCount] = useState<number>(1);`, `26803808607712498000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">></span></span><span class="token plain-text">(1);</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>如果初始值为 null，需要显式地声明 state 的类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="52584605059597100000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const [count, setCount] = useState<number | null>(null);`, `52584605059597100000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>如果 state 是一个对象，想要初始化一个空对象，可以使用断言来处理：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="99840119182464250000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const [user, setUser] = React.useState<IUser>({} as IUser);`, `99840119182464250000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> setUser<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span>useState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">IUser</span></span><span class="token punctuation">></span></span><span class="token plain-text">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token plain-text"> as IUser);</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>实际上，这里将空对象 <code class="language-text">{}</code> 断言为 IUser 接口就是欺骗了 TypeScript 的编译器，由于后面的代码可能会依赖这个对象，所以应该在使用前及时初始化 user 的值，否则就会报错。</p>\n<p>下面是声明文件中 useState 的定义：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="8268754314416494000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n// convenience overload when first argument is omitted\n/**\n * Returns a stateful value, and a function to update it.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#usestate\n */\n\nfunction useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\n/**\n * An alternative to \\`useState\\`.\n *\n * \\`useReducer\\` is usually preferable to \\`useState\\` when you have complex state logic that involves\n * multiple sub-values. It also lets you optimize performance for components that trigger deep\n * updates because you can pass \\`dispatch\\` down instead of callbacks.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n */`, `8268754314416494000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> useState<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">></span><span class="token punctuation">(</span>initialState<span class="token punctuation">:</span> <span class="token constant">S</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">S</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span>SetStateAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">>></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// convenience overload when first argument is omitted</span>\n<span class="token comment">/**\n * Returns a stateful value, and a function to update it.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#usestate\n */</span>\n\n<span class="token keyword">function</span> useState<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token operator">=</span> undefined<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token constant">S</span> <span class="token operator">|</span> undefined<span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span>SetStateAction<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token operator">|</span> undefined<span class="token operator">>></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">/**\n * An alternative to `useState`.\n *\n * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n * multiple sub-values. It also lets you optimize performance for components that trigger deep\n * updates because you can pass `dispatch` down instead of callbacks.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#usereducer\n */</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>可以看到，这里定义两种形式，分别是有初始值和没有初始值的形式。</p>\n<h3 id="useeffect"><a href="#useeffect" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>useEffect</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="47673230668800115000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`useEffect(() => {\n   const subscription = props.source.subscribe();\n   return () => {\n      subscription.unsubscribe();\n   };\n}, [props.source]);`, `47673230668800115000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> subscription <span class="token operator">=</span> props<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>source<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>当函数的返回值不是函数或者 effect 函数中未定义的内容时，如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="58684954737901090000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`useEffect(() => {\n   subscribe();\n   return null; // Type \'null\' is not assignable to type \'void | Destructor\'\n});`, `58684954737901090000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Type \'null\' is not assignable to type \'void | Destructor\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>来看看 useEffect 在类型声明文件中的定义：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="56314829678890850000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Destructors are only allowed to return void.\ntype Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };\n\n// NOTE: callbacks are _only_ allowed to return either void, or a destructor.\ntype EffectCallback = () => void | Destructor;\n\n// (TypeScript 3.0): ReadonlyArray<unknown>\ntype DependencyList = ReadonlyArray<any>;\n\nfunction useEffect(effect: EffectCallback, deps?: DependencyList): void;\n// NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>\n/**\n * \\`useImperativeHandle\\` customizes the instance value that is exposed to parent components when using\n * \\`ref\\`. As always, imperative code using refs should be avoided in most cases.\n *\n * \\`useImperativeHandle\\` should be used with \\`React.forwardRef\\`.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#useimperativehandle\n */`, `56314829678890850000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// Destructors are only allowed to return void.</span>\n<span class="token keyword">type</span> <span class="token function-variable function">Destructor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">UNDEFINED_VOID_ONLY</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">never</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// NOTE: callbacks are _only_ allowed to return either void, or a destructor.</span>\n<span class="token keyword">type</span> <span class="token function-variable function">EffectCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token operator">|</span> Destructor<span class="token punctuation">;</span>\n\n<span class="token comment">// (TypeScript 3.0): ReadonlyArray&lt;unknown></span>\n<span class="token keyword">type</span> DependencyList <span class="token operator">=</span> ReadonlyArray<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token parameter">effect<span class="token punctuation">:</span> EffectCallback<span class="token punctuation">,</span> deps<span class="token operator">?</span><span class="token punctuation">:</span> DependencyList</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token comment">// NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref&lt;T></span>\n<span class="token comment">/**\n * `useImperativeHandle` customizes the instance value that is exposed to parent components when using\n * `ref`. As always, imperative code using refs should be avoided in most cases.\n *\n * `useImperativeHandle` should be used with `React.forwardRef`.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#useimperativehandle\n */</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>可以看到，useEffect 的第一个参数只允许返回一个函数。</p>\n<h3 id="useref"><a href="#useref" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>useRef</h3>\n<p>当使用 useRef 时，我们可以访问一个可变的引用对象。可以将初始值传递给 useRef，它用于初始化可变 ref 对象公开的当前属性。当我们使用 useRef 时，需要给其指定类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="20313069323469013000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const nameInput = React.useRef<HTMLInputElement>(null);`, `20313069323469013000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> nameInput <span class="token operator">=</span> React<span class="token punctuation">.</span>useRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLInputElement</span></span><span class="token punctuation">></span></span><span class="token plain-text">(null);</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>这里给实例的类型指定为了 input 输入框类型。​</p>\n<p>当 useRef 的初始值为 null 时，有两种创建的形式，第一种：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="73653419669719060000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const nameInput = React.useRef<HTMLInputElement>(null);\nnameInput.current.innerText = \'hello world\';`, `73653419669719060000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> nameInput <span class="token operator">=</span> React<span class="token punctuation">.</span>useRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLInputElement</span></span><span class="token punctuation">></span></span><span class="token plain-text">(null);\nnameInput.current.innerText = \'hello world\';</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>这种形式下，ref1.current 是只读的（read-only），所以当我们将它的 innerText 属性重新赋值时会报以下错误：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="66674243028066330000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`Cannot assign to \'current\' because it is a read-only property.`, `66674243028066330000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title=""\n              >\n                \n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">Cannot assign to &#39;current&#39; because it is a read-only property.</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>那该怎么将 current 属性变为动态可变得的，先来看看类型声明文件中 useRef 是如何定义的：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="59709482385303224000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function useRef<T>(initialValue: T): MutableRefObject<T>;\n// convenience overload for refs given as a ref prop as they typically start with a null value\n/**\n * \\`useRef\\` returns a mutable ref object whose \\`.current\\` property is initialized to the passed argument\n * (\\`initialValue\\`). The returned object will persist for the full lifetime of the component.\n *\n * Note that \\`useRef()\\` is useful for more than the \\`ref\\` attribute. It’s handy for keeping any mutable\n * value around similar to how you’d use instance fields in classes.\n *\n * Usage note: if you need the result of useRef to be directly mutable, include \\`| null\\` in the type\n * of the generic argument.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#useref\n */`, `59709482385303224000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> useRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>initialValue<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> MutableRefObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// convenience overload for refs given as a ref prop as they typically start with a null value</span>\n<span class="token comment">/**\n * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n * (`initialValue`). The returned object will persist for the full lifetime of the component.\n *\n * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n * value around similar to how you’d use instance fields in classes.\n *\n * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type\n * of the generic argument.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#useref\n */</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这段代码告诉我们，如果需要 useRef 的直接可变，就需要在泛型参数中包含 <code class="language-text">| null</code>，所以这就是当初始值为 null 的第二种定义形式：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="78460453122893500000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const nameInput = React.useRef<HTMLInputElement | null>(null);`, `78460453122893500000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> nameInput <span class="token operator">=</span> React<span class="token punctuation">.</span>useRef<span class="token operator">&lt;</span>HTMLInputElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>这种形式下，nameInput.current 就是可写的。不过两种类型在使用时都需要做类型检查：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15289425360401654000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`nameInput.current?.innerText = &quot;hello world&quot;;`, `15289425360401654000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx">nameInput<span class="token punctuation">.</span>current<span class="token operator">?</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>那么问题来了，为什么第一种写法在没有操作 current 时没有报错呢？因为 useRef 在类型定义式具有多个重载声明，第一种方式就是执行的以下函数重载：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79429118862267020000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function useRef<T>(initialValue: T | null): RefObject<T>;\n// convenience overload for potentially undefined initialValue / call with 0 arguments\n// has a default to stop it from defaulting to {} instead\n/**\n * \\`useRef\\` returns a mutable ref object whose \\`.current\\` property is initialized to the passed argument\n * (\\`initialValue\\`). The returned object will persist for the full lifetime of the component.\n *\n * Note that \\`useRef()\\` is useful for more than the \\`ref\\` attribute. It’s handy for keeping any mutable\n * value around similar to how you’d use instance fields in classes.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#useref\n */`, `79429118862267020000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> useRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>initialValue<span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> RefObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// convenience overload for potentially undefined initialValue / call with 0 arguments</span>\n<span class="token comment">// has a default to stop it from defaulting to {} instead</span>\n<span class="token comment">/**\n * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n * (`initialValue`). The returned object will persist for the full lifetime of the component.\n *\n * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n * value around similar to how you’d use instance fields in classes.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#useref\n */</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>从 useRef 的声明中可以看到，function useRef 的返回值类型化是 MutableRefObject，这里面的 T 就是参数的类型 T，所以最终 nameInput 的类型就是 React.MutableRefObject。</p>\n<p>注意，上面用到了 HTMLInputElement 类型，这是一个标签类型，这个操作就是用来访问 DOM 元素的。</p>\n<h3 id="usecallback"><a href="#usecallback" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>useCallback</h3>\n<p>先来看看类型声明文件中对 useCallback 的定义：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="92517391883863410000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function useCallback<T extends (...args: any[]) => any>(callback: T, deps: DependencyList): T;\n/**\n * \\`useMemo\\` will only recompute the memoized value when one of the \\`deps\\` has changed.\n *\n * Usage note: if calling \\`useMemo\\` with a referentially stable function, also give it as the input in\n * the second argument.\n *\n * \\`\\`\\`ts\n * function expensive () { ... }\n *\n * function Component () {\n *   const expensiveResult = useMemo(expensive, [expensive])\n *   return ...\n * }\n * \\`\\`\\`\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#usememo\n */`, `92517391883863410000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> useCallback<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">(</span>callback<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> deps<span class="token punctuation">:</span> DependencyList<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token comment">/**\n * `useMemo` will only recompute the memoized value when one of the `deps` has changed.\n *\n * Usage note: if calling `useMemo` with a referentially stable function, also give it as the input in\n * the second argument.\n *\n * ```ts\n * function expensive () { ... }\n *\n * function Component () {\n *   const expensiveResult = useMemo(expensive, [expensive])\n *   return ...\n * }\n * ```\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#usememo\n */</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>useCallback 接收一个回调函数和一个依赖数组，只有当依赖数组中的值发生变化时才会重新执行回调函数。来看一个例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97543834479029300000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const add = (a: number, b: number) => a + b;\n\nconst memoizedCallback = useCallback(\n   (a) => {\n      add(a, b);\n   },\n   [b]\n);`, `97543834479029300000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">number</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>\n   <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">[</span>b<span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里我们没有给回调函数中的参数 a 定义类型，所以下面的调用方式都不会报错：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="35819431153966772000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`memoizedCallback(\'hello\');\nmemoizedCallback(5);`, `35819431153966772000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token function">memoizedCallback</span><span class="token punctuation">(</span><span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">memoizedCallback</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>尽管 add 方法的两个参数都是 number 类型，但是上述调用都能够用执行。所以为了更加严谨，我们需要给回调函数定义具体的类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="94010286739515820000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const memoizedCallback = useCallback(\n   (a: number) => {\n      add(a, b);\n   },\n   [b]\n);`, `94010286739515820000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>\n   <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">[</span>b<span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这时候如果再给回调函数传入字符串就会报错了，需要注意在使用 useCallback 时需要给回调函数的参数指定类型。</p>\n<h3 id="usememo"><a href="#usememo" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>useMemo</h3>\n<p>先来看看类型声明文件中对 useMemo 的定义：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="45560680250468730000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;\n/**\n * \\`useDebugValue\\` can be used to display a label for custom hooks in React DevTools.\n *\n * NOTE: We don’t recommend adding debug values to every custom hook.\n * It’s most valuable for custom hooks that are part of shared libraries.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#usedebugvalue\n */`, `45560680250468730000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> useMemo<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function-variable function">factory</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">,</span> deps<span class="token punctuation">:</span> DependencyList <span class="token operator">|</span> undefined<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token comment">/**\n * `useDebugValue` can be used to display a label for custom hooks in React DevTools.\n *\n * NOTE: We don’t recommend adding debug values to every custom hook.\n * It’s most valuable for custom hooks that are part of shared libraries.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#usedebugvalue\n */</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>useMemo 和 useCallback 是非常类似的，但是它返回的是一个值，而不是函数。所以在定义 useMemo 时需要定义返回值的类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="59538209970905285000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`let a = 1;\nsetTimeout(() => {\n   a += 1;\n}, 1000);\n\nconst calculatedValue = useMemo<number>(() => a ** 2, [a]);`, `59538209970905285000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> calculatedValue <span class="token operator">=</span> useMemo<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>如果返回值不一致，就会报错</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="17309856692841863000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const calculatedValue = useMemo<number>(() => a + \'hello\', [a]);\n// 类型“() => string”的参数不能赋给类型“() => number”的参数`, `17309856692841863000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> calculatedValue <span class="token operator">=</span> useMemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">></span></span><span class="token plain-text">(() => a + \'hello\', [a]);\n// 类型“() => string”的参数不能赋给类型“() => number”的参数</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<h3 id="usecontext"><a href="#usecontext" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>useContext</h3>\n<p>useContext 需要提供一个上下文对象，并返回所提供的上下文的值，当提供者更新上下文对象时，引用这些上下文对象的组件就会重新渲染：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="72558804241081810000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const ColorContext = React.createContext({ color: \'green\' });\n\nconst Welcome = () => {\n   const { color } = useContext(ColorContext);\n   return <div style={{ color }}>hello world</div>;\n};`, `72558804241081810000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> ColorContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">\'green\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Welcome</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> <span class="token punctuation">{</span> color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ColorContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在使用 useContext 时，会自动推断出提供的上下文对象的类型，所以并不需要我们手动设置 context 的类型。当前，我们也可以使用泛型来设置 context 的类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="87304774794361180000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface IColor {\n   color: string;\n}\n\nconst ColorContext = React.createContext<IColor>({ color: \'green\' });`, `87304774794361180000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">IColor</span> <span class="token punctuation">{</span>\n   color<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> ColorContext <span class="token operator">=</span> React<span class="token punctuation">.</span>createContext<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">IColor</span></span><span class="token punctuation">></span></span><span class="token plain-text">(</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">\'green\'</span> <span class="token punctuation">}</span><span class="token plain-text">);</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>下面是 useContext 在类型声明文件中的定义：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="5687181173129185000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function useContext<T>(context: Context<T> /*, (not public API) observedBits?: number|boolean */): T;\n/**\n * Returns a stateful value, and a function to update it.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#usestate\n */`, `5687181173129185000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> useContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> Context<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token comment">/*, (not public API) observedBits?: number|boolean */</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token comment">/**\n * Returns a stateful value, and a function to update it.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#usestate\n */</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="usereducer"><a href="#usereducer" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>useReducer</h3>\n<p>有时我们需要处理一些复杂的状态，并且可能取决于之前的状态。这时候就可以使用 useReducer，它接收一个函数，这个函数会根据之前的状态来计算一个新的 state。其语法如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="95383908639498370000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const [state, dispatch] = useReducer(reducer, initialArg, init);`, `95383908639498370000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialArg<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>来看下面的例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="29216806717341640000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const reducer = (state, action) => {\n   switch (action.type) {\n      case \'increment\':\n         return { count: state.count + 1 };\n      case \'decrement\':\n         return { count: state.count - 1 };\n      default:\n         throw new Error();\n   }\n};\n\nconst Counter = () => {\n   const initialState = { count: 0 };\n   const [state, dispatch] = useReducer(reducer, initialState);\n\n   return (\n      <>\n         Count: {state.count}\n         <button onClick={() => dispatch({ type: \'increment\' })}>+</button>\n         <button onClick={() => dispatch({ type: \'decrement\' })}>-</button>\n      </>\n   );\n};`, `29216806717341640000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">\'increment\'</span><span class="token punctuation">:</span>\n         <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">\'decrement\'</span><span class="token punctuation">:</span>\n         <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token punctuation">:</span>\n         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n   <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n         Count: </span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token plain-text">\n         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'increment\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'decrement\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">-</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n   <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>当前的状态是无法推断出来的，可以给 reducer 函数添加类型，通过给 reducer 函数定义 state 和 action 来推断 useReducer 的类型，下面来修改上面的例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="64676824986386270000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ActionType = {\n   type: \'increment\' | \'decrement\';\n};\n\ntype State = { count: number };\n\nconst initialState: State = { count: 0 };\nconst reducer = (state: State, action: ActionType) => {\n   // ...\n};`, `64676824986386270000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">type</span> ActionType <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'increment\'</span> <span class="token operator">|</span> <span class="token string">\'decrement\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> State <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> initialState<span class="token punctuation">:</span> State <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">:</span> State<span class="token punctuation">,</span> action<span class="token punctuation">:</span> ActionType</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这样，在 Counter 函数中就可以推断出类型。当我们视图使用一个不存在的类型时，就会报错：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="24407945931256082000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`dispatch({ type: \'reset\' });\n// Error! type \'&quot;reset&quot;\' is not assignable to type \'&quot;increment&quot; | &quot;decrement&quot;\'`, `24407945931256082000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'reset\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Error! type \'"reset"\' is not assignable to type \'"increment" | "decrement"\'</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>除此之外，还可以使用泛型的形式来实现 reducer 函数的类型定义：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="9148937196569840000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ActionType = {\n   type: \'increment\' | \'decrement\';\n};\n\ntype State = { count: number };\n\nconst reducer: React.Reducer<State, ActionType> = (state, action) => {\n   // ...\n};`, `9148937196569840000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ActionType <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'increment\'</span> <span class="token operator">|</span> <span class="token string">\'decrement\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> State <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> reducer<span class="token punctuation">:</span> React<span class="token punctuation">.</span>Reducer<span class="token operator">&lt;</span>State<span class="token punctuation">,</span> ActionType<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="事件处理"><a href="#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>事件处理</h2>\n<h3 id="event-事件类型"><a href="#event-%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Event 事件类型</h3>\n<p>常见的 Event 事件对象如下：</p>\n<ul>\n<li>剪切板事件对象：<code class="language-text">ClipboardEvent&lt;T = Element&gt;</code></li>\n<li>拖拽事件对象：<code class="language-text">DragEvent&lt;T = Element&gt;</code></li>\n<li>焦点事件对象：<code class="language-text">FocusEvent&lt;T = Element&gt;</code></li>\n<li>表单事件对象：<code class="language-text">FormEvent&lt;T = Element&gt;</code></li>\n<li>Change 事件对象：<code class="language-text">ChangeEvent&lt;T = Element&gt;</code></li>\n<li>键盘事件对象：<code class="language-text">KeyboardEvent&lt;T = Element&gt;</code></li>\n<li>鼠标事件对象：<code class="language-text">MouseEvent&lt;T = Element, E = NativeMouseEvent&gt;</code></li>\n<li>触摸事件对象：<code class="language-text">TouchEvent&lt;T = Element&gt;</code></li>\n<li>滚轮事件对象：<code class="language-text">WheelEvent&lt;T = Element&gt;</code></li>\n<li>动画事件对象：<code class="language-text">AnimationEvent&lt;T = Element&gt;</code></li>\n<li>过渡事件对象：<code class="language-text">TransitionEvent&lt;T = Element&gt;</code></li>\n</ul>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97480018386059150000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type State = {\n   text: string;\n};\n\nconst App: React.FC = () => {\n   const [text, setText] = useState<string>(\'\');\n\n   const onChange = (e: React.FormEvent<HTMLInputElement>): void => {\n      setText(e.currentTarget.value);\n   };\n\n   return (\n      <div>\n         <input type=\'text\' value={text} onChange={this.onChange} />\n      </div>\n   );\n};`, `97480018386059150000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">type</span> State <span class="token operator">=</span> <span class="token punctuation">{</span>\n   text<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> App<span class="token punctuation">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span> setText<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text">(\'\');\n\n   const onChange = (e: React.FormEvent</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLInputElement</span></span><span class="token punctuation">></span></span><span class="token plain-text">): void => </span><span class="token punctuation">{</span>\n      <span class="token function">setText</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token plain-text">;\n\n   return (\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>text<span class="token punctuation">\'</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n   );\n};</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里就给 onChange 方法的事件对象定义为了 FormEvent 类型，并且作用的对象时一个 HTMLInputElement 类型的标签（input 标签） ​ 可以来看下 MouseEvent 事件对象和 ChangeEvent 事件对象的类型声明，其他事件对象的声明形似也类似：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="3637336617772590600"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {\n   altKey: boolean;\n   button: number;\n   buttons: number;\n   clientX: number;\n   clientY: number;\n   ctrlKey: boolean;\n   /**\n    * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n    */\n   getModifierState(key: string): boolean;\n   metaKey: boolean;\n   movementX: number;\n   movementY: number;\n   pageX: number;\n   pageY: number;\n   relatedTarget: EventTarget | null;\n   screenX: number;\n   screenY: number;\n   shiftKey: boolean;\n}\n\ninterface ChangeEvent<T = Element> extends SyntheticEvent<T> {\n   target: EventTarget & T;\n}`, `3637336617772590600`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">MouseEvent</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token punctuation">,</span> <span class="token constant">E</span> <span class="token operator">=</span> NativeMouseEvent<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">UIEvent</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   altKey<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n   button<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   buttons<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   clientX<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   clientY<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   ctrlKey<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n   <span class="token comment">/**\n    * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n    */</span>\n   <span class="token function">getModifierState</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n   metaKey<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n   movementX<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   movementY<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   pageX<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   pageY<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   relatedTarget<span class="token punctuation">:</span> EventTarget <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n   screenX<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   screenY<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   shiftKey<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ChangeEvent</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">SyntheticEvent</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   target<span class="token punctuation">:</span> EventTarget <span class="token operator">&amp;</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在很多事件对象的声明文件中都可以看到 EventTarget 的身影。这是因为 DOM 的事件操作（监听和触发）都定义在 EventTarget 接口上。EventTarget 的类型声明如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="62966852775553475000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface EventTarget {\n   addEventListener(\n      type: string,\n      listener: EventListenerOrEventListenerObject | null,\n      options?: boolean | AddEventListenerOptions\n   ): void;\n   dispatchEvent(evt: Event): boolean;\n   removeEventListener(\n      type: string,\n      listener?: EventListenerOrEventListenerObject | null,\n      options?: EventListenerOptions | boolean\n   ): void;\n}`, `62966852775553475000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">EventTarget</span> <span class="token punctuation">{</span>\n   <span class="token function">addEventListener</span><span class="token punctuation">(</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n      listener<span class="token punctuation">:</span> EventListenerOrEventListenerObject <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n      options<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> AddEventListenerOptions\n   <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n   <span class="token function">dispatchEvent</span><span class="token punctuation">(</span>evt<span class="token punctuation">:</span> Event<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n   <span class="token function">removeEventListener</span><span class="token punctuation">(</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n      listener<span class="token operator">?</span><span class="token punctuation">:</span> EventListenerOrEventListenerObject <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n      options<span class="token operator">?</span><span class="token punctuation">:</span> EventListenerOptions <span class="token operator">|</span> <span class="token builtin">boolean</span>\n   <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>比如在 change 事件中，会使用的 e.target 来获取当前的值，它的的类型就是 EventTarget。来看下面的例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="35646000561947378000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<input onChange={(e) => onSourceChange(e)} placeholder=\'最多30个字\' />;\n\nconst onSourceChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n   if (e.target.value.length > 30) {\n      message.error(\'请长度不能超过30个字，请重新输入\');\n      return;\n   }\n   setSourceInput(e.target.value);\n};`, `35646000561947378000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">onSourceChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>最多30个字<span class="token punctuation">\'</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> onSourceChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLInputElement</span></span><span class="token punctuation">></span></span><span class="token plain-text">) => </span><span class="token punctuation">{</span>\n   <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">\'请长度不能超过30个字，请重新输入\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n   <span class="token function">setSourceInput</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token plain-text">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="事件处理函数类型"><a href="#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>事件处理函数类型</h3>\n<p>React 也为我们提供了贴心的提供了事件处理函数的类型声明，来看看所有的事件处理函数的类型声明：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="25523263401622966000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }[\'bivarianceHack\'];\n\ntype ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n// 剪切板事件处理函数\ntype ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;\n// 复合事件处理函数\ntype CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;\n// 拖拽事件处理函数\ntype DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;\n// 焦点事件处理函数\ntype FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;\n// 表单事件处理函数\ntype FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;\n// Change事件处理函数\ntype ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;\n// 键盘事件处理函数\ntype KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;\n// 鼠标事件处理函数\ntype MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;\n// 触屏事件处理函数\ntype TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;\n// 指针事件处理函数\ntype PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;\n// 界面事件处理函数\ntype UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;\n// 滚轮事件处理函数\ntype WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;\n// 动画事件处理函数\ntype AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;\n// 过渡事件处理函数\ntype TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;`, `25523263401622966000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> EventHandler<span class="token operator">&lt;</span><span class="token constant">E</span> <span class="token keyword">extends</span> <span class="token class-name">SyntheticEvent</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">bivarianceHack</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> <span class="token constant">E</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token string">\'bivarianceHack\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> ReactEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>SyntheticEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 剪切板事件处理函数</span>\n<span class="token keyword">type</span> ClipboardEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>ClipboardEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 复合事件处理函数</span>\n<span class="token keyword">type</span> CompositionEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>CompositionEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 拖拽事件处理函数</span>\n<span class="token keyword">type</span> DragEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>DragEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 焦点事件处理函数</span>\n<span class="token keyword">type</span> FocusEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>FocusEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 表单事件处理函数</span>\n<span class="token keyword">type</span> FormEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>FormEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// Change事件处理函数</span>\n<span class="token keyword">type</span> ChangeEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>ChangeEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 键盘事件处理函数</span>\n<span class="token keyword">type</span> KeyboardEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>KeyboardEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 鼠标事件处理函数</span>\n<span class="token keyword">type</span> MouseEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>MouseEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 触屏事件处理函数</span>\n<span class="token keyword">type</span> TouchEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>TouchEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 指针事件处理函数</span>\n<span class="token keyword">type</span> PointerEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>PointerEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 界面事件处理函数</span>\n<span class="token keyword">type</span> UIEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>UIEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 滚轮事件处理函数</span>\n<span class="token keyword">type</span> WheelEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>WheelEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 动画事件处理函数</span>\n<span class="token keyword">type</span> AnimationEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>AnimationEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n<span class="token comment">// 过渡事件处理函数</span>\n<span class="token keyword">type</span> TransitionEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>TransitionEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里面的 T 的类型也都是 Element，指的是触发该事件的 HTML 标签元素的类型</p>\n<p>EventHandler 会接收一个 E，它表示事件处理函数中 Event 对象的类型。bivarianceHack 是事件处理函数的类型定义，函数接收一个 Event 对象，并且其类型为接收到的泛型变量 E 的类型，返回值为 void。</p>\n<p>还看上面的那个例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="51564864789961200000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type State = {\n   text: string;\n};\n\nconst App: React.FC = () => {\n   const [text, setText] = useState<string>(\'\');\n\n   const onChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n      setText(e.currentTarget.value);\n   };\n\n   return (\n      <div>\n         <input type=\'text\' value={text} onChange={this.onChange} />\n      </div>\n   );\n};`, `51564864789961200000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">type</span> State <span class="token operator">=</span> <span class="token punctuation">{</span>\n   text<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> App<span class="token punctuation">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span> setText<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text">(\'\');\n\n   const onChange: React.ChangeEventHandler</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLInputElement</span></span><span class="token punctuation">></span></span><span class="token plain-text"> = (e) => </span><span class="token punctuation">{</span>\n      <span class="token function">setText</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token plain-text">;\n\n   return (\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>text<span class="token punctuation">\'</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n   );\n};</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里给 onChange 方法定义了方法的类型，它是一个 ChangeEventHandler 的类型，并且作用的对象时一个 HTMLImnputElement 类型的标签（input 标签）。</p>\n<h2 id="html-标签类型"><a href="#html-%E6%A0%87%E7%AD%BE%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTML 标签类型</h2>\n<h3 id="常见标签类型"><a href="#%E5%B8%B8%E8%A7%81%E6%A0%87%E7%AD%BE%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>常见标签类型</h3>\n<p>所有的 HTML 标签的类型都被定义在 intrinsicElements 接口中，常见的标签及其类型如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="18045735710934420000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`a: HTMLAnchorElement;\nbody: HTMLBodyElement;\nbr: HTMLBRElement;\nbutton: HTMLButtonElement;\ndiv: HTMLDivElement;\nh1: HTMLHeadingElement;\nh2: HTMLHeadingElement;\nh3: HTMLHeadingElement;\nhtml: HTMLHtmlElement;\nimg: HTMLImageElement;\ninput: HTMLInputElement;\nul: HTMLUListElement;\nli: HTMLLIElement;\nlink: HTMLLinkElement;\np: HTMLParagraphElement;\nspan: HTMLSpanElement;\nstyle: HTMLStyleElement;\ntable: HTMLTableElement;\ntbody: HTMLTableSectionElement;\nvideo: HTMLVideoElement;\naudio: HTMLAudioElement;\nmeta: HTMLMetaElement;\nform: HTMLFormElement;`, `18045735710934420000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts">a<span class="token punctuation">:</span> HTMLAnchorElement<span class="token punctuation">;</span>\nbody<span class="token punctuation">:</span> HTMLBodyElement<span class="token punctuation">;</span>\nbr<span class="token punctuation">:</span> HTMLBRElement<span class="token punctuation">;</span>\nbutton<span class="token punctuation">:</span> HTMLButtonElement<span class="token punctuation">;</span>\ndiv<span class="token punctuation">:</span> HTMLDivElement<span class="token punctuation">;</span>\nh1<span class="token punctuation">:</span> HTMLHeadingElement<span class="token punctuation">;</span>\nh2<span class="token punctuation">:</span> HTMLHeadingElement<span class="token punctuation">;</span>\nh3<span class="token punctuation">:</span> HTMLHeadingElement<span class="token punctuation">;</span>\nhtml<span class="token punctuation">:</span> HTMLHtmlElement<span class="token punctuation">;</span>\nimg<span class="token punctuation">:</span> HTMLImageElement<span class="token punctuation">;</span>\ninput<span class="token punctuation">:</span> HTMLInputElement<span class="token punctuation">;</span>\nul<span class="token punctuation">:</span> HTMLUListElement<span class="token punctuation">;</span>\nli<span class="token punctuation">:</span> HTMLLIElement<span class="token punctuation">;</span>\nlink<span class="token punctuation">:</span> HTMLLinkElement<span class="token punctuation">;</span>\np<span class="token punctuation">:</span> HTMLParagraphElement<span class="token punctuation">;</span>\nspan<span class="token punctuation">:</span> HTMLSpanElement<span class="token punctuation">;</span>\nstyle<span class="token punctuation">:</span> HTMLStyleElement<span class="token punctuation">;</span>\ntable<span class="token punctuation">:</span> HTMLTableElement<span class="token punctuation">;</span>\ntbody<span class="token punctuation">:</span> HTMLTableSectionElement<span class="token punctuation">;</span>\nvideo<span class="token punctuation">:</span> HTMLVideoElement<span class="token punctuation">;</span>\naudio<span class="token punctuation">:</span> HTMLAudioElement<span class="token punctuation">;</span>\nmeta<span class="token punctuation">:</span> HTMLMetaElement<span class="token punctuation">;</span>\nform<span class="token punctuation">:</span> HTMLFormElement<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>那什么时候会使用到标签类型呢，上面 Event 事件类型和事件处理函数类型中都使用到了标签的类型。上面的很多的类型都需要传入一个 ELement 类型的泛型参数，这个泛型参数就是对应的标签类型值，可以根据标签来选择对应的标签类型。这些类型都继承自 HTMLElement 类型，如果使用时对类型类型要求不高，可以直接写 HTMLELement。</p>\n<p>比如下面的例子：</p>\n<html><head></head><body><div class="gatsby-code-button-container" data-toaster-id="5101541708766643000" data-toaster-class="gatsby-code-button-toaster" data-toaster-text-class="gatsby-code-button-toaster-text" data-toaster-text="复制成功" data-toaster-duration="3500" onclick="copyToClipboard(`<Button\n   type=\'text\'\n   onClick={(e: React.MouseEvent<HTMLElement>) => {\n      handleOperate();\n      e.stopPropagation();\n   }}\n>\n   <img data-src={cancelChangeIcon} alt=\'\' />\n   取消修改\n</Button>`, `5101541708766643000`)">\n              <div class="gatsby-code-button" title="tsx">\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div></body></html>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span>\n   <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>text<span class="token punctuation">\'</span></span>\n   <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> React<span class="token punctuation">.</span>MouseEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLElement</span></span><span class="token punctuation">></span></span><span class="token plain-text">) => </span><span class="token punctuation">{</span>\n      <span class="token function">handleOperate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token plain-text">}</span></span>\n<span class="token punctuation">></span></span><span class="token plain-text">\n   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cancelChangeIcon<span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span><span class="token punctuation">\'</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n   取消修改\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>其实，在直接操作 DOM 时也会用到标签类型，虽然我们现在通常会使用框架来开发，但是有时候也避免不了直接操作 DOM。比如项目中的某一部分组件是通过 npm 来引入的其他组的组件，而在很多时候，需要动态的去个性化这个组件的样式，最直接的办法就是通过原生 JavaScript 获取到 DOM 元素，来进行样式的修改，这时候就会用到标签类型。 ​ 来看下面的例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="67562142618693845000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`document.querySelectorAll(\'.paper\').forEach((item) => {\n   const firstPageHasAddEle = (item.firstChild as HTMLDivElement).classList.contains(\'add-ele\');\n\n   if (firstPageHasAddEle) {\n      item.removeChild(item.firstChild as ChildNode);\n   }\n});`, `67562142618693845000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts">document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">\'.paper\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> firstPageHasAddEle <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>firstChild <span class="token keyword">as</span> HTMLDivElement<span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">\'add-ele\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token keyword">if</span> <span class="token punctuation">(</span>firstPageHasAddEle<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      item<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>firstChild <span class="token keyword">as</span> ChildNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在第一页有个 add-ele 元素的时候就删除它。这里我们将 item.firstChild 断言成了 HTMLDivElement 类型，如果不断言，item.firstChild 的类型就是 ChildNode，而 ChildNode 类型中是不存在 classList 属性的，所以就就会报错，当我们把他断言成 HTMLDivElement 类型时，就不会报错了。很多时候，标签类型可以和断言（as）一起使用。</p>\n<p>后面在 removeChild 时又使用了 as 断言，为什么呢？item.firstChild 不是已经自动识别为 ChildNode 类型了吗？因为 TS 会认为，我们可能不能获取到类名为 paper 的元素，所以 item.firstChild 的类型就被推断为 ChildNode | null，我们有时候比 TS 更懂我们定义的元素，知道页面一定存在 paper 元素，所以可以直接将 item.firstChild 断言成 ChildNode 类型。</p>\n<h3 id="标签属性类型"><a href="#%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>标签属性类型</h3>\n<p>每个 HTML 标签都有自己的属性，比如 Input 框就有 value、width、placeholder、max-length 等属性，下面是 Input 框的属性类型定义：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="57158505191010870000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface InputHTMLAttributes<T> extends HTMLAttributes<T> {\n   accept?: string | undefined;\n   alt?: string | undefined;\n   autoComplete?: string | undefined;\n   autoFocus?: boolean | undefined;\n   capture?: boolean | string | undefined;\n   checked?: boolean | undefined;\n   crossOrigin?: string | undefined;\n   disabled?: boolean | undefined;\n   enterKeyHint?: \'enter\' | \'done\' | \'go\' | \'next\' | \'previous\' | \'search\' | \'send\' | undefined;\n   form?: string | undefined;\n   formAction?: string | undefined;\n   formEncType?: string | undefined;\n   formMethod?: string | undefined;\n   formNoValidate?: boolean | undefined;\n   formTarget?: string | undefined;\n   height?: number | string | undefined;\n   list?: string | undefined;\n   max?: number | string | undefined;\n   maxLength?: number | undefined;\n   min?: number | string | undefined;\n   minLength?: number | undefined;\n   multiple?: boolean | undefined;\n   name?: string | undefined;\n   pattern?: string | undefined;\n   placeholder?: string | undefined;\n   readOnly?: boolean | undefined;\n   required?: boolean | undefined;\n   size?: number | undefined;\n   src?: string | undefined;\n   step?: number | string | undefined;\n   type?: string | undefined;\n   value?: string | ReadonlyArray<string> | number | undefined;\n   width?: number | string | undefined;\n\n   onChange?: ChangeEventHandler<T> | undefined;\n}`, `57158505191010870000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">InputHTMLAttributes</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">HTMLAttributes</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   accept<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   alt<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   autoComplete<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   autoFocus<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   capture<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   checked<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   crossOrigin<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   disabled<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   enterKeyHint<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token string">\'enter\'</span> <span class="token operator">|</span> <span class="token string">\'done\'</span> <span class="token operator">|</span> <span class="token string">\'go\'</span> <span class="token operator">|</span> <span class="token string">\'next\'</span> <span class="token operator">|</span> <span class="token string">\'previous\'</span> <span class="token operator">|</span> <span class="token string">\'search\'</span> <span class="token operator">|</span> <span class="token string">\'send\'</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   form<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   formAction<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   formEncType<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   formMethod<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   formNoValidate<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   formTarget<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   height<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   list<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   max<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   maxLength<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   min<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   minLength<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   multiple<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   name<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   pattern<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   placeholder<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   readOnly<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   required<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   size<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   src<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   step<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   <span class="token keyword">type</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   value<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> ReadonlyArray<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n\n   onChange<span class="token operator">?</span><span class="token punctuation">:</span> ChangeEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>如果我们需要直接操作 DOM，就可能会用到元素属性类型，常见的元素属性类型如下：</p>\n<ul>\n<li>HTML 属性类型：HTMLAttributes</li>\n<li>按钮属性类型：ButtonHTMLAttributes</li>\n<li>表单属性类型：FormHTMLAttributes</li>\n<li>图片属性类型：ImgHTMLAttributes</li>\n<li>输入框属性类型：InputHTMLAttributes</li>\n<li>链接属性类型：LinkHTMLAttributes</li>\n<li>meta 属性类型：MetaHTMLAttributes</li>\n<li>选择框属性类型：SelectHTMLAttributes</li>\n<li>表格属性类型：TableHTMLAttributes</li>\n<li>输入区属性类型：TextareaHTMLAttributes</li>\n<li>视频属性类型：VideoHTMLAttributes</li>\n<li>SVG 属性类型：SVGAttributes</li>\n<li>WebView 属性类型：WebViewHTMLAttributes</li>\n</ul>\n<p>一般情况下，我们是很少需要在项目中显式的去定义标签属性的类型。如果子级去封装组件库的话，这些属性就能发挥它们的作用了：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="76035620377830870000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`import React from \'react\';\nimport classNames from \'classnames\';\n\nexport enum ButtonSize {\n   Large = \'lg\',\n   Small = \'sm\'\n}\n\nexport enum ButtonType {\n   Primary = \'primary\',\n   Default = \'default\',\n   Danger = \'danger\',\n   Link = \'link\'\n}\n\ninterface BaseButtonProps {\n   className?: string;\n   disabled?: boolean;\n   size?: ButtonSize;\n   btnType?: ButtonType;\n   children: React.ReactNode;\n   href?: string;\n}\n\n// 使用 交叉类型（&）获得我们自己定义的属性和原生 button 的属性\ntype NativeButtonProps = BaseButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>;\n\n// 使用 交叉类型（&）获得我们自己定义的属性和原生 a 标签的属性\ntype AnchorButtonProps = BaseButtonProps & React.AnchorHTMLAttributes<HTMLAnchorElement>;\n\n// 使用 Partial<> 使两种属性可选\nexport type ButtonProps = Partial<NativeButtonProps & AnchorButtonProps>;\n\nconst Button: React.FC<ButtonProps> = (props) => {\n   const { disabled, className, size, btnType, children, href, ...restProps } = props;\n\n   const classes = classNames(\'btn\', className, {\n      [\\`btn-\\${btnType}\\`]: btnType,\n      [\\`btn-\\${size}\\`]: size,\n      disabled: btnType === ButtonType.Link && disabled // 只有 a 标签才有 disabled 类名，button 没有\n   });\n\n   if (btnType === ButtonType.Link && href) {\n      return (\n         <a className={classes} href={href} {...restProps}>\n            {children}\n         </a>\n      );\n   } else {\n      return (\n         <button\n            className={classes}\n            disabled={disabled} // button 元素默认有 disabled 属性，所以即便没给他设置样式也会和普通 button 有一定区别\n            {...restProps}\n         >\n            {children}\n         </button>\n      );\n   }\n};\n\nButton.defaultProps = {\n   disabled: false,\n   btnType: ButtonType.Default\n};\n\nexport default Button;`, `76035620377830870000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> classNames <span class="token keyword">from</span> <span class="token string">\'classnames\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">enum</span> ButtonSize <span class="token punctuation">{</span>\n   Large <span class="token operator">=</span> <span class="token string">\'lg\'</span><span class="token punctuation">,</span>\n   Small <span class="token operator">=</span> <span class="token string">\'sm\'</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">enum</span> ButtonType <span class="token punctuation">{</span>\n   Primary <span class="token operator">=</span> <span class="token string">\'primary\'</span><span class="token punctuation">,</span>\n   Default <span class="token operator">=</span> <span class="token string">\'default\'</span><span class="token punctuation">,</span>\n   Danger <span class="token operator">=</span> <span class="token string">\'danger\'</span><span class="token punctuation">,</span>\n   Link <span class="token operator">=</span> <span class="token string">\'link\'</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">BaseButtonProps</span> <span class="token punctuation">{</span>\n   className<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   disabled<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n   size<span class="token operator">?</span><span class="token punctuation">:</span> ButtonSize<span class="token punctuation">;</span>\n   btnType<span class="token operator">?</span><span class="token punctuation">:</span> ButtonType<span class="token punctuation">;</span>\n   children<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span>\n   href<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用 交叉类型（&amp;）获得我们自己定义的属性和原生 button 的属性</span>\n<span class="token keyword">type</span> NativeButtonProps <span class="token operator">=</span> BaseButtonProps <span class="token operator">&amp;</span> React<span class="token punctuation">.</span>ButtonHTMLAttributes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLButtonElement</span></span><span class="token punctuation">></span></span><span class="token plain-text">;\n\n// 使用 交叉类型（&amp;）获得我们自己定义的属性和原生 a 标签的属性\ntype AnchorButtonProps = BaseButtonProps &amp; React.AnchorHTMLAttributes</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLAnchorElement</span></span><span class="token punctuation">></span></span><span class="token plain-text">;\n\n// 使用 Partial&lt;> 使两种属性可选\nexport type ButtonProps = Partial&lt;NativeButtonProps &amp; AnchorButtonProps>;\n\nconst Button: React.FC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ButtonProps</span></span><span class="token punctuation">></span></span><span class="token plain-text"> = (props) => </span><span class="token punctuation">{</span>\n   <span class="token keyword">const</span> <span class="token punctuation">{</span> disabled<span class="token punctuation">,</span> className<span class="token punctuation">,</span> size<span class="token punctuation">,</span> btnType<span class="token punctuation">,</span> children<span class="token punctuation">,</span> href<span class="token punctuation">,</span> <span class="token operator">...</span>restProps <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n\n   <span class="token keyword">const</span> classes <span class="token operator">=</span> <span class="token function">classNames</span><span class="token punctuation">(</span><span class="token string">\'btn\'</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">btn-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>btnType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">:</span> btnType<span class="token punctuation">,</span>\n      <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">btn-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">:</span> size<span class="token punctuation">,</span>\n      disabled<span class="token punctuation">:</span> btnType <span class="token operator">===</span> ButtonType<span class="token punctuation">.</span>Link <span class="token operator">&amp;&amp;</span> disabled <span class="token comment">// 只有 a 标签才有 disabled 类名，button 没有</span>\n   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token keyword">if</span> <span class="token punctuation">(</span>btnType <span class="token operator">===</span> ButtonType<span class="token punctuation">.</span>Link <span class="token operator">&amp;&amp;</span> href<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">}</span></span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>href<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">restProps</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">\n         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n         <span class="token operator">&lt;</span>button\n            className<span class="token operator">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">}</span>\n            disabled<span class="token operator">=</span><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span> <span class="token comment">// button 元素默认有 disabled 属性，所以即便没给他设置样式也会和普通 button 有一定区别</span>\n            <span class="token punctuation">{</span><span class="token operator">...</span>restProps<span class="token punctuation">}</span>\n         <span class="token operator">></span>\n            <span class="token punctuation">{</span>children<span class="token punctuation">}</span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token plain-text">;\n\nButton.defaultProps = </span><span class="token punctuation">{</span>\n   disabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n   btnType<span class="token punctuation">:</span> ButtonType<span class="token punctuation">.</span>Default\n<span class="token punctuation">}</span><span class="token plain-text">;\n\nexport default Button;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="高阶组件"><a href="#%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>高阶组件</h2>\n<h3 id="类组件-1"><a href="#%E7%B1%BB%E7%BB%84%E4%BB%B6-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>类组件</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="46987989248371480000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface WithLoadingProps {\n   loading: boolean;\n}\n\nconst withLoading = <P extends object>(Component: React.ComponentType<P>) =>\n   class WithLoading extends React.Component<P & WithLoadingProps> {\n      render() {\n         const { loading, ...props } = this.props;\n         return loading ? <LoadingSpinner /> : <Component {...(props as P)} />;\n      }\n   };`, `46987989248371480000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">WithLoadingProps</span> <span class="token punctuation">{</span>\n   loading<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> withLoading <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">object</span><span class="token punctuation">></span></span><span class="token plain-text">(Component: React.ComponentType</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span><span class="token plain-text">) =>\n   class WithLoading extends React.Component&lt;P &amp; WithLoadingProps> </span><span class="token punctuation">{</span>\n      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n         <span class="token keyword">return</span> loading <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LoadingSpinner</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">(</span>props <span class="token keyword">as</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span><span class="token plain-text">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="函数组件-1"><a href="#%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>函数组件</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="24387318286843220000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const withLoading = <P extends object>(Component: React.ComponentType<P>): React.FC<P & WithLoadingProps> => ({\n   loading,\n   ...props\n}: WithLoadingProps) => (loading ? <LoadingSpinner /> : <Component {...(props as P)} />);`, `24387318286843220000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="tsx"\n              >\n                <span class="gatsby-code-button-language">tsx</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="tsx"><pre style="counter-reset: linenumber NaN" class="language-tsx line-numbers"><code class="language-tsx"><span class="token keyword">const</span> withLoading <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">object</span><span class="token punctuation">></span></span><span class="token plain-text">(Component: React.ComponentType</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span><span class="token plain-text">): React.FC&lt;P &amp; WithLoadingProps> => ({\n   loading,\n   ...props\n}: WithLoadingProps) => (loading ? </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LoadingSpinner</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"> : &lt;Component </span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">(</span>props <span class="token keyword">as</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"> />);</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="工具泛型的实现"><a href="#%E5%B7%A5%E5%85%B7%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>工具泛型的实现</h1>\n<h2 id="partial"><a href="#partial" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Partial</h2>\n<p>Partial 作用是将传入的属性变为可选项</p>\n<h3 id="前置知识"><a href="#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>前置知识</h3>\n<p>首先我们需要理解两个关键字 keyof 和 in，keyof 可以用来取得一个对象接口的所有 key 值，比如</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79809926534926730000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Foo {\n   name: string;\n   age: number;\n}\ntype T = keyof Foo; // -> &quot;name&quot; | &quot;age&quot;`, `79809926534926730000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Foo<span class="token punctuation">;</span> <span class="token comment">// -> "name" | "age"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>而 in 则可以遍历枚举类型， 例如</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="72943629264177010000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Keys = \'a\' | \'b\';\ntype Obj = {\n   [p in Keys]: any;\n}; // -> { a: any， b: any }`, `72943629264177010000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Keys <span class="token operator">=</span> <span class="token string">\'a\'</span> <span class="token operator">|</span> <span class="token string">\'b\'</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> Obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span>p <span class="token keyword">in</span> Keys<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// -> { a: any， b: any }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="源码解析"><a href="#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>源码解析</h3>\n<p>keyof 产生联合类型，in 则可以遍历枚举类型，所以他们经常一起使用，看下 Partial 源码</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="53046415800999090000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Partial<T> = {\n   [P in keyof T]?: T[P];\n};`, `53046415800999090000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>上面语句的意思是 keyof T 拿到 T 所有属性名，然后 in 进行遍历，将值赋给 P，最后 <code class="language-text">T[P]</code> 取得相应属性的值</p>\n<p>结合中间的 ? 我们就明白了 Partial 的含义了</p>\n<h3 id="使用场景"><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用场景</h3>\n<p>假设我们有一个定义 user 的接口，如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="83294582861901920000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface IUser {\n   name: string;\n   age: number;\n   department: string;\n}`, `83294582861901920000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">IUser</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   department<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>经过 Partial 类型转化后得到</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="23846996576181100000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type optional = Partial<IUser>;\n\n// optional的结果如下\ntype optional = {\n   name?: string | undefined;\n   age?: number | undefined;\n   department?: string | undefined;\n};`, `23846996576181100000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> optional <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>IUser<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token comment">// optional的结果如下</span>\n<span class="token keyword">type</span> optional <span class="token operator">=</span> <span class="token punctuation">{</span>\n   name<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   age<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n   department<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="required"><a href="#required" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Required</h2>\n<p>Required 的作用是将传入的属性变为必选项，源码如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="72048170979234130000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Required<T> = {\n   [P in keyof T]-?: T[P];\n};`, `72048170979234130000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>我们发现一个有意思的用法 -?，这里很好理解就是将可选项代表的 ? 去掉，从而让这个类型变成必选项。</p>\n<p>与之对应的还有个+? ，这个含义自然与-?之前相反，它是用来把属性变成可选项的</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="38660610535116140000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface IPerson {\n   name?: string;\n   age?: number;\n   height?: number;\n}\n\nconst person: Required<IPerson> = {\n   name: \'zhangsan\',\n   age: 18,\n   height: 180\n};`, `38660610535116140000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>\n   name<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   age<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   height<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> person<span class="token punctuation">:</span> Required<span class="token operator">&lt;</span>IPerson<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token string">\'zhangsan\'</span><span class="token punctuation">,</span>\n   age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n   height<span class="token punctuation">:</span> <span class="token number">180</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="mutable-未包含"><a href="#mutable-%E6%9C%AA%E5%8C%85%E5%90%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mutable (未包含)</h2>\n<p>类似地，其实还有对 + 和 -，这里要说的不是变量的之间的进行加减而是对 readonly 进行加减。</p>\n<p>以下代码的作用就是将 T 的所有属性的 readonly 移除，你也可以写一个相反的出来.</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="45502332291080760000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Mutable<T> = {\n   -readonly [P in keyof T]: T[P];\n};`, `45502332291080760000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Mutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h2 id="readonly"><a href="#readonly" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Readonly</h2>\n<p>将传入的属性变为只读选项, 源码如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="52707510626442320000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Readonly<T> = {\n   readonly [P in keyof T]: T[P];\n};`, `52707510626442320000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="13675213751270855000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface IPerson {\n   name: string;\n   age: number;\n}\n\nconst person: Readonly<IPerson> = {\n   name: \'zhangsan\',\n   age: 18\n};\n\nperson.age = 20; //  Error: cannot reassign a readonly property`, `13675213751270855000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> person<span class="token punctuation">:</span> Readonly<span class="token operator">&lt;</span>IPerson<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token string">\'zhangsan\'</span><span class="token punctuation">,</span>\n   age<span class="token punctuation">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nperson<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">//  Error: cannot reassign a readonly property</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="record"><a href="#record" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Record</h2>\n<h3 id="前置知识-1"><a href="#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>前置知识</h3>\n<p>此处注意 K extends keyof T 和直接使用 K in keyof T 的区别，keyof T 仅仅代表键的字符串文字类型，而 extends keyof T 将返回该属性相同的类型</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="69270016963734980000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function prop<T, K extends keyof T>(obj: T, key: K) {\n   return obj[key];\n}\n\nfunction prop2<T>(obj: T, key: keyof T) {\n   return obj[key];\n}\n\nlet o = {\n   p1: 0,\n   p2: \'\'\n};\n\nlet v = prop(o, \'p1\'); // is number, K is of type \'p1\'\nlet v2 = prop2(o, \'p1\'); // is number | string, no extra info is captured`, `69270016963734980000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> prop<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> prop2<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>\n   p1<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n   p2<span class="token punctuation">:</span> <span class="token string">\'\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token function">prop</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">\'p1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// is number, K is of type \'p1\'</span>\n<span class="token keyword">let</span> v2 <span class="token operator">=</span> <span class="token function">prop2</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">\'p1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// is number | string, no extra info is captured</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="源码解析-1"><a href="#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>源码解析</h3>\n<p>将 K 中所有的属性的值转化为 T 类型</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="80341896688047540000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Record<K extends keyof any, T> = {\n   [P in K]: T;\n};`, `80341896688047540000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h3 id="使用场景-1"><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用场景</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="75578825247981670000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface IPageinfo {\n   name: string;\n}\n\ntype IPage = \'home\' | \'about\' | \'contact\';\n\nconst page: Record<IPage, IPageinfo> = {\n   about: { name: \'about\' },\n   contact: { name: \'contact\' },\n   home: { name: \'home\' }\n};`, `75578825247981670000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">IPageinfo</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> IPage <span class="token operator">=</span> <span class="token string">\'home\'</span> <span class="token operator">|</span> <span class="token string">\'about\'</span> <span class="token operator">|</span> <span class="token string">\'contact\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> page<span class="token punctuation">:</span> Record<span class="token operator">&lt;</span>IPage<span class="token punctuation">,</span> IPageinfo<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   about<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'about\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   contact<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'contact\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   home<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'home\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="pick"><a href="#pick" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Pick</h2>\n<p>从 T 中取出一系列 K 的属性</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="98203896917659880000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Pick<T, K extends keyof T> = {\n   [P in K]: T[P];\n};`, `98203896917659880000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="45920333083250810000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface IPerson {\n   name: string;\n   age: number;\n   height: number;\n}\n\nconst person: Pick<IPerson, \'name\' | \'age\'> = {\n   name: \'zhangsan\',\n   age: 18\n};`, `45920333083250810000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   height<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> person<span class="token punctuation">:</span> Pick<span class="token operator">&lt;</span>IPerson<span class="token punctuation">,</span> <span class="token string">\'name\'</span> <span class="token operator">|</span> <span class="token string">\'age\'</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token string">\'zhangsan\'</span><span class="token punctuation">,</span>\n   age<span class="token punctuation">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="exclude"><a href="#exclude" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exclude</h2>\n<h3 id="前置知识-2"><a href="#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>前置知识</h3>\n<p>在 ts 2.8 中引入了一个条件类型，示例如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="20499565809263866000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`T extends U ? X : Y`, `20499565809263866000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token constant">X</span> <span class="token punctuation">:</span> <span class="token constant">Y</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>以上语句的意思就是如果 T 是 U 的子类型的话，那么就会返回 X，否则返回 Y，甚至可以组合多个</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="27612583770097740000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type TypeName<T> = T extends string\n   ? \'string\'\n   : T extends number\n   ? \'number\'\n   : T extends boolean\n   ? \'boolean\'\n   : T extends undefined\n   ? \'undefined\'\n   : T extends Function\n   ? \'function\'\n   : \'object\';`, `27612583770097740000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> TypeName<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span>\n   <span class="token operator">?</span> <span class="token string">\'string\'</span>\n   <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">number</span>\n   <span class="token operator">?</span> <span class="token string">\'number\'</span>\n   <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">boolean</span>\n   <span class="token operator">?</span> <span class="token string">\'boolean\'</span>\n   <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">undefined</span>\n   <span class="token operator">?</span> <span class="token string">\'undefined\'</span>\n   <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Function</span>\n   <span class="token operator">?</span> <span class="token string">\'function\'</span>\n   <span class="token punctuation">:</span> <span class="token string">\'object\'</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>对于联合类型来说会自动分发条件，例如 T extends U ? X : Y，T 可能是 A | B 的联合类型，那实际情况就变成(A extends U ? X : Y) | (B extends U ? X : Y)</p>\n<h3 id="源码解析-2"><a href="#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>源码解析</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="81681963716096200000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Exclude<T, U> = T extends U ? never : T;`, `81681963716096200000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h3 id="使用场景-2"><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用场景</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="48415853789408180000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type T = Exclude<1 | 2, 1 | 3>; // -> 2`, `48415853789408180000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> <span class="token constant">T</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// -> 2</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>很轻松地得出结果 2，据代码和示例我们可以推断出 Exclude 的作用是从 T 中找出 U 中没有的元素，换种更加贴近语义的说法其实就是从 T 中排除 U</p>\n<h2 id="extract"><a href="#extract" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Extract</h2>\n<p>根据源码我们推断出 Extract 的作用是提取出 T 包含在 U 中的元素，换种更加贴近语义的说法就是从 T 中提取出 U</p>\n<p>源码如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="59855764370068250000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Extract<T, U> = T extends U ? T : never;`, `59855764370068250000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h2 id="omit"><a href="#omit" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Omit</h2>\n<p>用之前的 Pick 和 Exclude 进行组合，实现忽略对象某些属性功能，源码如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="33421801929799754000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;\n\n// 使用\ntype Foo = Omit<\n   {\n      name: string;\n      age: number;\n   },\n   \'name\'\n>; // -> { age: number }\n\ninterface IPerson {\n   name: string;\n   age: number;\n   height: number;\n}\n\nconst person: Omit<IPerson, \'age\' | \'sex\'> = {\n   name: \'zhangsan\',\n   height: 180\n};`, `33421801929799754000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用</span>\n<span class="token keyword">type</span> Foo <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>\n   <span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n      age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token string">\'name\'</span>\n<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// -> { age: number }</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   height<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> person<span class="token punctuation">:</span> Omit<span class="token operator">&lt;</span>IPerson<span class="token punctuation">,</span> <span class="token string">\'age\'</span> <span class="token operator">|</span> <span class="token string">\'sex\'</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token string">\'zhangsan\'</span><span class="token punctuation">,</span>\n   height<span class="token punctuation">:</span> <span class="token number">180</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="returntype"><a href="#returntype" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ReturnType</h2>\n<p>在阅读源码之前我们需要了解一下 infer 这个关键字，在条件类型语句中，我们可以用 infer 声明一个类型变量并且对它进行使用，我们可以用它获取函数的返回类型，源码如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="96298557076693170000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ReturnType<T> = T extends (...args: any[]) => infer R ? R : any;`, `96298557076693170000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> infer <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>其实这里的 infer R 就是声明一个变量来承载传入函数签名的返回值类型，简单说就是用它取到函数返回值的类型方便之后使用</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68404723035716140000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function foo(x: number): Array<number> {\n   return [x];\n}\ntype fn = ReturnType<typeof foo>;`, `68404723035716140000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> <span class="token builtin">number</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> fn <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> foo<span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="axiosreturntype-未包含"><a href="#axiosreturntype-%E6%9C%AA%E5%8C%85%E5%90%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AxiosReturnType (未包含)</h2>\n<p>开发经常使用 axios 进行封装 API 层请求，通常是一个函数返回一个 <code class="language-text">AxiosPromise&lt;Resp&gt;</code>，现在我想取到它的 Resp 类型，根据上一个工具泛型的知识我们可以这样写</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="88755501594333660000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`import { AxiosPromise } from \'axios\'; // 导入接口\ntype AxiosReturnType<T> = T extends (...args: any[]) => AxiosPromise<infer R> ? R : any;\n\n// 使用\ntype Resp = AxiosReturnType<Api>; // 泛型参数中传入你的 Api 请求函数`, `88755501594333660000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> AxiosPromise <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'axios\'</span><span class="token punctuation">;</span> <span class="token comment">// 导入接口</span>\n<span class="token keyword">type</span> AxiosReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> AxiosPromise<span class="token operator">&lt;</span>infer <span class="token constant">R</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用</span>\n<span class="token keyword">type</span> Resp <span class="token operator">=</span> AxiosReturnType<span class="token operator">&lt;</span>Api<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 泛型参数中传入你的 Api 请求函数</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="巧用-typescript"><a href="#%E5%B7%A7%E7%94%A8-typescript" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>巧用 TypeScript</h1>\n<h2 id="函数重载"><a href="#%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>函数重载</h2>\n<p>TypeScript 提供函数重载的功能，用来处理因函数参数不同而返回类型不同的使用场景，使用时只需为同一个函数定义多个类型即可，简单使用如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="43966350170947320000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare function test(a: number): number;\ndeclare function test(a: string): string;\n\nconst resS = test(\'Hello World\'); // resS 被推断出类型为 string；\nconst resN = test(1234); // resN 被推断出类型为 number;`, `43966350170947320000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">number</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> resS <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Hello World\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// resS 被推断出类型为 string；</span>\n<span class="token keyword">const</span> resN <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// resN 被推断出类型为 number;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>它也适用于参数不同，返回值类型相同的场景，我们只需要知道在哪种函数类型定义下能使用哪些参数即可。</p>\n<p>考虑如下例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="12656302090123383000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface User {\n   name: string;\n   age: number;\n}\n\ndeclare function test(para: User | number, flag?: boolean): number;`, `12656302090123383000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">para<span class="token punctuation">:</span> User <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> flag<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在这个 test 函数里，我们的本意可能是当传入参数 para 是 User 时，不传 flag，当传入 para 是 number 时，传入 flag。TypeScript 并不知道这些，当你传入 para 为 User 时，flag 同样允许你传入：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="27941992084653420000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const user = {\n   name: \'Jack\',\n   age: 666\n};\n\n// 没有报错，但是与想法违背\nconst res = test(user, false);`, `27941992084653420000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token string">\'Jack\'</span><span class="token punctuation">,</span>\n   age<span class="token punctuation">:</span> <span class="token number">666</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 没有报错，但是与想法违背</span>\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>使用函数重载能帮助我们实现：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="10293519834004770000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface User {\n   name: string;\n   age: number;\n}\n\ndeclare function test(para: User): number;\ndeclare function test(para: number, flag: boolean): number;\n\nconst user = {\n   name: \'Jack\',\n   age: 666\n};\n\n// bingo\n// Error: 参数不匹配\nconst res = test(user, false);`, `10293519834004770000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">para<span class="token punctuation">:</span> User</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">para<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> flag<span class="token punctuation">:</span> <span class="token builtin">boolean</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token string">\'Jack\'</span><span class="token punctuation">,</span>\n   age<span class="token punctuation">:</span> <span class="token number">666</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bingo</span>\n<span class="token comment">// Error: 参数不匹配</span>\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>实际项目中，你可能要多写几步，如在 class 中：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="7378986645957352000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface User {\n   name: string;\n   age: number;\n}\n\nconst user = {\n   name: \'Jack\',\n   age: 123\n};\n\nclass SomeClass {\n   /**\n    * 注释 1\n    */\n   public test(para: User): number;\n   /**\n    * 注释 2\n    */\n   public test(para: number, flag: boolean): number;\n   public test(para: User | number, flag?: boolean): number {\n      // 具体实现\n      return 11;\n   }\n}\n\nconst someClass = new SomeClass();\n\n// ok\nsomeClass.test(user);\nsomeClass.test(123, false);\n\n// Error，涉及到具体实现时，这个地方报错\nsomeClass.test(123);\nsomeClass.test(user, false);`, `7378986645957352000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token string">\'Jack\'</span><span class="token punctuation">,</span>\n   age<span class="token punctuation">:</span> <span class="token number">123</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n   <span class="token comment">/**\n    * 注释 1\n    */</span>\n   <span class="token keyword">public</span> <span class="token function">test</span><span class="token punctuation">(</span>para<span class="token punctuation">:</span> User<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   <span class="token comment">/**\n    * 注释 2\n    */</span>\n   <span class="token keyword">public</span> <span class="token function">test</span><span class="token punctuation">(</span>para<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> flag<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   <span class="token keyword">public</span> <span class="token function">test</span><span class="token punctuation">(</span>para<span class="token punctuation">:</span> User <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> flag<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 具体实现</span>\n      <span class="token keyword">return</span> <span class="token number">11</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> someClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ok</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Error，涉及到具体实现时，这个地方报错</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="映射类型"><a href="#%E6%98%A0%E5%B0%84%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>映射类型</h2>\n<p>自从 TypeScript 2.1 版本推出映射类型以来，它便不断被完善与增强。在 2.1 版本中，可以通过 keyof 拿到对象 key 类型，内置 Partial、Readonly、Record、Pick 映射类型；2.3 版本增加 ThisType；2.8 版本增加 Exclude、Extract、NonNullable、ReturnType、InstanceType；同时在此版本中增加条件类型与增强 keyof 的能力；3.1 版本支持对元组与数组的映射。这些无不意味着映射类型在 TypeScript 有着举足轻重的地位。</p>\n<p>其中 ThisType 并没有出现在官方文档中，它主要用来在对象字面量中键入 this：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="7839168250853001000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Compile with --noImplicitThis\n\ntype ObjectDescriptor<D, M> = {\n   data?: D;\n   methods?: M & ThisType<D & M>; // Type of \'this\' in methods is D & M\n};\n\nfunction makeObject<D, M>(desc: ObjectDescriptor<D, M>): D & M {\n   let data: object = desc.data || {};\n   let methods: object = desc.methods || {};\n   return { ...data, ...methods } as D & M;\n}\n\nlet obj = makeObject({\n   data: { x: 0, y: 0 },\n   methods: {\n      moveBy(dx: number, dy: number) {\n         this.x += dx; // Strongly typed this\n         this.y += dy; // Strongly typed this\n      }\n   }\n});\n\nobj.x = 10;\nobj.y = 20;\nobj.moveBy(5, 5);`, `7839168250853001000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// Compile with --noImplicitThis</span>\n\n<span class="token keyword">type</span> ObjectDescriptor<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   data<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">D</span><span class="token punctuation">;</span>\n   methods<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">M</span> <span class="token operator">&amp;</span> ThisType<span class="token operator">&lt;</span><span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// Type of \'this\' in methods is D &amp; M</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> makeObject<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">(</span>desc<span class="token punctuation">:</span> ObjectDescriptor<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span> <span class="token punctuation">{</span>\n   <span class="token keyword">let</span> data<span class="token punctuation">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n   <span class="token keyword">let</span> methods<span class="token punctuation">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>methods <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n   <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>data<span class="token punctuation">,</span> <span class="token operator">...</span>methods <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">makeObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   data<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token parameter">dx<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> <span class="token builtin">number</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> dx<span class="token punctuation">;</span> <span class="token comment">// Strongly typed this</span>\n         <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> dy<span class="token punctuation">;</span> <span class="token comment">// Strongly typed this</span>\n      <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nobj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>正是由于 ThisType 的出现，Vue 2.5 才得以增强对 TypeScript 的支持。</p>\n</blockquote>\n<p>虽已内置了很多映射类型，但在很多时候，我们需要根据自己的项目自定义映射类型：</p>\n<p>比如你可能想取出接口类型中的函数类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="76750023932543660000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type FunctionPropertyNames<T> = {\n   [K in keyof T]: T[K] extends Function ? K : never;\n}[keyof T];\ntype FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;\n\ninterface Part {\n   id: number;\n   name: string;\n   subparts: Part[];\n   updatePart(newName: string): void;\n}\n\ntype T40 = FunctionPropertyNames<Part>; // &quot;updatePart&quot;\ntype T42 = FunctionProperties<Part>; // { updatePart(newName: string): void }`, `76750023932543660000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> FunctionPropertyNames<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Function</span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> FunctionProperties<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> FunctionPropertyNames<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Part</span> <span class="token punctuation">{</span>\n   id<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   subparts<span class="token punctuation">:</span> Part<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n   <span class="token function">updatePart</span><span class="token punctuation">(</span>newName<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token constant">T40</span> <span class="token operator">=</span> FunctionPropertyNames<span class="token operator">&lt;</span>Part<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "updatePart"</span>\n<span class="token keyword">type</span> <span class="token constant">T42</span> <span class="token operator">=</span> FunctionProperties<span class="token operator">&lt;</span>Part<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// { updatePart(newName: string): void }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>比如你可能为了便捷，把本属于某个属性下的方法，通过一些方式 alias 到其他地方</p>\n<p>举个例子：SomeClass 下有个属性 value = [1, 2, 3]，你可能在 Decorators 给类添加了此种功能：在 SomeClass 里调用 this.find() 时，实际上是调用 this.value.find()，但是此时 TypeScript 并不知道这些：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="96216339158369980000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`class SomeClass {\n   value = [1, 2, 3];\n\n   someMethod() {\n      this.value.find(/* ... */); // ok\n      this.find(/* ... */); // Error：SomeClass 没有 find 方法。\n   }\n}`, `96216339158369980000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n   value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n   <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error：SomeClass 没有 find 方法。</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>借助于映射类型和 interface + class 的声明方式，可以实现我们的目的：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="11925566783531650000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ArrayMethodName = \'filter\' | \'forEach\' | \'find\';\n\ntype SelectArrayMethod<T> = {\n   [K in ArrayMethodName]: Array<T>[K];\n};\n\ninterface SomeClass extends SelectArrayMethod<number> {}\n\nclass SomeClass {\n   value = [1, 2, 3];\n\n   someMethod() {\n      this.forEach(/* ... */); // ok\n      this.find(/* ... */); // ok\n      this.filter(/* ... */); // ok\n      this.value; // ok\n      this.someMethod(); // ok\n   }\n}\n\nconst someClass = new SomeClass();\nsomeClass.forEach(/* ... */); // ok\nsomeClass.find(/* ... */); // ok\nsomeClass.filter(/* ... */); // ok\nsomeClass.value; // ok\nsomeClass.someMethod(); // ok`, `11925566783531650000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ArrayMethodName <span class="token operator">=</span> <span class="token string">\'filter\'</span> <span class="token operator">|</span> <span class="token string">\'forEach\'</span> <span class="token operator">|</span> <span class="token string">\'find\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> SelectArrayMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> ArrayMethodName<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">SomeClass</span> <span class="token keyword">extends</span> <span class="token class-name">SelectArrayMethod</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n   value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n   <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// ok</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> someClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\nsomeClass<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// ok</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>导出 SomeClass 类时，也能使用。</p>\n</blockquote>\n<p>可能有点不足的地方，在这段代码里 <code class="language-text">interface SomeClass extends SelectArrayMethod&lt;number&gt; {}</code> 你需要手动添加范型的具体类型（暂时没想到更好方式）。</p>\n<h2 id="类型断言"><a href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>类型断言</h2>\n<p>类型断言用来明确的告诉 TypeScript 值的详细类型，合理使用能减少我们的工作量。</p>\n<p>比如一个变量并没有初始值，但是我们知道它的类型信息（它可能是从后端返回）有什么办法既能正确推导类型信息，又能正常运行了？有一种网上的推荐方式是设置初始值，然后使用 typeof 拿到类型（可能会给其他地方用）。然而我可能比较懒，不喜欢设置初始值，这时候使用类型断言可以解决这类问题：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="24373855090920583000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface User {\n   name: string;\n   age: number;\n}\n\nexport default class NewRoom extends Vue {\n   private user = {} as User;\n}`, `24373855090920583000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">NewRoom</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>\n   <span class="token keyword">private</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> User<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在设置初始化时，添加断言，我们就无须添加初始值，编辑器也能正常的给予代码提示了。如果 user 属性很多，这样就能解决大量不必要的工作了，定义的 interface 也能给其他地方使用。</p>\n<h2 id="枚举类型"><a href="#%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>枚举类型</h2>\n<p>枚举类型分为数字类型与字符串类型，其中数字类型的枚举可以当标志使用：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="13427603382481545000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// https://github.com/Microsoft/TypeScript/blob/master/src/compiler/types.ts#L3859\nexport const enum ObjectFlags {\n   Class = 1 << 0, // Class\n   Interface = 1 << 1, // Interface\n   Reference = 1 << 2, // Generic type reference\n   Tuple = 1 << 3, // Synthesized generic tuple type\n   Anonymous = 1 << 4, // Anonymous\n   Mapped = 1 << 5, // Mapped\n   Instantiated = 1 << 6, // Instantiated anonymous or mapped type\n   ObjectLiteral = 1 << 7, // Originates in an object literal\n   EvolvingArray = 1 << 8, // Evolving array type\n   ObjectLiteralPatternWithComputedProperties = 1 << 9, // Object literal pattern with computed properties\n   ContainsSpread = 1 << 10, // Object literal contains spread operation\n   ReverseMapped = 1 << 11, // Object contains a property from a reverse-mapped type\n   JsxAttributes = 1 << 12, // Jsx attributes type\n   MarkerType = 1 << 13, // Marker type used for variance probing\n   JSLiteral = 1 << 14, // Object type declared in JS - disables errors on read/write of nonexisting members\n   ClassOrInterface = Class | Interface\n}`, `13427603382481545000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// https://github.com/Microsoft/TypeScript/blob/master/src/compiler/types.ts#L3859</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> ObjectFlags <span class="token punctuation">{</span>\n   Class <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// Class</span>\n   Interface <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// Interface</span>\n   Reference <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// Generic type reference</span>\n   Tuple <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// Synthesized generic tuple type</span>\n   Anonymous <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// Anonymous</span>\n   Mapped <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// Mapped</span>\n   Instantiated <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// Instantiated anonymous or mapped type</span>\n   ObjectLiteral <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token comment">// Originates in an object literal</span>\n   EvolvingArray <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token comment">// Evolving array type</span>\n   ObjectLiteralPatternWithComputedProperties <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token comment">// Object literal pattern with computed properties</span>\n   ContainsSpread <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// Object literal contains spread operation</span>\n   ReverseMapped <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token comment">// Object contains a property from a reverse-mapped type</span>\n   JsxAttributes <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token comment">// Jsx attributes type</span>\n   MarkerType <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token comment">// Marker type used for variance probing</span>\n   JSLiteral <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token comment">// Object type declared in JS - disables errors on read/write of nonexisting members</span>\n   ClassOrInterface <span class="token operator">=</span> Class <span class="token operator">|</span> Interface\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在 TypeScript src/compiler/types 源码里，定义了大量如上所示的基于数字类型的常量枚举。它们是一种有效存储和表示布尔值集合的方法。</p>\n<p>在 《深入理解 TypeScript》 中有一个使用例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="88739848134901140000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`enum AnimalFlags {\n   None = 0,\n   HasClaws = 1 << 0,\n   CanFly = 1 << 1,\n   HasClawsOrCanFly = HasClaws | CanFly\n}\n\ninterface Animal {\n   flags: AnimalFlags;\n   [key: string]: any;\n}\n\nfunction printAnimalAbilities(animal: Animal) {\n   var animalFlags = animal.flags;\n   if (animalFlags & AnimalFlags.HasClaws) {\n      console.log(\'animal has claws\');\n   }\n   if (animalFlags & AnimalFlags.CanFly) {\n      console.log(\'animal can fly\');\n   }\n   if (animalFlags == AnimalFlags.None) {\n      console.log(\'nothing\');\n   }\n}\n\nvar animal = { flags: AnimalFlags.None };\nprintAnimalAbilities(animal); // nothing\nanimal.flags |= AnimalFlags.HasClaws;\nprintAnimalAbilities(animal); // animal has claws\nanimal.flags &= ~AnimalFlags.HasClaws;\nprintAnimalAbilities(animal); // nothing\nanimal.flags |= AnimalFlags.HasClaws | AnimalFlags.CanFly;\nprintAnimalAbilities(animal); // animal has claws, animal can fly`, `88739848134901140000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">enum</span> AnimalFlags <span class="token punctuation">{</span>\n   None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n   HasClaws <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>\n   CanFly <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>\n   HasClawsOrCanFly <span class="token operator">=</span> HasClaws <span class="token operator">|</span> CanFly\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n   flags<span class="token punctuation">:</span> AnimalFlags<span class="token punctuation">;</span>\n   <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span><span class="token parameter">animal<span class="token punctuation">:</span> Animal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">var</span> animalFlags <span class="token operator">=</span> animal<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>\n   <span class="token keyword">if</span> <span class="token punctuation">(</span>animalFlags <span class="token operator">&amp;</span> AnimalFlags<span class="token punctuation">.</span>HasClaws<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'animal has claws\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n   <span class="token keyword">if</span> <span class="token punctuation">(</span>animalFlags <span class="token operator">&amp;</span> AnimalFlags<span class="token punctuation">.</span>CanFly<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'animal can fly\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n   <span class="token keyword">if</span> <span class="token punctuation">(</span>animalFlags <span class="token operator">==</span> AnimalFlags<span class="token punctuation">.</span>None<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'nothing\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span> flags<span class="token punctuation">:</span> AnimalFlags<span class="token punctuation">.</span>None <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nothing</span>\nanimal<span class="token punctuation">.</span>flags <span class="token operator">|=</span> AnimalFlags<span class="token punctuation">.</span>HasClaws<span class="token punctuation">;</span>\n<span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// animal has claws</span>\nanimal<span class="token punctuation">.</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>AnimalFlags<span class="token punctuation">.</span>HasClaws<span class="token punctuation">;</span>\n<span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nothing</span>\nanimal<span class="token punctuation">.</span>flags <span class="token operator">|=</span> AnimalFlags<span class="token punctuation">.</span>HasClaws <span class="token operator">|</span> AnimalFlags<span class="token punctuation">.</span>CanFly<span class="token punctuation">;</span>\n<span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// animal has claws, animal can fly</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上例代码中 |= 用来添加一个标志，&#x26;= 和 ~ 用来删除标志，| 用来合并标志。</p>\n<h2 id="decorator"><a href="#decorator" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Decorator</h2>\n<p>Decorator 早已不是什么新鲜事物，在 TypeScript 1.5 + 的版本中，我们可以利用内置类型 ClassDecorator、PropertyDecorator、MethodDecorator 与 ParameterDecorator 更快书写 Decorator，如 MethodDecorator：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="40711555826701630000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare type MethodDecorator = <T>(\n   target: Object,\n   propertyKey: string | symbol,\n   descriptor: TypedPropertyDescriptor<T>\n) => TypedPropertyDescriptor<T> | void;`, `40711555826701630000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">type</span> MethodDecorator <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>\n   <span class="token parameter">target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>\n   propertyKey<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span>\n   descriptor<span class="token punctuation">:</span> TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span>\n<span class="token punctuation">)</span> <span class="token operator">=></span> TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>使用时，只需在相应地方加上类型注解，匿名函数的参数类型也就会被自动推导出来了。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="32396856575903076000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function methodDecorator(): MethodDecorator {\n   return (target, key, descriptor) => {\n      // ...\n   };\n}`, `32396856575903076000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">methodDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> MethodDecorator <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n   <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>值得一提的是，如果你在 Decorator 给目标类的 prototype 添加属性时，TypeScript 并不知道这些：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="13958355412322621000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function testAble(): ClassDecorator {\n   return (target) => {\n      target.prototype.someValue = true;\n   };\n}\n\n@testAble()\nclass SomeClass {}\n\nconst someClass = new SomeClass();\n\nsomeClass.someValue(); // Error: Property \'someValue\' does not exist on type \'SomeClass\'.`, `13958355412322621000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">testAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClassDecorator <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>someValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n@<span class="token function">testAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> someClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nsomeClass<span class="token punctuation">.</span><span class="token function">someValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Property \'someValue\' does not exist on type \'SomeClass\'.</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这很常见，特别是当你想用 Decorator 来扩展一个类时。</p>\n<p>GitHub 上有一个关于此问题的 issues，直至目前，也没有一个合适的方案实现它。其主要问题在于 TypeScript 并不知道目标类是否使用了 Decorator 以及 Decorator 的名称。从这个 issues 来看，建议的解决办法是使用 Mixin：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="91584552555080170000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Constructor<T> = new (...args: any[]) => T;\n\n// mixin 函数的声明，需要实现\ndeclare function mixin<T1, T2>(...MixIns: [Constructor<T1>, Constructor<T2>]): Constructor<T1 & T2>;\n\nclass MixInClass1 {\n   mixinMethod1() {}\n}\n\nclass MixInClass2 {\n   mixinMethod2() {}\n}\n\nclass Base extends mixin(MixInClass1, MixInClass2) {\n   baseMethod() {}\n}\n\nconst x = new Base();\n\nx.baseMethod(); // OK\nx.mixinMethod1(); // OK\nx.mixinMethod2(); // OK\nx.mixinMethod3(); // Error`, `91584552555080170000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Constructor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token comment">// mixin 函数的声明，需要实现</span>\n<span class="token keyword">declare</span> <span class="token keyword">function</span> mixin<span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">...</span>MixIns<span class="token punctuation">:</span> <span class="token punctuation">[</span>Constructor<span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token operator">></span><span class="token punctuation">,</span> Constructor<span class="token operator">&lt;</span><span class="token constant">T2</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Constructor<span class="token operator">&lt;</span><span class="token constant">T1</span> <span class="token operator">&amp;</span> <span class="token constant">T2</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MixInClass1</span> <span class="token punctuation">{</span>\n   <span class="token function">mixinMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MixInClass2</span> <span class="token punctuation">{</span>\n   <span class="token function">mixinMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token keyword">extends</span> <span class="token class-name">mixin</span><span class="token punctuation">(</span>MixInClass1<span class="token punctuation">,</span> MixInClass2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token function">baseMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nx<span class="token punctuation">.</span><span class="token function">baseMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\nx<span class="token punctuation">.</span><span class="token function">mixinMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\nx<span class="token punctuation">.</span><span class="token function">mixinMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\nx<span class="token punctuation">.</span><span class="token function">mixinMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>当把大量的 JavaScript Decorator 重构为 Mixin 时，这无疑是一件让人头大的事情。</p>\n<p>这有一些偏方，能让你顺利从 JavaScript 迁移至 TypeScript：</p>\n<ul>\n<li>\n<p>显式赋值断言修饰符，即是在类里，明确说明某些属性存在于类上：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15385393771594291000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function testAble(): ClassDecorator {\n  return (target) => {\n     target.prototype.someValue = true;\n  };\n}\n\n@testAble()\nclass SomeClass {\n  public someValue!: boolean;\n}\n\nconst someClass = new SomeClass();\nsomeClass.someValue; // true`, `15385393771594291000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">testAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClassDecorator <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n     target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>someValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n@<span class="token function">testAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> someValue<span class="token operator">!</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> someClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsomeClass<span class="token punctuation">.</span>someValue<span class="token punctuation">;</span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>采用声明合并形式，单独定义一个 interface，把用 Decorator 扩展的属性的类型，放入 interface 中：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="49772944759125260000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface SomeClass {\n  someValue: boolean;\n}\n\nfunction testAble(): ClassDecorator {\n  return (target) => {\n     target.prototype.someValue = true;\n  };\n}\n\n@testAble()\nclass SomeClass {}\n\nconst someClass = new SomeClass();\nsomeClass.someValue; // true`, `49772944759125260000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n  someValue<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">testAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClassDecorator <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n     target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>someValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n@<span class="token function">testAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> someClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsomeClass<span class="token punctuation">.</span>someValue<span class="token punctuation">;</span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h2 id="reflect-metadata"><a href="#reflect-metadata" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reflect Metadata</h2>\n<p>Reflect Metadata 是 ES7 的一个提案，它主要用来在声明的时候添加和读取元数据。TypeScript 在 1.5+ 的版本已经支持它，你只需要：</p>\n<ul>\n<li>npm i reflect-metadata —save。</li>\n<li>在 tsconfig.json 里配置 emitDecoratorMetadata 选项。</li>\n</ul>\n<p>它具有诸多使用场景。</p>\n<h3 id="获取类型信息"><a href="#%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>获取类型信息</h3>\n<p>譬如在 vue-property-decorator 6.1 及其以下版本中，通过使用 Reflect.getMetadata API，Prop Decorator 能获取属性类型传至 Vue，简要代码如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="74782033217932620000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function Prop(): PropertyDecorator {\n   return (target, key: string) => {\n      const type = Reflect.getMetadata(\'design:type\', target, key);\n      console.log(\\`\\${key} type: \\${type.name}\\`);\n      // other...\n   };\n}\n\nclass SomeClass {\n   @Prop()\n   public Aprop!: string;\n}`, `74782033217932620000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> PropertyDecorator <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token keyword">type</span> <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">\'design:type\'</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// other...</span>\n   <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n   @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n   <span class="token keyword">public</span> Aprop<span class="token operator">!</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>运行代码可在控制台看到 Aprop type: string。除能获取属性类型外，通过 Reflect.getMetadata(“design:paramtypes”, target, key) 和 Reflect.getMetadata(“design:returntype”, target, key) 可以分别获取函数参数类型和返回值类型。</p>\n<h3 id="自定义-metadatakey"><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89-metadatakey" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>自定义 metadataKey</h3>\n<p>除能获取类型信息外，常用于自定义 metadataKey，并在合适的时机获取它的值，示例如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="44934597081419645000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function classDecorator(): ClassDecorator {\n   return (target) => {\n      // 在类上定义元数据，key 为 \\`classMetaData\\`，value 为 \\`a\\`\n      Reflect.defineMetadata(\'classMetaData\', \'a\', target);\n   };\n}\n\nfunction methodDecorator(): MethodDecorator {\n   return (target, key, descriptor) => {\n      // 在类的原型属性 \'someMethod\' 上定义元数据，key 为 \\`methodMetaData\\`，value 为 \\`b\\`\n      Reflect.defineMetadata(\'methodMetaData\', \'b\', target, key);\n   };\n}\n\n@classDecorator()\nclass SomeClass {\n   @methodDecorator()\n   someMethod() {}\n}\n\nReflect.getMetadata(\'classMetaData\', SomeClass); // \'a\'\nReflect.getMetadata(\'methodMetaData\', new SomeClass(), \'someMethod\'); // \'b\'`, `44934597081419645000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">classDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClassDecorator <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 在类上定义元数据，key 为 `classMetaData`，value 为 `a`</span>\n      Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">\'classMetaData\'</span><span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">methodDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> MethodDecorator <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 在类的原型属性 \'someMethod\' 上定义元数据，key 为 `methodMetaData`，value 为 `b`</span>\n      Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">\'methodMetaData\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n@<span class="token function">classDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n   @<span class="token function">methodDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n   <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">\'classMetaData\'</span><span class="token punctuation">,</span> SomeClass<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'a\'</span>\nReflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">\'methodMetaData\'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'someMethod\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'b\'</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="用例"><a href="#%E7%94%A8%E4%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>用例</h3>\n<h4 id="控制反转和依赖注入"><a href="#%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>控制反转和依赖注入</h4>\n<p>在 Angular 2+ 的版本中，控制反转与依赖注入便是基于此实现，现在，我们来实现一个简单版：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="18628697676245533000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Constructor<T = any> = new (...args: any[]) => T;\n\nconst Injectable = (): ClassDecorator => (target) => {};\n\nclass OtherService {\n   a = 1;\n}\n\n@Injectable()\nclass TestService {\n   constructor(public readonly otherService: OtherService) {}\n\n   testMethod() {\n      console.log(this.otherService.a);\n   }\n}\n\nconst Factory = <T>(target: Constructor<T>): T => {\n   // 获取所有注入的服务\n   const providers = Reflect.getMetadata(\'design:paramtypes\', target); // [OtherService]\n   const args = providers.map((provider: Constructor) => new provider());\n   return new target(...args);\n};\n\nFactory(TestService).testMethod(); // 1`, `18628697676245533000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Constructor<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Injectable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token parameter">ClassDecorator</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">OtherService</span> <span class="token punctuation">{</span>\n   a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>\n   <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> <span class="token keyword">readonly</span> otherService<span class="token punctuation">:</span> OtherService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n   <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>otherService<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> Factory <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> Constructor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token parameter"><span class="token constant">T</span></span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// 获取所有注入的服务</span>\n   <span class="token keyword">const</span> providers <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">\'design:paramtypes\'</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [OtherService]</span>\n   <span class="token keyword">const</span> args <span class="token operator">=</span> providers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">provider<span class="token punctuation">:</span> Constructor</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">provider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">target</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">Factory</span><span class="token punctuation">(</span>TestService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id="controller-与-get-的实现"><a href="#controller-%E4%B8%8E-get-%E7%9A%84%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Controller 与 Get 的实现</h4>\n<p>如果你在使用 TypeScript 开发 Node 应用，相信你对 Controller、Get、POST 这些 Decorator，并不陌生：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="94277109855296400000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`@Controller(\'/test\')\nclass SomeClass {\n   @Get(\'/a\')\n   someGetMethod() {\n      return \'hello world\';\n   }\n\n   @Post(\'/b\')\n   somePostMethod() {}\n}`, `94277109855296400000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts">@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">\'/test\'</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n   @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">\'/a\'</span><span class="token punctuation">)</span>\n   <span class="token function">someGetMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">\'hello world\'</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n\n   @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">\'/b\'</span><span class="token punctuation">)</span>\n   <span class="token function">somePostMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>它们也是基于 Reflect Metadata 实现，不同的是，这次我们将 metadataKey 定义在 descriptor 的 value 上（稍后解释），简单实现如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="70223723813511610000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const METHOD_METADATA = \'method\'；\nconst PATH_METADATA = \'path\'；\n\nconst Controller = (path: string): ClassDecorator => {\n  return target => {\n    Reflect.defineMetadata(PATH_METADATA, path, target);\n  }\n}\n\nconst createMappingDecorator = (method: string) => (path: string): MethodDecorator => {\n  return (target, key, descriptor) => {\n    Reflect.defineMetadata(PATH_METADATA, path, descriptor.value);\n    Reflect.defineMetadata(METHOD_METADATA, method, descriptor.value);\n  }\n}\n\nconst Get = createMappingDecorator(\'GET\');\nconst Post = createMappingDecorator(\'POST\');`, `70223723813511610000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> <span class="token constant">METHOD_METADATA</span> <span class="token operator">=</span> <span class="token string">\'method\'</span>；\n<span class="token keyword">const</span> <span class="token constant">PATH_METADATA</span> <span class="token operator">=</span> <span class="token string">\'path\'</span>；\n\n<span class="token keyword">const</span> Controller <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token parameter">ClassDecorator</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token parameter">target</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token constant">PATH_METADATA</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">createMappingDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token parameter">MethodDecorator</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token constant">PATH_METADATA</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token constant">METHOD_METADATA</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> Get <span class="token operator">=</span> <span class="token function">createMappingDecorator</span><span class="token punctuation">(</span><span class="token string">\'GET\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> Post <span class="token operator">=</span> <span class="token function">createMappingDecorator</span><span class="token punctuation">(</span><span class="token string">\'POST\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>接着，创建一个函数，映射出 route：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="48374612930521340000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function mapRoute(instance: Object) {\n   const prototype = Object.getPrototypeOf(instance);\n\n   // 筛选出类的 methodName\n   const methodsNames = Object.getOwnPropertyNames(prototype).filter(\n      (item) => !isConstructor(item) && isFunction(prototype[item])\n   );\n   return methodsNames.map((methodName) => {\n      const fn = prototype[methodName];\n\n      // 取出定义的 metadata\n      const route = Reflect.getMetadata(PATH_METADATA, fn);\n      const method = Reflect.getMetadata(METHOD_METADATA, fn);\n      return {\n         route,\n         method,\n         fn,\n         methodName\n      };\n   });\n}`, `48374612930521340000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">mapRoute</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token comment">// 筛选出类的 methodName</span>\n   <span class="token keyword">const</span> methodsNames <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token function">isConstructor</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>prototype<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>\n   <span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">return</span> methodsNames<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">methodName</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> fn <span class="token operator">=</span> prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// 取出定义的 metadata</span>\n      <span class="token keyword">const</span> route <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token constant">PATH_METADATA</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> method <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token constant">METHOD_METADATA</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n         route<span class="token punctuation">,</span>\n         method<span class="token punctuation">,</span>\n         fn<span class="token punctuation">,</span>\n         methodName\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们可以得到一些有用的信息：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="23716574259318215000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`Reflect.getMetadata(PATH_METADATA, SomeClass); // \'/test\'\n\nmapRoute(new SomeClass());\n\n/**\n * [{\n *    route: \'/a\',\n *    method: \'GET\',\n *    fn: someGetMethod() { ... },\n *    methodName: \'someGetMethod\'\n *  },{\n *    route: \'/b\',\n *    method: \'POST\',\n *    fn: somePostMethod() { ... },\n *    methodName: \'somePostMethod\'\n * }]\n *\n */`, `23716574259318215000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts">Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token constant">PATH_METADATA</span><span class="token punctuation">,</span> SomeClass<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'/test\'</span>\n\n<span class="token function">mapRoute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * [{\n *    route: \'/a\',\n *    method: \'GET\',\n *    fn: someGetMethod() { ... },\n *    methodName: \'someGetMethod\'\n *  },{\n *    route: \'/b\',\n *    method: \'POST\',\n *    fn: somePostMethod() { ... },\n *    methodName: \'somePostMethod\'\n * }]\n *\n */</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>最后，只需把 route 相关信息绑在 express 或者 koa 上就 ok 了。</p>\n<p>至于为什么要定义在 descriptor 的 value 上，我们希望 mapRoute 函数的参数是一个实例，而非 class 本身（控制反转）。</p>\n<h2 id="数组与元组"><a href="#%E6%95%B0%E7%BB%84%E4%B8%8E%E5%85%83%E7%BB%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>数组与元组</h2>\n<p>创建一个数组很简单：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="41679500600955850000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const arr = [1];`, `41679500600955850000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>此时 TypeScript 将会推断 arr 类型为 number[]：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="21358919615816196000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`arr.push(\'1\'); // Error`, `21358919615816196000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts">arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>当数组元素具有其它类型时，可以通过类型注解的方式：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="73573290360751930000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const arr: Array<string | number> = [1];\n\narr.push(\'1\'); // OK\narr.push(true); // Error`, `73573290360751930000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> arr<span class="token punctuation">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>或者你也可以通过可选元组的方式：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="23266372134557577000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const arr: [number, string?] = [1]; // arr 的成员类型可以是: number, string, undefined\narr.push(\'1\'); // OK\narr.push(true); // Error`, `23266372134557577000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">?</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr 的成员类型可以是: number, string, undefined</span>\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>使用元组形式，还能提供指定位置的类型检查：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="2224593833165333800"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`arr[0] = \'1\'; // Error\narr[1] = 1; // Error`, `2224593833165333800`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'1\'</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\narr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<h3 id="使用"><a href="#%E4%BD%BF%E7%94%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用</h3>\n<p>通常，我们使用 Promise.all 并行发出多个请求：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="55993272868430080000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface A {\n   name: string;\n}\n\ninterface B {\n   age: number;\n}\n\nconst [{ data: a }, { data: b }] = await Promise.all([axios.get<A>(\'http://some.1\'), axios.get<B>(\'http://some.2\')]);`, `55993272868430080000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>\n   age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> a <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> b <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'http://some.1\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'http://some.2\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>此时，TypeScript 能推出 a 的类型是 A, b 的类型是 B。</p>\n<p>现在，稍作改变：当满足特定条件时，才发出第二个请求：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="16993834031831323000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 使用类型注解\nconst requestList: [Promise<AxiosResponse<A>>, Promise<AxiosResponse<B>>?] = [axios.get<A>(\'http://some.1\')];\nif (flag) {\n   requestList[1] = axios.get<B>(\'http://some.2\');\n}\nconst [{ data: a }, response] = await Promise.all(requestList);`, `16993834031831323000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 使用类型注解</span>\n<span class="token keyword">const</span> requestList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span>AxiosResponse<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">>></span><span class="token punctuation">,</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>AxiosResponse<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">>></span><span class="token operator">?</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'http://some.1\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   requestList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'http://some.2\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> a <span class="token punctuation">}</span><span class="token punctuation">,</span> response<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>requestList<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们期望它会如预想时那样工作，可是事与愿违 Promise.all(requestList) 会出现类型兼容性的报错，在这个 Issues 里，描述了相同的问题。</p>\n<p>现在，你可以通过断言的方式，来让程序正常运作：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="47614176417031380000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const requestList: any[] = [axios.get<A>(\'http://some.1\')]; // 设置为 any[] 类型\nif (flag) {\n   requestList[1] = axios.get<B>(\'http://some.2\');\n}\nconst [{ data: a }, response] = (await Promise.all(requestList)) as [AxiosResponse<A>, AxiosResponse<B>?]; // 类型安全`, `47614176417031380000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> requestList<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'http://some.1\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 设置为 any[] 类型</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   requestList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'http://some.2\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> a <span class="token punctuation">}</span><span class="token punctuation">,</span> response<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>requestList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">[</span>AxiosResponse<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">,</span> AxiosResponse<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span><span class="token operator">?</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 类型安全</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="字面量类型"><a href="#%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>字面量类型</h2>\n<p>在 JavaScript 基础上，TypeScript 扩展了一系列字面量类型，用来确保类型的准确性。</p>\n<p>如创建一个字符串字面量：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="11825432627916642000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const a = \'hello\'; // a 的类型是 \'hello\'\na = \'world\'; // Error`, `11825432627916642000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span> <span class="token comment">// a 的类型是 \'hello\'</span>\na <span class="token operator">=</span> <span class="token string">\'world\'</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>或者你也可以：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="30698124587894090000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`let a: \'hello\' = \'hello\'; // a 的类型是 \'hello\'\na = \'world\'; // Error`, `30698124587894090000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token string">\'hello\'</span> <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span> <span class="token comment">// a 的类型是 \'hello\'</span>\na <span class="token operator">=</span> <span class="token string">\'world\'</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>其它数据类型与此相似。</p>\n<p>你也可以定义交叉类型与联合类型的字面量：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="39328065662686540000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface A {\n   name: string;\n}\n\ninterface B {\n   name: string;\n   age: number;\n}\n\ntype C = A | B;\ntype D = A & B;`, `39328065662686540000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">|</span> <span class="token constant">B</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token constant">D</span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token constant">B</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="对象字面量类型"><a href="#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>对象字面量类型</h3>\n<p>对于对象字面量的类型，TypeScript 有一个被称之为 <code class="language-text">Freshness</code> 的概念，它也被称为更严格的对象字面量检查，如下例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="2843736705095922700"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`let someThing: { name: string };\nsomeThing = { name: \'hello\' }; // ok\nsomeThing = { name: \'hello\', age: 123 }; // Error, 对象字面量只能指定已知属性, { name: string } 类型中不存在 age 属性\n\nlet otherThing = { name: \'hello\', age: 123 };\nsomeThing = otherThing; // ok`, `2843736705095922700`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">let</span> someThing<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nsomeThing <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'hello\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\nsomeThing <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'hello\'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Error, 对象字面量只能指定已知属性, { name: string } 类型中不存在 age 属性</span>\n\n<span class="token keyword">let</span> otherThing <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'hello\'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nsomeThing <span class="token operator">=</span> otherThing<span class="token punctuation">;</span> <span class="token comment">// ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>TypeScript 认为创建的每个对象字面量都是 <code class="language-text">fresh</code> 状态；当一个 <code class="language-text">fresh</code> 对象字面量赋值给一个变量时，如果对象的类型与变量类型不兼容时，会出现报错（如上例子中 <code class="language-text">someThine = { name: &#39;hello&#39;, age: 123 };</code> 的错误）；当对象字面量的类型变宽，对象字面量的 <code class="language-text">fresh</code> 状态会消失（如上例子中 <code class="language-text">someThing = otherThing;</code> 赋值以后 someThing 的类型变宽）。</p>\n<p>一个更实际的用例如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="40503165431175290000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function logName(something: { name: string }) {\n   console.log(something.name);\n}\n\nconst obj = {\n   name: \'matt\',\n   job: \'being awesome\'\n};\n\nlogName(obj); // ok\nlogName({ name: \'matt\' }); // ok\nlogName({ nama: \'matt\' }); // Error: nama 属性在 { name: string } 属性中不存在。\nlogName({ name: \'matt\', job: \'being awesome\' }); // Error: 对象字面量只能指定已知属性，\\`job\\` 属性在这里并不存在。`, `40503165431175290000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logName</span><span class="token punctuation">(</span><span class="token parameter">something<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>something<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token string">\'matt\'</span><span class="token punctuation">,</span>\n   job<span class="token punctuation">:</span> <span class="token string">\'being awesome\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">logName</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n<span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'matt\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n<span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">{</span> nama<span class="token punctuation">:</span> <span class="token string">\'matt\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: nama 属性在 { name: string } 属性中不存在。</span>\n<span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'matt\'</span><span class="token punctuation">,</span> job<span class="token punctuation">:</span> <span class="token string">\'being awesome\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: 对象字面量只能指定已知属性，`job` 属性在这里并不存在。</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>基本原理与上文中相似，当想用更严格的类型检查时，可以传一个具有 fresh 状态的对象字面量（如 <code class="language-text">logName({ name: &#39;matt&#39;, job: &#39;being awesome&#39; });</code>）。当你想多传一些属性至函数，可以将对象字面量赋值至一个新变量，然后再传至函数（如 <code class="language-text">logName(obj)</code>）。或者你也可以通过给函数形参添加多余类型的方式 <code class="language-text">function logName(someThing: { name: string; [key: string]: string })</code>。</p>\n<h2 id="用-decorator-限制类型"><a href="#%E7%94%A8-decorator-%E9%99%90%E5%88%B6%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>用 Decorator 限制类型</h2>\n<p>Decorator 可用于限制类方法的返回类型，如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="64755196435883790000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const TestDecorator = () => {\n   return (\n      target: Object,\n      key: string | symbol,\n      descriptor: TypedPropertyDescriptor<() => number> // 函数返回值必须是 number\n   ) => {\n      // 其他代码\n   };\n};\n\nclass Test {\n   @TestDecorator()\n   testMethod() {\n      return \'123\'; // Error: Type \'string\' is not assignable to type \'number\'\n   }\n}`, `64755196435883790000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> <span class="token function-variable function">TestDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>\n      key<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span>\n      descriptor<span class="token punctuation">:</span> TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token operator">></span> <span class="token comment">// 函数返回值必须是 number</span>\n   <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 其他代码</span>\n   <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n   @<span class="token function">TestDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n   <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">\'123\'</span><span class="token punctuation">;</span> <span class="token comment">// Error: Type \'string\' is not assignable to type \'number\'</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>你也可以用泛型让 TestDecorator 的传入参数类型与 testMethod 的返回参数类型兼容：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="520858958056025200"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const TestDecorator = <T>(para: T) => {\n   return (target: Object, key: string | symbol, descriptor: TypedPropertyDescriptor<() => T>) => {\n      // 其他代码\n   };\n};\n\nclass Test {\n   @TestDecorator(\'hello\')\n   testMethod() {\n      return 123; // Error: Type \'number\' is not assignable to type \'string\'\n   }\n}`, `520858958056025200`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> TestDecorator <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token parameter">para<span class="token punctuation">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">:</span> TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 其他代码</span>\n   <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n   @<span class="token function">TestDecorator</span><span class="token punctuation">(</span><span class="token string">\'hello\'</span><span class="token punctuation">)</span>\n   <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// Error: Type \'number\' is not assignable to type \'string\'</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="泛型的类型推断"><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>泛型的类型推断</h2>\n<p>在定义泛型后，有两种方式使用，一种是传入泛型类型，另一种使用类型推断，即编译器根据其他参数类型来推断泛型类型。简单示例如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="64406498535417180000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare function fn<T>(arg: T): T; // 定义一个泛型函数\n\nconst fn1 = fn<string>(\'hello\'); // 第一种方式，传入泛型类型 string\nconst fn2 = fn(1); // 第二种方式，从参数 arg 传入的类型 number，来推断出泛型 T 的类型是 number`, `64406498535417180000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">function</span> fn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span> <span class="token comment">// 定义一个泛型函数</span>\n\n<span class="token keyword">const</span> fn1 <span class="token operator">=</span> fn<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一种方式，传入泛型类型 string</span>\n<span class="token keyword">const</span> fn2 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第二种方式，从参数 arg 传入的类型 number，来推断出泛型 T 的类型是 number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>它通常与映射类型一起使用，用来实现一些比较复杂的功能。</p>\n<h3 id="vue-type-简单实现"><a href="#vue-type-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vue Type 简单实现</h3>\n<p>如下一个例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="22645098815413166000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Options<T> = {\n   [P in keyof T]: T[P];\n};\n\ndeclare function test<T>(o: Options<T>): T;\n\ntest({ name: \'Hello\' }).name; // string`, `22645098815413166000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">function</span> test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'Hello\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// string</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>test 函数将传入参数的所有属性取出来，现在我们来一步一步加工，实现想要的功能。</p>\n<p>首先，更改传入参数的形式，由 <code class="language-text">{ name: &#39;Hello&#39; }</code> 的形式变更为 <code class="language-text">{ data: { name: &#39;Hello&#39; } }</code>，调用函数的返回值类型不变，即 <code class="language-text">test({ data: { name: &#39;Hello&#39; } }).name</code> 的值也是 string 类型。</p>\n<p>这并不复杂，这只需要把传入参数的 data 类型设置为 T 即可：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="98140211066212660000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare function test<T>(o: { data: Options<T> }): T;\n\ntest({ data: { name: \'Hello\' } }).name; // string`, `98140211066212660000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">function</span> test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'Hello\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// string</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>当 data 对象里，含有函数时，它也能运作：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="20625049247191708000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const param = {\n   data: {\n      name: \'Hello\',\n      someMethod() {\n         return \'hello world\';\n      }\n   }\n};\n\ntest(param).someMethod(); // string`, `20625049247191708000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>\n   data<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'Hello\'</span><span class="token punctuation">,</span>\n      <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">return</span> <span class="token string">\'hello world\'</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>接着，考虑一种特殊的函数情景，像 Vue 中 Computed 一样，不调用函数，也能取出函数的返回值类型。现在传入参数的形式变更为：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="16125441110812199000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const param = {\n   data: {\n      name: \'Hello\'\n   },\n   computed: {\n      age() {\n         return 20;\n      }\n   }\n};`, `16125441110812199000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>\n   data<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'Hello\'</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>一个函数的类型可以简单的看成是 <code class="language-text">() =&gt; T</code> 的形式，对象中的方法类型，可以看成 <code class="language-text">a: () =&gt; T</code> 的形式，在反向推导时（由函数返回值，来推断类型 a 的类型）可以利用它，需要添加一个映射类型 <code class="language-text">Computed&lt;T&gt;</code>，用来处理 computed 里的函数：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="83596180222434640000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Options<T> = {\n   [P in keyof T]: T[P];\n};\n\ntype Computed<T> = {\n   [P in keyof T]: () => T[P];\n};\n\ninterface Params<T, M> {\n   data: Options<T>;\n   computed: Computed<M>;\n}\n\ndeclare function test<T, M>(o: Params<T, M>): T & M;\n\nconst param = {\n   data: {\n      name: \'Hello\'\n   },\n   computed: {\n      age() {\n         return 20;\n      }\n   }\n};\n\ntest(param).name; // string\ntest(param).age; // number`, `83596180222434640000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Computed<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Params</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   data<span class="token punctuation">:</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\n   computed<span class="token punctuation">:</span> Computed<span class="token operator">&lt;</span><span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">function</span> test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> Params<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>\n   data<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'Hello\'</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// string</span>\n<span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span> <span class="token comment">// number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>最后，结合巧用 ThisType 映射类型，可以轻松的实现在 computed age 方法下访问 data 中的数据：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="72565937704480700000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Options<T> = {\n   [P in keyof T]: T[P];\n};\n\ntype Computed<T> = {\n   [P in keyof T]: () => T[P];\n};\n\ninterface Params<T, M> {\n   data: Options<T>;\n   computed: Computed<M>;\n}\n\ndeclare function test<T, M>(o: Params<T, M>): T & M;\n\nconst param = {\n   data: {\n      name: \'Hello\'\n   },\n   computed: {\n      age() {\n         return 20;\n      }\n   }\n};\n\ntest(param).name; // string\ntest(param).age; // number`, `72565937704480700000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Computed<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Params</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   data<span class="token punctuation">:</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\n   computed<span class="token punctuation">:</span> Computed<span class="token operator">&lt;</span><span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">function</span> test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> Params<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>\n   data<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'Hello\'</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// string</span>\n<span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span> <span class="token comment">// number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="扁平数组构建树形结构"><a href="#%E6%89%81%E5%B9%B3%E6%95%B0%E7%BB%84%E6%9E%84%E5%BB%BA%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>扁平数组构建树形结构</h3>\n<p>扁平数组构建树形结构即是将一组扁平数组，根据 parent_id（或者是其他）转换成树形结构：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="33997004427047318000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 转换前数据\nconst arr = [\n   { id: 1, parentId: 0, name: \'test1\' },\n   { id: 2, parentId: 1, name: \'test2\' },\n   { id: 3, parentId: 0, name: \'test3\' }\n];\n\n// 转化后\n[\n   {\n      id: 1,\n      parentId: 0,\n      name: \'test1\',\n      children: [\n         {\n            id: 2,\n            parentId: 1,\n            name: \'test2\',\n            children: []\n         }\n      ]\n   },\n   {\n      id: 3,\n      parentId: 0,\n      name: \'test3\',\n      children: []\n   }\n];`, `33997004427047318000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 转换前数据</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n   <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> parentId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'test1\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> parentId<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'test2\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> parentId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'test3\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 转化后</span>\n<span class="token punctuation">[</span>\n   <span class="token punctuation">{</span>\n      id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      parentId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'test1\'</span><span class="token punctuation">,</span>\n      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n         <span class="token punctuation">{</span>\n            id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n            parentId<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n            name<span class="token punctuation">:</span> <span class="token string">\'test2\'</span><span class="token punctuation">,</span>\n            children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n         <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span>\n      id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n      parentId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'test3\'</span><span class="token punctuation">,</span>\n      children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>如果 children 字段名字不变，函数的类型并不难写，它大概是如下样子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="10537233647011312000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Item {\n   id: number;\n   parentId: number;\n   name: string;\n}\n\ntype TreeItem = Item & { children: TreeItem[] | [] };\n\ndeclare function listToTree(list: Item[]): TreeItem[];\n\nlistToTree(arr).forEach((i) => i.children); // ok`, `10537233647011312000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>\n   id<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   parentId<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> TreeItem <span class="token operator">=</span> Item <span class="token operator">&amp;</span> <span class="token punctuation">{</span> children<span class="token punctuation">:</span> TreeItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">listToTree</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">:</span> Item<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> TreeItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token function">listToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>但是在很多时候，children 字段的名字并不固定，而是从参数中传进来：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="45166354659348330000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const options = {\n   childrenKey: \'childrenList\'\n};\n\nlistToTree(arr, options);`, `45166354659348330000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n   childrenKey<span class="token punctuation">:</span> <span class="token string">\'childrenList\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">listToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>此时 children 字段名称应该为 childrenList：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="86095982510026650000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`[\n   {\n      id: 1,\n      parentId: 0,\n      name: \'test1\',\n      childrenList: [{ id: 2, parentId: 1, name: \'test2\', childrenList: [] }]\n   },\n   {\n      id: 3,\n      parentId: 0,\n      name: \'test3\',\n      childrenList: []\n   }\n];`, `86095982510026650000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token punctuation">[</span>\n   <span class="token punctuation">{</span>\n      id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      parentId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'test1\'</span><span class="token punctuation">,</span>\n      childrenList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> parentId<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'test2\'</span><span class="token punctuation">,</span> childrenList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span>\n      id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n      parentId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'test3\'</span><span class="token punctuation">,</span>\n      childrenList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>实现的思路大致是前文所说的利用泛型的类型推断，从传入的 options 参数中，得到 childrenKey 的类型，然后再传给 TreeItem，如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="6087143715273191000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Options<T extends string> {\n   // 限制为 string 类型\n   childrenKey: T;\n}\n\ndeclare function listToTree<T extends string = \'children\'>(list: Item[], options: Options<T>): TreeItem<T>[];`, `6087143715273191000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Options</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   <span class="token comment">// 限制为 string 类型</span>\n   childrenKey<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">function</span> listToTree<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">=</span> <span class="token string">\'children\'</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> Item<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> TreeItem<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>当 options 为 <code class="language-text">{ childrenKey: &#39;childrenList&#39; }</code> 时，T 能被正确推导出为 childrenList，接着只需要在 TreeItem 中，把 children 修改为传入的 T 即可：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="17138123807206940000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Item {\n   id: number;\n   parentId: number;\n   name: string;\n}\n\ninterface Options<T extends string> {\n   childrenKey: T;\n}\n\ntype TreeItem<T extends string> = Item & { [key in T]: TreeItem<T>[] | [] };\n\ndeclare function listToTree<T extends string = \'children\'>(list: Item[], options: Options<T>): TreeItem<T>[];\n\nlistToTree(arr, { childrenKey: \'childrenList\' }).forEach((i) => i.childrenList); // ok`, `17138123807206940000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>\n   id<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   parentId<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Options</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   childrenKey<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> TreeItem<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> Item <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> TreeItem<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">function</span> listToTree<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">=</span> <span class="token string">\'children\'</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> Item<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> TreeItem<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token function">listToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">{</span> childrenKey<span class="token punctuation">:</span> <span class="token string">\'childrenList\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>childrenList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>有一点局限性，由于对象字面量的 Fresh 的影响，当 options 不是以对象字面量的形式传入时，需要给它断言：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="73504047279131935000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const options = {\n   childrenKey: \'childrenList\' as \'childrenList\'\n};\n\nlistToTree(arr, options).forEach((i) => i.childrenList); // ok`, `73504047279131935000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n   childrenKey<span class="token punctuation">:</span> <span class="token string">\'childrenList\'</span> <span class="token keyword">as</span> <span class="token string">\'childrenList\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">listToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>childrenList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="infer"><a href="#infer" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>infer</h2>\n<p>infer 最早出现在此 PR 中，表示在 extends 条件语句中待推断的类型变量。</p>\n<p>简单示例如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="62783300322603350000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ParamType<T> = T extends (param: infer P) => any ? P : T;`, `62783300322603350000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ParamType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter">param<span class="token punctuation">:</span> infer <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>在这个条件语句 <code class="language-text">T extends (param: infer P) =&gt; any ? P : T</code> 中，<code class="language-text">infer P</code> 表示待推断的函数参数。</p>\n<p>整句表示为：如果 T 能赋值给 <code class="language-text">(param: infer P) =&gt; any</code>，则结果是 <code class="language-text">(param: infer P) =&gt; any</code> 类型中的参数 P，否则返回为 T。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="99757953423435730000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface User {\n   name: string;\n   age: number;\n}\n\ntype Func = (user: User) => void;\n\ntype Param = ParamType<Func>; // Param = User\ntype AA = ParamType<string>; // string`, `99757953423435730000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   age<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token function-variable function">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">user<span class="token punctuation">:</span> User</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Param <span class="token operator">=</span> ParamType<span class="token operator">&lt;</span>Func<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// Param = User</span>\n<span class="token keyword">type</span> <span class="token constant">AA</span> <span class="token operator">=</span> ParamType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// string</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="内置类型"><a href="#%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>内置类型</h3>\n<p>在 2.8 版本中，TypeScript 内置了一些与 infer 有关的映射类型：</p>\n<ul>\n<li>用于提取函数类型的返回值类型：</li>\n</ul>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="14430001379757230000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ReturnType<T> = T extends (...args: any[]) => infer P ? P : any;`, `14430001379757230000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> infer <span class="token constant">P</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>相比于文章开始给出的示例，<code class="language-text">ReturnType&lt;T&gt;</code> 只是将 infer P 从参数位置移动到返回值位置，因此此时 P 即是表示待推断的返回值类型。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="53675572065780530000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Func = () => User;\ntype Test = ReturnType<Func>; // Test = User`, `53675572065780530000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> <span class="token function-variable function">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> User<span class="token punctuation">;</span>\n<span class="token keyword">type</span> Test <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>Func<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// Test = User</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<ul>\n<li>用于提取构造函数中参数（实例）类型：</li>\n</ul>\n<p>一个构造函数可以使用 new 来实例化，因此它的类型通常表示如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="74219698635364560000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Constructor = new (...args: any[]) => any;`, `74219698635364560000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Constructor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>当 infer 用于构造函数类型中，可用于参数位置 <code class="language-text">new (...args: infer P) =&gt; any;</code> 和返回值位置 <code class="language-text">new (...args: any[]) =&gt; infer P;</code>。</p>\n<p>因此就内置如下两个映射类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="36008540766142570000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 获取参数类型\ntype ConstructorParameters<T extends new (...args: any[]) => any> = T extends new (...args: infer P) => any ? P : never;\n\n// 获取实例类型\ntype InstanceType<T extends new (...args: any[]) => any> = T extends new (...args: any[]) => infer R ? R : any;\n\nclass TestClass {\n   constructor(public name: string, public string: number) {}\n}\n\ntype Params = ConstructorParameters<typeof TestClass>; // [string, number]\n\ntype Instance = InstanceType<typeof TestClass>; // TestClass`, `36008540766142570000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 获取参数类型</span>\n<span class="token keyword">type</span> ConstructorParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> infer <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 获取实例类型</span>\n<span class="token keyword">type</span> InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> infer <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">{</span>\n   <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token builtin">string</span><span class="token punctuation">:</span> <span class="token builtin">number</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Params <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> TestClass<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// [string, number]</span>\n\n<span class="token keyword">type</span> Instance <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> TestClass<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// TestClass</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="一些用例"><a href="#%E4%B8%80%E4%BA%9B%E7%94%A8%E4%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一些用例</h3>\n<p>至此，相信你已经对 infer 已有基本了解，我们来看看一些使用它的「骚操作」：</p>\n<ul>\n<li>tuple 转 union ，如：<code class="language-text">[string, number] -&gt; string | number</code></li>\n</ul>\n<p>解答之前，我们需要了解 tuple 类型在一定条件下，是可以赋值给数组类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="26604969313640403000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type TTuple = [string, number];\ntype TArray = Array<string | number>;\n\ntype Res = TTuple extends TArray ? true : false; // true\ntype ResO = TArray extends TTuple ? true : false; // false`, `26604969313640403000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> TTuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> TArray <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Res <span class="token operator">=</span> TTuple <span class="token keyword">extends</span> <span class="token class-name">TArray</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">type</span> ResO <span class="token operator">=</span> TArray <span class="token keyword">extends</span> <span class="token class-name">TTuple</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>因此，在配合 infer 时，很容易做到：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="56160793191056000000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ElementOf<T> = T extends Array<infer E> ? E : never;\n\ntype TTuple = [string, number];\n\ntype ToUnion = ElementOf<TTuple>; // string | number`, `56160793191056000000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ElementOf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>infer <span class="token constant">E</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">E</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> TTuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> ToUnion <span class="token operator">=</span> ElementOf<span class="token operator">&lt;</span>TTuple<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// string | number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在 stackoverflow 上看到另一种解法，比较简（牛）单（逼）：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="53494474548076390000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type TTuple = [string, number];\ntype Res = TTuple[number]; // string | number`, `53494474548076390000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> TTuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> Res <span class="token operator">=</span> TTuple<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// string | number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<ul>\n<li>union 转 intersection，如：<code class="language-text">string | number -&gt; string &amp; number</code></li>\n</ul>\n<p>这个可能要稍微麻烦一点，需要 infer 配合 <code class="language-text">Distributive conditional types</code> 使用。</p>\n<p><code class="language-text">Distributive conditional types</code> 是由 <code class="language-text">naked type parameter</code> 构成的条件类型。而 <code class="language-text">naked type parameter</code> 表示没有被 Wrapped 的类型（如：<code class="language-text">Array&lt;T&gt;</code>、<code class="language-text">[T]</code>、<code class="language-text">Promise&lt;T&gt;</code> 等都是不是 <code class="language-text">naked type parameter</code>）。<code class="language-text">Distributive conditional types</code> 主要用于拆分 extends 左边部分的联合类型，举个例子：在条件类型 <code class="language-text">T extends U ? X : Y</code> 中，当 T 是 <code class="language-text">A | B</code> 时，会拆分成 <code class="language-text">A extends U ? X : Y | B extends U ? X : Y</code>；</p>\n<p>有了这个前提，再利用在逆变位置上，同一类型变量的多个候选类型将会被推断为交叉类型的特性，即</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="35447548584810205000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Bar<T> = T extends { a: (x: infer U) => void; b: (x: infer U) => void } ? U : never;\ntype T20 = Bar<{ a: (x: string) => void; b: (x: string) => void }>; // string\ntype T21 = Bar<{ a: (x: string) => void; b: (x: number) => void }>; // string & number`, `35447548584810205000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Bar<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> infer <span class="token constant">U</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function-variable function">b</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> infer <span class="token constant">U</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token constant">T20</span> <span class="token operator">=</span> Bar<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function-variable function">b</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// string</span>\n<span class="token keyword">type</span> <span class="token constant">T21</span> <span class="token operator">=</span> Bar<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function-variable function">b</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> <span class="token builtin">number</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// string &amp; number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>因此，综合以上几点，我们可以得到在 stackoverflow 上的一个答案：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="33264392908155060000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\n\ntype Result = UnionToIntersection<string | number>; // string & number`, `33264392908155060000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">any</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">:</span> <span class="token constant">U</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">:</span> infer <span class="token constant">I</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">I</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Result <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// string &amp; number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>当传入 <code class="language-text">string | number</code> 时：</p>\n<ul>\n<li>\n<p>第一步：<code class="language-text">(U extends any ? (k: U) =&gt; void : never)</code> 会把 union 拆分成 <code class="language-text">(string extends any ? (k: string) =&gt; void : never) | (number extends any ? (k: number)=&gt; void : never)</code>，即是得到 <code class="language-text">(k: string) =&gt; void | (k: number) =&gt; void</code>；</p>\n</li>\n<li>\n<p>第二步：<code class="language-text">(k: string) =&gt; void | (k: number) =&gt; void extends ((k: infer I) =&gt; void) ? I : never</code>，根据上文可以推断出 I 为 string &#x26; number。</p>\n</li>\n</ul>\n<h3 id="leetcode-的一道-typescript-面试题"><a href="#leetcode-%E7%9A%84%E4%B8%80%E9%81%93-typescript-%E9%9D%A2%E8%AF%95%E9%A2%98" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LeetCode 的一道 TypeScript 面试题</h3>\n<p>前段时间在 GitHub 上发现一道来自 LeetCode TypeScript 的面试题，比较有意思，题目的大致意思是：</p>\n<p>假设有一个这样的类型（原题中给出的是类，这里简化为 interface）：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="37548285702106776000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Module {\n   count: number;\n   message: string;\n   asyncMethod<T, U>(input: Promise<T>): Promise<Action<U>>;\n   syncMethod<T, U>(action: Action<T>): Action<U>;\n}`, `37548285702106776000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>\n   count<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   message<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   asyncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">>></span><span class="token punctuation">;</span>\n   syncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在经过 Connect 函数之后，返回值类型为</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="52773875387061354000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Result {\n  asyncMethod<T, U>(input: T): Action<U>;\n  syncMethod<T, U>(action: T): Action<U>;\n}`, `52773875387061354000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Result <span class="token punctuation">{</span>\n  asyncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">;</span>\n  syncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>其中 <code class="language-text">Action&lt;T&gt;</code> 的定义为：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="28806449140748680000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Action<T> {\n   payload?: T;\n   type: string;\n}`, `28806449140748680000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Action</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   payload<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n   <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里主要考察两点</p>\n<ul>\n<li>挑选出函数</li>\n<li>条件类型 + 此篇文章所提及的 infer</li>\n</ul>\n<p>接下来就比较简单了，主要是利用条件类型 + infer，如果函数可以赋值给 <code class="language-text">asyncMethod&lt;T, U&gt;(input: Promise&lt;T&gt;): Promise&lt;Action&lt;U&gt;&gt;</code>，则取值为 <code class="language-text">asyncMethod&lt;T, U&gt;(input: T): Action&lt;U&gt;</code></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="77476781932213240000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Action<T> {\n   payload?: T;\n   type: string;\n}\n\ninterface Module {\n   count: number;\n   message: string;\n   asyncMethod<T, U>(input: Promise<T>): Promise<Action<U>>;\n   syncMethod<T, U>(action: Action<T>): Action<U>;\n}\n\ntype asyncMethod<T, U> = (input: Promise<T>) => Promise<Action<U>>; // 转换前\ntype asyncMethodConnect<T, U> = (input: T) => Action<U>; // 转换后\ntype syncMethod<T, U> = (action: Action<T>) => Action<U>; // 转换前\ntype syncMethodConnect<T, U> = (action: T) => Action<U>; // 转换后\n\ntype methodsPick<T> = {\n   [P in keyof T]: T[P] extends Function ? P : never;\n}[keyof T];\n\ntype ModuleMethodsConnect<T> = T extends asyncMethod<infer U, infer V>\n   ? asyncMethodConnect<U, V>\n   : T extends syncMethod<infer U, infer V>\n   ? syncMethodConnect<U, V>\n   : never;\n\ntype ModuleMethods = methodsPick<Module>;\n\ntype Connect = (\n   module: Module\n) => {\n   [T in ModuleMethods]: ModuleMethodsConnect<Module[T]>;\n};`, `77476781932213240000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Action</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   payload<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n   <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>\n   count<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   message<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   asyncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">>></span><span class="token punctuation">;</span>\n   syncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> asyncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">>></span><span class="token punctuation">;</span> <span class="token comment">// 转换前</span>\n<span class="token keyword">type</span> asyncMethodConnect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 转换后</span>\n<span class="token keyword">type</span> syncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 转换前</span>\n<span class="token keyword">type</span> syncMethodConnect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 转换后</span>\n\n<span class="token keyword">type</span> methodsPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Function</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> ModuleMethodsConnect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">asyncMethod</span><span class="token operator">&lt;</span>infer <span class="token constant">U</span><span class="token punctuation">,</span> infer <span class="token constant">V</span><span class="token operator">></span>\n   <span class="token operator">?</span> asyncMethodConnect<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">></span>\n   <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">syncMethod</span><span class="token operator">&lt;</span>infer <span class="token constant">U</span><span class="token punctuation">,</span> infer <span class="token constant">V</span><span class="token operator">></span>\n   <span class="token operator">?</span> syncMethodConnect<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">></span>\n   <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> ModuleMethods <span class="token operator">=</span> methodsPick<span class="token operator">&lt;</span>Module<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token function-variable function">Connect</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n   <span class="token parameter"><span class="token keyword">module</span><span class="token punctuation">:</span> Module</span>\n<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">T</span> <span class="token keyword">in</span> ModuleMethods<span class="token punctuation">]</span><span class="token punctuation">:</span> ModuleMethodsConnect<span class="token operator">&lt;</span>Module<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="类型编程"><a href="#%E7%B1%BB%E5%9E%8B%E7%BC%96%E7%A8%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>类型编程</h1>\n<h2 id="泛型"><a href="#%E6%B3%9B%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>泛型</h2>\n<h3 id="写法"><a href="#%E5%86%99%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>写法</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="81101862617462440000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function foo<T>(arg: T): T {\n   return arg;\n}\n\n// 箭头函数下的书写\nconst foo = <T>(arg: T) => arg;\n\n// tsx 文件下的书写\nconst foo = <T extends {}>(arg: T) => arg;\n\nclass Foo<T, U> {\n   constructor(public arg1: T, public arg2: U) {}\n\n   public method(): T {\n      return this.arg1;\n   }\n}`, `81101862617462440000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> foo<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> arg<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 箭头函数下的书写</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token punctuation">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> arg<span class="token punctuation">;</span>\n\n<span class="token comment">// tsx 文件下的书写</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token punctuation">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> arg<span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> arg1<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token keyword">public</span> arg2<span class="token punctuation">:</span> <span class="token constant">U</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n   <span class="token keyword">public</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arg1<span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="函数泛型取对象的值"><a href="#%E5%87%BD%E6%95%B0%E6%B3%9B%E5%9E%8B%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%80%BC" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>函数泛型取对象的值</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="99456894738761320000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 函数泛型取对象的值，第一种形式\nfunction pickSingleValue<T>(obj: T, key: keyof T): T[keyof T] {\n   return obj[key];\n}\n\n// 针对第一种形式的缺点：keyof 出现了两次，泛型 T 应该被限制为对象类型\nfunction pickSingleValue<T extends object, U extends keyof T>(obj: T, key: U): T[U] {\n   return obj[key];\n}\n\n// 换一个功能：取出一系列值\nfunction pick<T extends object, U extends keyof T>(obj: T, keys: U[]): T[U][] {\n   return keys.map((key) => obj[key]);\n}\n\n// const fooObj = { a: 1, b: &quot;1&quot; };\n// pick(fooObj, [\'a\', \'b\']) // (string | number)[]`, `99456894738761320000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 函数泛型取对象的值，第一种形式</span>\n<span class="token keyword">function</span> pickSingleValue<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 针对第一种形式的缺点：keyof 出现了两次，泛型 T 应该被限制为对象类型</span>\n<span class="token keyword">function</span> pickSingleValue<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">U</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 换一个功能：取出一系列值</span>\n<span class="token keyword">function</span> pick<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> keys<span class="token punctuation">:</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">U</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// const fooObj = { a: 1, b: "1" };</span>\n<span class="token comment">// pick(fooObj, [\'a\', \'b\']) // (string | number)[]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="索引类型"><a href="#%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>索引类型</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="77633969753159990000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Foo {\n   [keys: string]: string;\n}\n\n// 由于 JS 可以同时通过数字与字符串访问对象属性，因此 keyof Foo 的结果会是 string | number\nconst o: Foo = {\n   1: \'芜湖！\'\n};\n\no[1] === o[\'1\'];`, `77633969753159990000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span>keys<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 由于 JS 可以同时通过数字与字符串访问对象属性，因此 keyof Foo 的结果会是 string | number</span>\n<span class="token keyword">const</span> o<span class="token punctuation">:</span> Foo <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">\'芜湖！\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\no<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> o<span class="token punctuation">[</span><span class="token string">\'1\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="映射类型-1"><a href="#%E6%98%A0%E5%B0%84%E7%B1%BB%E5%9E%8B-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>映射类型</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="61525357756546610000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface A {\n   a: boolean;\n   b: string;\n   c: number;\n   d: () => void;\n}\n\ntype StringifyA<T> = {\n   [K in keyof T]: string;\n};\n\ntype Clone<T> = {\n   [K in keyof T]: T[K];\n};`, `61525357756546610000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n   a<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n   b<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   c<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   <span class="token function-variable function">d</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> StringifyA<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Clone<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="条件类型"><a href="#%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>条件类型</h2>\n<h3 id="写法-1"><a href="#%E5%86%99%E6%B3%95-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>写法</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="44018395500950880000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 在这种情况下，条件类型的推导就会被延迟\ndeclare function strOrnum<T extends boolean>(x: T): T extends true ? string : number;\n\ntype TypeName<T> = T extends string\n   ? \'string\'\n   : T extends number\n   ? \'number\'\n   : T extends boolean\n   ? \'boolean\'\n   : T extends undefined\n   ? \'undefined\'\n   : T extends Function\n   ? \'function\'\n   : \'object\';`, `44018395500950880000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 在这种情况下，条件类型的推导就会被延迟</span>\n<span class="token keyword">declare</span> <span class="token keyword">function</span> strOrnum<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">boolean</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">true</span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> TypeName<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span>\n   <span class="token operator">?</span> <span class="token string">\'string\'</span>\n   <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">number</span>\n   <span class="token operator">?</span> <span class="token string">\'number\'</span>\n   <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">boolean</span>\n   <span class="token operator">?</span> <span class="token string">\'boolean\'</span>\n   <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">undefined</span>\n   <span class="token operator">?</span> <span class="token string">\'undefined\'</span>\n   <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Function</span>\n   <span class="token operator">?</span> <span class="token string">\'function\'</span>\n   <span class="token punctuation">:</span> <span class="token string">\'object\'</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="分布式条件类型"><a href="#%E5%88%86%E5%B8%83%E5%BC%8F%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>分布式条件类型</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="65576258948318780000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 对于属于裸类型参数的检查类型，条件类型会在实例化时自动分发到联合类型上\n// 使用上面的TypeName类型别名\ntype T1 = TypeName<string | (() => void)>; // &quot;string&quot; | &quot;function&quot;\n\ntype T2 = TypeName<string | string[]>; // &quot;string&quot; | &quot;object&quot;\n\ntype T3 = TypeName<string[] | number[]>; // &quot;object&quot;\n\ntype Naked<T> = T extends boolean ? \'Y\' : \'N\';\ntype Wrapped<T> = [T] extends [boolean] ? \'Y\' : \'N\';\n\n/*\n * 先分发到 Naked<number> | Naked<boolean>\n * 然后到 &quot;N&quot; | &quot;Y&quot;\n */\ntype Distributed = Naked<number | boolean>;\n\n/*\n * 不会分发，因为这里不是裸类型参数，直接是 [number | boolean] extends [boolean]\n * 然后是 &quot;N&quot;\n */\ntype NotDistributed = Wrapped<number | boolean>;`, `65576258948318780000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 对于属于裸类型参数的检查类型，条件类型会在实例化时自动分发到联合类型上</span>\n<span class="token comment">// 使用上面的TypeName类型别名</span>\n<span class="token keyword">type</span> <span class="token constant">T1</span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "string" | "function"</span>\n\n<span class="token keyword">type</span> <span class="token constant">T2</span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "string" | "object"</span>\n\n<span class="token keyword">type</span> <span class="token constant">T3</span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "object"</span>\n\n<span class="token keyword">type</span> Naked<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">boolean</span> <span class="token operator">?</span> <span class="token string">\'Y\'</span> <span class="token punctuation">:</span> <span class="token string">\'N\'</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> Wrapped<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">boolean</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token string">\'Y\'</span> <span class="token punctuation">:</span> <span class="token string">\'N\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\n * 先分发到 Naked&lt;number> | Naked&lt;boolean>\n * 然后到 "N" | "Y"\n */</span>\n<span class="token keyword">type</span> Distributed <span class="token operator">=</span> Naked<span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\n * 不会分发，因为这里不是裸类型参数，直接是 [number | boolean] extends [boolean]\n * 然后是 "N"\n */</span>\n<span class="token keyword">type</span> NotDistributed <span class="token operator">=</span> Wrapped<span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>没有被额外包装的联合类型参数，在条件类型进行判定时会将联合类型分发，分别进行判断。</p>\n<h2 id="infer-1"><a href="#infer-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>infer</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="70961397226887860000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const foo = (): string => {\n   return \'linbudu\';\n};\n\n// string\ntype FooReturnType = ReturnType<typeof foo>;\n\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\n\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;`, `70961397226887860000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token parameter"><span class="token builtin">string</span></span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token string">\'linbudu\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// string</span>\n<span class="token keyword">type</span> FooReturnType <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> foo<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> infer <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Parameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token builtin">any</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> infer <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>类型系统在获得足够的信息后，就能将 infer 后跟随的类型参数推导出来</p>\n<h2 id="类型守卫"><a href="#%E7%B1%BB%E5%9E%8B%E5%AE%88%E5%8D%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>类型守卫</h2>\n<h3 id="写法-2"><a href="#%E5%86%99%E6%B3%95-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>写法</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="81286778643465340000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// numOrStrProp: number | string;\nexport const isString = (arg: unknown): boolean => typeof arg === \'string\';\n\nfunction useIt(numOrStr: number | string) {\n   if (isString(numOrStr)) {\n      console.log(numOrStr.length); // 这里类型推断依然为 number | string，并没有起到缩小类型范围的作用\n   }\n}\n\n// 改进，使用 is 关键字，起作用了\nexport const isString = (arg: unknown): arg is string => typeof arg === \'string\';\n\n// 例子\nexport type Falsy = false | \'\' | 0 | null | undefined;\n\nexport const isFalsy = (val: unknown): val is Falsy => !val;`, `81286778643465340000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// numOrStrProp: number | string;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> isString <span class="token operator">=</span> <span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token parameter"><span class="token builtin">boolean</span></span> <span class="token operator">=></span> <span class="token keyword">typeof</span> arg <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">useIt</span><span class="token punctuation">(</span><span class="token parameter">numOrStr<span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>numOrStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numOrStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里类型推断依然为 number | string，并没有起到缩小类型范围的作用</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 改进，使用 is 关键字，起作用了</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> isString <span class="token operator">=</span> <span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token punctuation">:</span> arg <span class="token keyword">is</span> <span class="token parameter"><span class="token builtin">string</span></span> <span class="token operator">=></span> <span class="token keyword">typeof</span> arg <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 例子</span>\n<span class="token keyword">export</span> <span class="token keyword">type</span> Falsy <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token string">\'\'</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> isFalsy <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token punctuation">:</span> val <span class="token keyword">is</span> <span class="token parameter">Falsy</span> <span class="token operator">=></span> <span class="token operator">!</span>val<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="如何将-a--b-联合类型缩小到-a"><a href="#%E5%A6%82%E4%BD%95%E5%B0%86-a--b-%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E7%BC%A9%E5%B0%8F%E5%88%B0-a" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何将 A | B 联合类型缩小到 A</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79903381249108300000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`class A {\n   public a() {}\n\n   public useA() {\n      return \'A\';\n   }\n}\n\nclass B {\n   public b() {}\n\n   public useB() {\n      return \'B\';\n   }\n}\n\nfunction useIt(arg: A | B): void {\n   if (\'a\' in arg) {\n      arg.useA();\n   } else {\n      arg.useB();\n   }\n}`, `79903381249108300000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n   <span class="token keyword">public</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n   <span class="token keyword">public</span> <span class="token function">useA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">\'A\'</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>\n   <span class="token keyword">public</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n   <span class="token keyword">public</span> <span class="token function">useB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">\'B\'</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">useIt</span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token punctuation">:</span> <span class="token constant">A</span> <span class="token operator">|</span> <span class="token constant">B</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'a\'</span> <span class="token keyword">in</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      arg<span class="token punctuation">.</span><span class="token function">useA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      arg<span class="token punctuation">.</span><span class="token function">useB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="字面量类型作为类型守卫"><a href="#%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E7%B1%BB%E5%9E%8B%E5%AE%88%E5%8D%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>字面量类型作为类型守卫</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="17845307801731525000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface IBoy {\n   name: \'mike\';\n   gf: string;\n}\n\ninterface IGirl {\n   name: \'sofia\';\n   bf: string;\n}\n\nfunction getLover(child: IBoy | IGirl): string {\n   if (child.name === \'mike\') {\n      return child.gf;\n   } else {\n      return child.bf;\n   }\n}\n\n// 不同状态下的接口，这里不好判断\ninterface IUserProps {\n   isLogin: boolean;\n   name: string; // 用户名称仅在登录时有\n   from: string; // 用户来源（一般用于埋点），仅在未登录时有\n}\n\n// 分割接口\ninterface IUnLogin {\n   isLogin: false;\n   from: string; // 用户来源（一般用于埋点），仅在未登录时有\n}\n\ninterface ILogined {\n   isLogin: true;\n   name: string; // 用户名称仅在登录时有\n}\n\nfunction getUserInfo(user: IUnLogin | ILogined): string {\n   return user.isLogin === true ? user.name : user.from;\n}`, `17845307801731525000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">IBoy</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token string">\'mike\'</span><span class="token punctuation">;</span>\n   gf<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">IGirl</span> <span class="token punctuation">{</span>\n   name<span class="token punctuation">:</span> <span class="token string">\'sofia\'</span><span class="token punctuation">;</span>\n   bf<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getLover</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">:</span> IBoy <span class="token operator">|</span> IGirl</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n   <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'mike\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> child<span class="token punctuation">.</span>gf<span class="token punctuation">;</span>\n   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> child<span class="token punctuation">.</span>bf<span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 不同状态下的接口，这里不好判断</span>\n<span class="token keyword">interface</span> <span class="token class-name">IUserProps</span> <span class="token punctuation">{</span>\n   isLogin<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 用户名称仅在登录时有</span>\n   <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 用户来源（一般用于埋点），仅在未登录时有</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 分割接口</span>\n<span class="token keyword">interface</span> <span class="token class-name">IUnLogin</span> <span class="token punctuation">{</span>\n   isLogin<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n   <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 用户来源（一般用于埋点），仅在未登录时有</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ILogined</span> <span class="token punctuation">{</span>\n   isLogin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n   name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 用户名称仅在登录时有</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token parameter">user<span class="token punctuation">:</span> IUnLogin <span class="token operator">|</span> ILogined</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> user<span class="token punctuation">.</span>isLogin <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">?</span> user<span class="token punctuation">.</span>name <span class="token punctuation">:</span> user<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="工具类型"><a href="#%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>工具类型</h2>\n<p>以上重复的工具类型不再说明，以下只说明自定义的工具类型，大部分工具类型都来自于 <a href="https://github.com/piotrwitek/utility-types" target="_blank" rel="nofollow noreferrer noopener">utility-types</a> 三方库</p>\n<h3 id="提取-promise-的类型"><a href="#%E6%8F%90%E5%8F%96-promise-%E7%9A%84%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>提取 Promise 的类型</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="89751046618055770000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const foo = (): Promise<string> => {\n   return new Promise((resolve, reject) => {\n      resolve(\'linbudu\');\n   });\n};\n\ntype FooReturnType = ReturnType<typeof foo>; // Promise<string>\n\n// 使用 infer R 来等待类型系统推导出 R 的具体类型。\ntype PromiseType<T extends Promise<any>> = T extends Promise<infer R> ? R : never;\n\ntype NakedFooReturnType = PromiseType<FooReturnType>; // string`, `89751046618055770000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'linbudu\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> FooReturnType <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> foo<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// Promise&lt;string></span>\n\n<span class="token comment">// 使用 infer R 来等待类型系统推导出 R 的具体类型。</span>\n<span class="token keyword">type</span> PromiseType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Promise</span><span class="token operator">&lt;</span>infer <span class="token constant">R</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> NakedFooReturnType <span class="token operator">=</span> PromiseType<span class="token operator">&lt;</span>FooReturnType<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// string</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="递归的工具类型"><a href="#%E9%80%92%E5%BD%92%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>递归的工具类型</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="30353159955910193000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type DeepPartial<T> = {\n   [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};`, `30353159955910193000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> DeepPartial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">?</span> DeepPartial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h3 id="返回键名的工具类型"><a href="#%E8%BF%94%E5%9B%9E%E9%94%AE%E5%90%8D%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>返回键名的工具类型</h3>\n<p>利用 <code class="language-text">{ [K in keyof T]: ... }[keyof T]</code> 形式返回键名</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="67535498388721370000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type FunctTypeKeys<T extends object> = {\n   [K in keyof T]-?: T[K] extends Function ? K : never;\n}[keyof T];\n\ninterface IWithFuncKeys {\n   a: string;\n   b: number;\n   c: boolean;\n   d: () => void;\n}\n\ntype WTFIsThis<T extends object> = {\n   [K in keyof T]-?: T[K] extends Function ? K : never;\n};\n\ntype FunctTypeKeys<T extends object> = {\n   [K in keyof T]-?: T[K] extends Function ? K : never;\n}[keyof T];\n\ntype UseIt1 = WTFIsThis<IWithFuncKeys>;\n// {\n//     a: never;\n//     b: never;\n//     c: never;\n//     d: &quot;d&quot;;\n// }\n\ntype UseIt2 = FunctTypeKeys<IWithFuncKeys>; // d`, `67535498388721370000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> FunctTypeKeys<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Function</span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">IWithFuncKeys</span> <span class="token punctuation">{</span>\n   a<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   b<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   c<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n   <span class="token function-variable function">d</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> WTFIsThis<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Function</span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> FunctTypeKeys<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Function</span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> UseIt1 <span class="token operator">=</span> WTFIsThis<span class="token operator">&lt;</span>IWithFuncKeys<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// {</span>\n<span class="token comment">//     a: never;</span>\n<span class="token comment">//     b: never;</span>\n<span class="token comment">//     c: never;</span>\n<span class="token comment">//     d: "d";</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">type</span> UseIt2 <span class="token operator">=</span> FunctTypeKeys<span class="token operator">&lt;</span>IWithFuncKeys<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// d</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id="可选字段"><a href="#%E5%8F%AF%E9%80%89%E5%AD%97%E6%AE%B5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>可选字段</h4>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79988520635412510000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type WTFAMI1 = {} extends { prop: number } ? \'Y\' : \'N\';\ntype WTFAMI2 = {} extends { prop?: number } ? \'Y\' : \'N\';`, `79988520635412510000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> <span class="token constant">WTFAMI1</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token string">\'Y\'</span> <span class="token punctuation">:</span> <span class="token string">\'N\'</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token constant">WTFAMI2</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> prop<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token string">\'Y\'</span> <span class="token punctuation">:</span> <span class="token string">\'N\'</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>这里的 <code class="language-text">{} extends K</code>，只有 K 是可选的情况下才成立，使用如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="36356958729042678000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`export type RequiredKeys<T> = {\n   [K in keyof T]-?: {} extends Pick<T, K> ? never : K;\n}[keyof T];\n\nexport type OptionalKeys<T> = {\n   [K in keyof T]-?: {} extends Pick<T, K> ? K : never;\n}[keyof T];`, `36356958729042678000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">type</span> RequiredKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">Pick</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token punctuation">:</span> <span class="token constant">K</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">type</span> OptionalKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">Pick</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id="可变、不可变"><a href="#%E5%8F%AF%E5%8F%98%E3%80%81%E4%B8%8D%E5%8F%AF%E5%8F%98" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>可变、不可变</h4>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97176639464566340000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`/**\n * @desc 一个辅助类型，判断 X 和 Y 是否类型相同，\n * @returns 是则返回 A，否则返回 B\n */\ntype Equal<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;\n\nexport type MutableKeys<T extends object> = {\n   [P in keyof T]-?: Equal<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P, never>;\n}[keyof T];\n\nexport type IMmutableKeys<T extends object> = {\n   [P in keyof T]-?: Equals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, never, P>;\n}[keyof T];\n\ninterface IWithFuncKeys {\n   a: string;\n   b?: number;\n   readonly c: boolean[];\n   d?: () => void;\n}\n\ntype b = MutableKeys<IWithFuncKeys>; // &quot;a&quot; | &quot;b&quot; | &quot;d&quot;\ntype a = IMmutableKeys<IWithFuncKeys>; // &quot;c&quot;`, `97176639464566340000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">/**\n * @desc 一个辅助类型，判断 X 和 Y 是否类型相同，\n * @returns 是则返回 A，否则返回 B\n */</span>\n<span class="token keyword">type</span> Equal<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token punctuation">,</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token builtin">never</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">X</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Y</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token constant">B</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">type</span> MutableKeys<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> Equal<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">Q</span> <span class="token keyword">in</span> <span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">Q</span> <span class="token keyword">in</span> <span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token punctuation">,</span> <span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">type</span> IMmutableKeys<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> Equals<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">Q</span> <span class="token keyword">in</span> <span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">Q</span> <span class="token keyword">in</span> <span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">never</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">IWithFuncKeys</span> <span class="token punctuation">{</span>\n   a<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n   b<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   <span class="token keyword">readonly</span> c<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n   d<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> b <span class="token operator">=</span> MutableKeys<span class="token operator">&lt;</span>IWithFuncKeys<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "a" | "b" | "d"</span>\n<span class="token keyword">type</span> a <span class="token operator">=</span> IMmutableKeys<span class="token operator">&lt;</span>IWithFuncKeys<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "c"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="基于值类型的-pick-与-omit"><a href="#%E5%9F%BA%E4%BA%8E%E5%80%BC%E7%B1%BB%E5%9E%8B%E7%9A%84-pick-%E4%B8%8E-omit" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>基于值类型的 Pick 与 Omit</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="56932711245564430000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`export type PickByValueType<T, ValueType> = Pick<\n   T,\n   { [Key in keyof T]-?: T[Key] extends ValueType ? Key : never }[keyof T]\n>;\n\nexport type OmitByValueType<T, ValueType> = Pick<\n   T,\n   { [Key in keyof T]-?: T[Key] extends ValueType ? never : Key }[keyof T]\n>;`, `56932711245564430000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">type</span> PickByValueType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> ValueType<span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>\n   <span class="token constant">T</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span> <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">ValueType</span> <span class="token operator">?</span> Key <span class="token punctuation">:</span> <span class="token builtin">never</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span>\n<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">type</span> OmitByValueType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> ValueType<span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>\n   <span class="token constant">T</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span> <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">ValueType</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token punctuation">:</span> Key <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span>\n<span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="实战"><a href="#%E5%AE%9E%E6%88%98" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>实战</h1>\n<h2 id="参数简化"><a href="#%E5%8F%82%E6%95%B0%E7%AE%80%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参数简化</h2>\n<p>通过一个简单的功能把</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="98953957426939640000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`distribute({\n   type: \'LOGIN\',\n   email: string\n});`, `98953957426939640000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token function">distribute</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'LOGIN\'</span><span class="token punctuation">,</span>\n   email<span class="token punctuation">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这样的函数调用方式给简化为：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79409237280915600000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`distribute(\'LOGIN\', {\n   email: string\n});`, `79409237280915600000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token function">distribute</span><span class="token punctuation">(</span><span class="token string">\'LOGIN\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n   email<span class="token punctuation">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h3 id="分布条件类型的真实用例"><a href="#%E5%88%86%E5%B8%83%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%9C%9F%E5%AE%9E%E7%94%A8%E4%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>分布条件类型的真实用例</h3>\n<p>举一个类似 redux 中的 dispatch 的例子。</p>\n<p>首先，我们有一个联合类型 Action，用来表示所有可以被 dispatch 接受的参数类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="2445266043529259500"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Action =\n   | {\n        type: \'INIT\';\n     }\n   | {\n        type: \'SYNC\';\n     }\n   | {\n        type: \'LOG_IN\';\n        emailAddress: string;\n     }\n   | {\n        type: \'LOG_IN_SUCCESS\';\n        accessToken: string;\n     };`, `2445266043529259500`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Action <span class="token operator">=</span>\n   <span class="token operator">|</span> <span class="token punctuation">{</span>\n        <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'INIT\'</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n   <span class="token operator">|</span> <span class="token punctuation">{</span>\n        <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'SYNC\'</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n   <span class="token operator">|</span> <span class="token punctuation">{</span>\n        <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'LOG_IN\'</span><span class="token punctuation">;</span>\n        emailAddress<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n   <span class="token operator">|</span> <span class="token punctuation">{</span>\n        <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'LOG_IN_SUCCESS\'</span><span class="token punctuation">;</span>\n        accessToken<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>然后我们定义这个 dispatch 方法：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="10935257330726644000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare function dispatch(action: Action): void;\n\n// ok\ndispatch({\n   type: \'INIT\'\n});\n\n// ok\ndispatch({\n   type: \'LOG_IN\',\n   emailAddress: \'david.sheldrick@artsy.net\'\n});\n\n// ok\ndispatch({\n   type: \'LOG_IN_SUCCESS\',\n   accessToken: \'038fh239h923908h\'\n});`, `10935257330726644000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">:</span> Action</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ok</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'INIT\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ok</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'LOG_IN\'</span><span class="token punctuation">,</span>\n   emailAddress<span class="token punctuation">:</span> <span class="token string">\'david.sheldrick@artsy.net\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ok</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'LOG_IN_SUCCESS\'</span><span class="token punctuation">,</span>\n   accessToken<span class="token punctuation">:</span> <span class="token string">\'038fh239h923908h\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这个 API 是类型安全的，当 TS 识别到 type 为 LOG_IN 的时候，它会要求你在参数中传入 emailAddress 这个参数，这样才能完全满足联合类型中的其中一项。</p>\n<p>等等，我们好像可以让这个 api 变得更简单一点：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="2355063750543995400"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`dispatch(\'LOG_IN_SUCCESS\', {\n   accessToken: \'038fh239h923908h\'\n});`, `2355063750543995400`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'LOG_IN_SUCCESS\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n   accessToken<span class="token punctuation">:</span> <span class="token string">\'038fh239h923908h\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h3 id="参数简化实现"><a href="#%E5%8F%82%E6%95%B0%E7%AE%80%E5%8C%96%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参数简化实现</h3>\n<p>首先，利用方括号选择出 Action 中的所有 type，这个技巧很有用。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="46125417652133090000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ActionType = Action[\'type\'];\n// => &quot;INIT&quot; | &quot;SYNC&quot; | &quot;LOG_IN&quot; | &quot;LOG_IN_SUCCESS&quot;`, `46125417652133090000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ActionType <span class="token operator">=</span> Action<span class="token punctuation">[</span><span class="token string">\'type\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// => "INIT" | "SYNC" | "LOG_IN" | "LOG_IN_SUCCESS"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>但是第二个参数的类型取决于第一个参数，我们可以使用类型变量来对该依赖关系建模。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="73335371729927660000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare function dispatch<T extends ActionType>(type: T, args: ExtractActionParameters<Action, T>): void;`, `73335371729927660000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ActionType</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> ExtractActionParameters<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>注意，这里就用到了 extends 语法，规定了我们的入参 type 必须是 ActionType 中一部分。</p>\n<p>注意这里的第二个参数 args 用 <code class="language-text">ExtractActionParameters&lt;Action, T&gt;</code> 这个类型来把 type 和 args 做了关联</p>\n<p>来看看 ExtractActionParameters 是如何实现的：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15985222169010594000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ExtractActionParameters<A, T> = A extends { type: T } ? A : never;`, `15985222169010594000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ExtractActionParameters<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>在这次实战中，我们第一次运用到了条件类型，<code class="language-text">ExtractActionParameters&lt;Action, T&gt;</code> 会按照我们上文提到的分布条件类型，把 Action 中的 4 项依次去和 <code class="language-text">{ type: T }</code> 进行比对，找出符合的那一项。</p>\n<p>来看看如何使用它：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="86772482805830390000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Test = ExtractActionParameters<Action, \'LOG_IN\'>;\n// => { type: &quot;LOG_IN&quot;, emailAddress: string }`, `86772482805830390000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Test <span class="token operator">=</span> ExtractActionParameters<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> <span class="token string">\'LOG_IN\'</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// => { type: "LOG_IN", emailAddress: string }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>这样就筛选出了 type 匹配的一项。</p>\n<p>接下来我们要把 type 去掉，第一个参数已经是 type 了，因此我们不想再额外声明 type 了。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="32787390024937267000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 把类型中key为&quot;type&quot;去掉\ntype ExcludeTypeField<A> = { [K in Exclude<keyof A, \'type\'>]: A[K] };`, `32787390024937267000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 把类型中key为"type"去掉</span>\n<span class="token keyword">type</span> ExcludeTypeField<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token string">\'type\'</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>这里利用了 keyof 语法，并且利用内置类型 Exclude 把 type 这个 key 去掉，因此只会留下额外的参数。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="38924871897949710000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Test = ExcludeTypeField<{ type: \'LOG_IN\'; emailAddress: string }>;\n// { emailAddress: string }`, `38924871897949710000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Test <span class="token operator">=</span> ExcludeTypeField<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'LOG_IN\'</span><span class="token punctuation">;</span> emailAddress<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// { emailAddress: string }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>然后用它来剔除参数中的 type</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="91405628439613330000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 把参数对象中的type去掉\ntype ExtractActionParametersWithoutType<A, T> = ExcludeTypeField<ExtractActionParameters<A, T>>;`, `91405628439613330000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 把参数对象中的type去掉</span>\n<span class="token keyword">type</span> ExtractActionParametersWithoutType<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> ExcludeTypeField<span class="token operator">&lt;</span>ExtractActionParameters<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="54521786790603710000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare function dispatch<T extends ActionType>(type: T, args: ExtractActionParametersWithoutType<Action, T>): void;`, `54521786790603710000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ActionType</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> ExtractActionParametersWithoutType<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>到此为止，我们就可以实现上文中提到的参数简化功能：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="95294520535206260000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// ok\ndispatch({\n   type: \'LOG_IN\',\n   emailAddress: \'david.sheldrick@artsy.net\'\n});`, `95294520535206260000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// ok</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'LOG_IN\'</span><span class="token punctuation">,</span>\n   emailAddress<span class="token punctuation">:</span> <span class="token string">\'david.sheldrick@artsy.net\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="利用重载进一步优化"><a href="#%E5%88%A9%E7%94%A8%E9%87%8D%E8%BD%BD%E8%BF%9B%E4%B8%80%E6%AD%A5%E4%BC%98%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>利用重载进一步优化</h3>\n<p>到了这一步为止，虽然带参数的 Action 可以完美支持了，但是对于 “INIT” 这种不需要传参的 Action，我们依然要写下面这样代码：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="36427907796315440000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`dispatch(\'INIT\', {});`, `36427907796315440000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'INIT\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>这肯定是不能接受的！所以我们要利用 TypeScript 的函数重载功能。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79953885804055510000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 简单参数类型\nfunction dispatch<T extends SimpleActionType>(type: T): void;\n\n// 复杂参数类型\nfunction dispatch<T extends ComplexActionType>(type: T, args: ExtractActionParametersWithoutType<Action, T>): void;\n\n// 实现\nfunction dispatch(arg: any, payload?: any) {}`, `79953885804055510000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 简单参数类型</span>\n<span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleActionType</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 复杂参数类型</span>\n<span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ComplexActionType</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> ExtractActionParametersWithoutType<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 实现</span>\n<span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> payload<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">any</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>那么关键点就在于 SimpleActionType 和 ComplexActionType 要如何实现了</p>\n<p>SimpleActionType 顾名思义就是除了 type 以外不需要额外参数的 Action 类型</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68064179966796610000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type SimpleAction = ExtractSimpleAction<Action>;`, `68064179966796610000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> SimpleAction <span class="token operator">=</span> ExtractSimpleAction<span class="token operator">&lt;</span>Action<span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>我们如何定义这个 ExtractSimpleAction 条件类型？如果我们从这个 Action 中删除 type 字段，并且结果是一个空的接口，那么这就是一个 SimpleAction，所以我们可能会凭直觉写出这样的代码：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="98776627029241890000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ExtractSimpleAction<A> = ExcludeTypeField<A> extends {} ? A : never;`, `98776627029241890000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ExtractSimpleAction<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> ExcludeTypeField<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>但这样是行不通的，几乎所有的类型都可以 <code class="language-text">extends {}</code>，因为 <code class="language-text">{}</code> 太宽泛了。</p>\n<p>我们应该反过来写：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="43476032031604840000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ExtractSimpleAction<A> = {} extends ExcludeTypeField<A> ? A : never;`, `43476032031604840000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ExtractSimpleAction<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">ExcludeTypeField</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>现在如果 <code class="language-text">ExcludeTypeField &lt;A&gt;</code> 为空，则 extends 表达式为 true，否则为 false。</p>\n<p>但这仍然行不通！因为分布条件类型仅在 extends 关键字的前面是类型变量时发生。</p>\n<p>分布条件类型仅发生在如下场景：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="75065604916767150000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Blah<Var> = Var extends Whatever ? A : B;`, `75065604916767150000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Blah<span class="token operator">&lt;</span>Var<span class="token operator">></span> <span class="token operator">=</span> Var <span class="token keyword">extends</span> <span class="token class-name">Whatever</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token constant">B</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>而不是：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="58472814798142100000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Blah<Var> = Foo<Var> extends Whatever ? A : B;\ntype Blah<Var> = Whatever extends Var ? A : B;`, `58472814798142100000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Blah<span class="token operator">&lt;</span>Var<span class="token operator">></span> <span class="token operator">=</span> Foo<span class="token operator">&lt;</span>Var<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Whatever</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token constant">B</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> Blah<span class="token operator">&lt;</span>Var<span class="token operator">></span> <span class="token operator">=</span> Whatever <span class="token keyword">extends</span> <span class="token class-name">Var</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token constant">B</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>但是我们可以通过一些小技巧绕过这个限制：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15707782556223560000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ExtractSimpleAction<A> = A extends any ? ({} extends ExcludeTypeField<A> ? A : never) : never;`, `15707782556223560000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> ExtractSimpleAction<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">any</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">ExcludeTypeField</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p><code class="language-text">A extends any</code> 是一定成立的，这只是用来绕过 ts 对于分布条件类型的限制，没错啊，我们的 A 确实是在 extends 的前面了，就是骗你 TS，这里是分布条件类型。</p>\n<p>而我们真正想要做的条件判断被放在了中间，因此 Action 联合类型中的每一项又能够分布的去匹配了。</p>\n<p>那么我们就可以简单的筛选出所有不需要额外参数的 type</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="38155256864911190000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type SimpleAction = ExtractSimpleAction<Action>;\ntype SimpleActionType = SimpleAction[\'type\'];`, `38155256864911190000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> SimpleAction <span class="token operator">=</span> ExtractSimpleAction<span class="token operator">&lt;</span>Action<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> SimpleActionType <span class="token operator">=</span> SimpleAction<span class="token punctuation">[</span><span class="token string">\'type\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>再利用 Exclude 取反，找到复杂类型：</p>\n<p>type ComplexActionType = Exclude&#x3C;ActionType, SimpleActionType></p>\n<p>到此为止，我们所需要的功能就完美实现了：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="87972010035426660000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 简单参数类型\nfunction dispatch<T extends SimpleActionType>(type: T): void;\n// 复杂参数类型\nfunction dispatch<T extends ComplexActionType>(type: T, args: ExtractActionParameters<Action, T>): void;\n// 实现\nfunction dispatch(arg: any, payload?: any) {}\n\n// ok\ndispatch(\'SYNC\');\n\n// ok\ndispatch({\n   type: \'LOG_IN\',\n   emailAddress: \'david.sheldrick@artsy.net\'\n});`, `87972010035426660000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token comment">// 简单参数类型</span>\n<span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleActionType</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token comment">// 复杂参数类型</span>\n<span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ComplexActionType</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> ExtractActionParameters<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token comment">// 实现</span>\n<span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> payload<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">any</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// ok</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'SYNC\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ok</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'LOG_IN\'</span><span class="token punctuation">,</span>\n   emailAddress<span class="token punctuation">:</span> <span class="token string">\'david.sheldrick@artsy.net\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="完整代码"><a href="#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>完整代码</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="71599835281581470000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Action =\n   | {\n        type: \'INIT\';\n     }\n   | {\n        type: \'SYNC\';\n     }\n   | {\n        type: \'LOG_IN\';\n        emailAddress: string;\n     }\n   | {\n        type: \'LOG_IN_SUCCESS\';\n        accessToken: string;\n     };\n\n// 用类型查询查出 Action 中所有 type 的联合类型\ntype ActionType = Action[\'type\'];\n\n// 把类型中 key 为 type 去掉\ntype ExcludeTypeField<A> = { [K in Exclude<keyof A, \'type\'>]: A[K] };\n\ntype ExtractActionParameters<A, T> = A extends { type: T } ? A : never;\n\n// 把参数对象中的 type 去掉\n// Extract<A, { type: T } 会挑选出能 extend { type: T } 这个结构的 Action 中的类型\ntype ExtractActionParametersWithoutType<A, T> = ExcludeTypeField<ExtractActionParameters<A, T>>;\n\ntype ExtractSimpleAction<A> = A extends any ? ({} extends ExcludeTypeField<A> ? A : never) : never;\n\ntype SimpleActionType = ExtractSimpleAction<Action>[\'type\'];\ntype ComplexActionType = Exclude<ActionType, SimpleActionType>;\n\n// 简单参数类型\nfunction dispatch<T extends SimpleActionType>(type: T): void;\n// 复杂参数类型\nfunction dispatch<T extends ComplexActionType>(type: T, args: ExtractActionParametersWithoutType<Action, T>): void;\n// 实现\nfunction dispatch(arg: any, payload?: any) {}\n\ndispatch(\'SYNC\');\n\ndispatch(\'LOG_IN\', {\n   emailAddress: \'ssh@qq.com\'\n});`, `71599835281581470000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Action <span class="token operator">=</span>\n   <span class="token operator">|</span> <span class="token punctuation">{</span>\n        <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'INIT\'</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n   <span class="token operator">|</span> <span class="token punctuation">{</span>\n        <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'SYNC\'</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n   <span class="token operator">|</span> <span class="token punctuation">{</span>\n        <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'LOG_IN\'</span><span class="token punctuation">;</span>\n        emailAddress<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n   <span class="token operator">|</span> <span class="token punctuation">{</span>\n        <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">\'LOG_IN_SUCCESS\'</span><span class="token punctuation">;</span>\n        accessToken<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用类型查询查出 Action 中所有 type 的联合类型</span>\n<span class="token keyword">type</span> ActionType <span class="token operator">=</span> Action<span class="token punctuation">[</span><span class="token string">\'type\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 把类型中 key 为 type 去掉</span>\n<span class="token keyword">type</span> ExcludeTypeField<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token string">\'type\'</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> ExtractActionParameters<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 把参数对象中的 type 去掉</span>\n<span class="token comment">// Extract&lt;A, { type: T } 会挑选出能 extend { type: T } 这个结构的 Action 中的类型</span>\n<span class="token keyword">type</span> ExtractActionParametersWithoutType<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> ExcludeTypeField<span class="token operator">&lt;</span>ExtractActionParameters<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> ExtractSimpleAction<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">any</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">ExcludeTypeField</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> SimpleActionType <span class="token operator">=</span> ExtractSimpleAction<span class="token operator">&lt;</span>Action<span class="token operator">></span><span class="token punctuation">[</span><span class="token string">\'type\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> ComplexActionType <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span>ActionType<span class="token punctuation">,</span> SimpleActionType<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 简单参数类型</span>\n<span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleActionType</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token comment">// 复杂参数类型</span>\n<span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ComplexActionType</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> ExtractActionParametersWithoutType<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token comment">// 实现</span>\n<span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> payload<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">any</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'SYNC\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'LOG_IN\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n   emailAddress<span class="token punctuation">:</span> <span class="token string">\'ssh@qq.com\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="ref-类型从零实现"><a href="#ref-%E7%B1%BB%E5%9E%8B%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ref 类型从零实现</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="86790764589620250000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const count = ref(ref(ref(ref(2))));`, `86790764589620250000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>需要支持嵌套后解包，最后只会剩下 { value: number } 这个类型。</p>\n<h3 id="泛型的反向推导"><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%8F%8D%E5%90%91%E6%8E%A8%E5%AF%BC" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>泛型的反向推导</h3>\n<p>泛型的正向用法很多人都知道了。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="19862317828450337000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Value<T> = T;\n\ntype NumberValue = Value<number>;`, `19862317828450337000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Value<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> NumberValue <span class="token operator">=</span> Value<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>这样，NumberValue 解析出的类型就是 number，其实就类似于类型系统里的传参。</p>\n<p>那么反向推导呢？</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="14744815594847683000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function create<T>(val: T): T;\n\nlet num: number;\n\nconst c = create(num);`, `14744815594847683000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> create<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里泛型没有传入，居然也能推断出 value 的类型是 number。</p>\n<p>因为 <code class="language-text">create&lt;T&gt;</code> 这里的泛型 T 被分配给了传入的参数 <code class="language-text">value: T</code>，然后又用这个 T 直接作为返回的类型，</p>\n<p>简单来说，这里的三个 T 被关联起来了，并且在传入 create(2) 的那一刻，这个 T 被统一推断成了 number。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="88450051055131530000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function create<2>(value: 2): 2`, `88450051055131530000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">function</span> create<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">2</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h3 id="索引签名"><a href="#%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>索引签名</h3>\n<p>假设我们有一个这样的类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="30309411274641727000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Test = {\n   foo: number;\n   bar: string;\n};\n\ntype N = Test[\'foo\']; // number`, `30309411274641727000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Test <span class="token operator">=</span> <span class="token punctuation">{</span>\n   foo<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   bar<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">N</span> <span class="token operator">=</span> Test<span class="token punctuation">[</span><span class="token string">\'foo\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>可以通过类似 JavaScript 中的对象属性查找的语法来找出对应的类型。</p>\n<h3 id="条件类型-1"><a href="#%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>条件类型</h3>\n<p>假设我们有一个这样的类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="75118330609439920000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsNumber<T> = T extends number ? \'yes\' : \'no\';\n\ntype A = IsNumber<2>; // yes\ntype B = isNumber<\'3\'>; // no`, `75118330609439920000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> IsNumber<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">number</span> <span class="token operator">?</span> <span class="token string">\'yes\'</span> <span class="token punctuation">:</span> <span class="token string">\'no\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">A</span> <span class="token operator">=</span> IsNumber<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// yes</span>\n<span class="token keyword">type</span> <span class="token constant">B</span> <span class="token operator">=</span> isNumber<span class="token operator">&lt;</span><span class="token string">\'3\'</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// no</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这就是一个典型的条件类型，用 extends 关键字配合三元运算符来判断传入的泛型是否可分配给 extends 后面的类型。</p>\n<p>同时也支持多层的三元运算符（后面会用到）：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="53836475627367600000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type TypeName<T> = T extends string ? \'string\' : T extends boolean ? \'boolean\' : \'object\';\n\ntype T0 = TypeName<string>; // &quot;string&quot;\ntype T1 = TypeName<\'a\'>; // &quot;string&quot;\ntype T2 = TypeName<true>; // &quot;boolean&quot;`, `53836475627367600000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> TypeName<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">?</span> <span class="token string">\'string\'</span> <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">boolean</span> <span class="token operator">?</span> <span class="token string">\'boolean\'</span> <span class="token punctuation">:</span> <span class="token string">\'object\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token constant">T0</span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "string"</span>\n<span class="token keyword">type</span> <span class="token constant">T1</span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token string">\'a\'</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "string"</span>\n<span class="token keyword">type</span> <span class="token constant">T2</span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "boolean"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="keyof"><a href="#keyof" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>keyof</h3>\n<p>keyof 操作符是 TS 中用来获取对象的 key 值集合的，比如：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="94344148169993810000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Obj = {\n   foo: number;\n   bar: string;\n};\n\ntype Keys = keyof Obj; // &quot;foo&quot; | &quot;bar&quot;`, `94344148169993810000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n   foo<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   bar<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Keys <span class="token operator">=</span> <span class="token keyword">keyof</span> Obj<span class="token punctuation">;</span> <span class="token comment">// "foo" | "bar"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这样就轻松获取到了对象 key 值的联合类型：“foo” | “bar”。</p>\n<p>它也可以用在遍历中：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="54034684554889940000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Obj = {\n   foo: number;\n   bar: string;\n};\n\ntype Copy = {\n   [K in keyof Obj]: Obj[K];\n};\n\n// Copy 得到和 Obj 一模一样的类型`, `54034684554889940000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n   foo<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n   bar<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> Copy <span class="token operator">=</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj<span class="token punctuation">]</span><span class="token punctuation">:</span> Obj<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Copy 得到和 Obj 一模一样的类型</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>可以看出，遍历的过程中右侧也可以通过索引直接访问到原类型 Obj 中对应 key 的类型。</p>\n<h3 id="infer-2"><a href="#infer-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>infer</h3>\n<p>这是一个比较难的点，文档中对它的描述是条件类型中的类型推断。</p>\n<p>它的出现使得 ReturnType、 Parameters 等一众工具类型的支持都成为可能，是 TypeScript 进阶必须掌握的一个知识点了。</p>\n<p>注意前置条件，它一定是出现在条件类型中的。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="31349083440499646000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Get<T> = T extends infer R ? R : never;`, `31349083440499646000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Get<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>注意，infer R 的位置代表了一个未知的类型，可以理解为在条件类型中给了它一个占位符，然后就可以在后面的三元运算符中使用它。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="65382979687543005000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type T = Get<number>;\n\n// 经过计算\ntype Get<number> = number extends infer number ? number : never;\n\n// 得到\nnumber;`, `65382979687543005000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> <span class="token constant">T</span> <span class="token operator">=</span> Get<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 经过计算</span>\n<span class="token keyword">type</span> Get<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name">infer</span> <span class="token builtin">number</span> <span class="token operator">?</span> <span class="token builtin">number</span> <span class="token punctuation">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 得到</span>\n<span class="token builtin">number</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>它的使用非常灵活，它也可以出现在泛型位置：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="90268977452573180000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Unpack<T> = T extends Array<infer R> ? R : T;`, `90268977452573180000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> Unpack<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>infer <span class="token constant">R</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="36577446585447326000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type NumArr = Array<number>\ntype U = Unpack<NumArr>\n\n// 经过计算\ntype Unpack<Array<number>> = Array<number> extends Array<infer R> ? R : T\n\n// 得到\nnumber`, `36577446585447326000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                title="ts"\n              >\n                <span class="gatsby-code-button-language">ts</span>\n                <span class="gatsby-code-button-text-icon">复制代码</span>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="ts"><pre style="counter-reset: linenumber NaN" class="language-ts line-numbers"><code class="language-ts"><span class="token keyword">type</span> NumArr <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span>\n<span class="token keyword">type</span> <span class="token constant">U</span> <span class="token operator">=</span> Unpack<span class="token operator">&lt;</span>NumArr<span class="token operator">></span>\n\n<span class="token comment">// 经过计算</span>\n<span class="token keyword">type</span> Unpack<span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>infer <span class="token constant">R</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> <span class="token constant">T</span>\n\n<span class="token comment">// 得到</span>\n<span class="token builtin">number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>仔细看看，是不是有那么点感觉了，它就是对于 extends 后面未知的某些类型进行一个占位 infer R，后续就可以使用推断出来的 R 这个类型。</p>',
id:"/home/runner/work/GatsbyBlog/GatsbyBlog/blog/TypeScript入门学习/index.md absPath of file >>> MarkdownRemark",timeToRead:62,frontmatter:{date:"2021-10-22 13:47:44",path:"/typescript-introduce-learn/",tags:"前端, TypeScript, ts",title:"TypeScript 入门学习",draft:null}}],length:2,tag:"ts",pagesSum:1,page:1}}}});